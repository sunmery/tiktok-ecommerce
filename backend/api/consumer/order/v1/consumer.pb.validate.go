// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: order/v1/consumer.proto

package consumerorderv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	orderv1 "backend/api/order/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = orderv1.PaymentStatus(0)
)

// Validate checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Order) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OrderMultiError, or nil if none found.
func (m *Order) ValidateAll() error {
	return m.validate(true)
}

func (m *Order) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrderValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrderValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrderValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for UserId

	if utf8.RuneCountInString(m.GetCurrency()) != 3 {
		err := OrderValidationError{
			field:  "Currency",
			reason: "value length must be 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Email

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PaymentStatus

	// no validation rules for ShippingStatus

	if m.OrderId != nil {
		// no validation rules for OrderId
	}

	if m.SubOrderId != nil {
		// no validation rules for SubOrderId
	}

	if len(errors) > 0 {
		return OrderMultiError(errors)
	}

	return nil
}

// OrderMultiError is an error wrapping multiple validation errors returned by
// Order.ValidateAll() if the designated constraints aren't met.
type OrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderMultiError) AllErrors() []error { return m }

// OrderValidationError is the validation error returned by Order.Validate if
// the designated constraints aren't met.
type OrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderValidationError) ErrorName() string { return "OrderValidationError" }

// Error satisfies the builtin error interface
func (e OrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderValidationError{}

// Validate checks the field values on OrderItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderItemMultiError, or nil
// if none found.
func (m *OrderItem) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderItemValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderItemValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderItemValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Cost

	if len(errors) > 0 {
		return OrderItemMultiError(errors)
	}

	return nil
}

// OrderItemMultiError is an error wrapping multiple validation errors returned
// by OrderItem.ValidateAll() if the designated constraints aren't met.
type OrderItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderItemMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderItemMultiError) AllErrors() []error { return m }

// OrderItemValidationError is the validation error returned by
// OrderItem.Validate if the designated constraints aren't met.
type OrderItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderItemValidationError) ErrorName() string { return "OrderItemValidationError" }

// Error satisfies the builtin error interface
func (e OrderItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderItemValidationError{}

// Validate checks the field values on ConsumerOrders with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ConsumerOrders) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConsumerOrders with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConsumerOrdersMultiError,
// or nil if none found.
func (m *ConsumerOrders) ValidateAll() error {
	return m.validate(true)
}

func (m *ConsumerOrders) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConsumerOrdersValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConsumerOrdersValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConsumerOrdersValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ConsumerOrdersMultiError(errors)
	}

	return nil
}

// ConsumerOrdersMultiError is an error wrapping multiple validation errors
// returned by ConsumerOrders.ValidateAll() if the designated constraints
// aren't met.
type ConsumerOrdersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConsumerOrdersMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConsumerOrdersMultiError) AllErrors() []error { return m }

// ConsumerOrdersValidationError is the validation error returned by
// ConsumerOrders.Validate if the designated constraints aren't met.
type ConsumerOrdersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConsumerOrdersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConsumerOrdersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConsumerOrdersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConsumerOrdersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConsumerOrdersValidationError) ErrorName() string { return "ConsumerOrdersValidationError" }

// Error satisfies the builtin error interface
func (e ConsumerOrdersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConsumerOrders.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConsumerOrdersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConsumerOrdersValidationError{}

// Validate checks the field values on GetConsumerSubOrderDetailRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetConsumerSubOrderDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConsumerSubOrderDetailRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetConsumerSubOrderDetailRequestMultiError, or nil if none found.
func (m *GetConsumerSubOrderDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConsumerSubOrderDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SubOrderId

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if len(errors) > 0 {
		return GetConsumerSubOrderDetailRequestMultiError(errors)
	}

	return nil
}

// GetConsumerSubOrderDetailRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetConsumerSubOrderDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type GetConsumerSubOrderDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConsumerSubOrderDetailRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConsumerSubOrderDetailRequestMultiError) AllErrors() []error { return m }

// GetConsumerSubOrderDetailRequestValidationError is the validation error
// returned by GetConsumerSubOrderDetailRequest.Validate if the designated
// constraints aren't met.
type GetConsumerSubOrderDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConsumerSubOrderDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConsumerSubOrderDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConsumerSubOrderDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConsumerSubOrderDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConsumerSubOrderDetailRequestValidationError) ErrorName() string {
	return "GetConsumerSubOrderDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetConsumerSubOrderDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConsumerSubOrderDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConsumerSubOrderDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConsumerSubOrderDetailRequestValidationError{}

// Validate checks the field values on GetConsumerOrdersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConsumerOrdersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConsumerOrdersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConsumerOrdersRequestMultiError, or nil if none found.
func (m *GetConsumerOrdersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConsumerOrdersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetConsumerOrdersRequestMultiError(errors)
	}

	return nil
}

// GetConsumerOrdersRequestMultiError is an error wrapping multiple validation
// errors returned by GetConsumerOrdersRequest.ValidateAll() if the designated
// constraints aren't met.
type GetConsumerOrdersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConsumerOrdersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConsumerOrdersRequestMultiError) AllErrors() []error { return m }

// GetConsumerOrdersRequestValidationError is the validation error returned by
// GetConsumerOrdersRequest.Validate if the designated constraints aren't met.
type GetConsumerOrdersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConsumerOrdersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConsumerOrdersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConsumerOrdersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConsumerOrdersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConsumerOrdersRequestValidationError) ErrorName() string {
	return "GetConsumerOrdersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetConsumerOrdersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConsumerOrdersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConsumerOrdersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConsumerOrdersRequestValidationError{}

// Validate checks the field values on GetConsumerOrdersWithSubordersRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetConsumerOrdersWithSubordersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConsumerOrdersWithSubordersRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetConsumerOrdersWithSubordersRequestMultiError, or nil if none found.
func (m *GetConsumerOrdersWithSubordersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConsumerOrdersWithSubordersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for OrderId

	if len(errors) > 0 {
		return GetConsumerOrdersWithSubordersRequestMultiError(errors)
	}

	return nil
}

// GetConsumerOrdersWithSubordersRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetConsumerOrdersWithSubordersRequest.ValidateAll() if the designated
// constraints aren't met.
type GetConsumerOrdersWithSubordersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConsumerOrdersWithSubordersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConsumerOrdersWithSubordersRequestMultiError) AllErrors() []error { return m }

// GetConsumerOrdersWithSubordersRequestValidationError is the validation error
// returned by GetConsumerOrdersWithSubordersRequest.Validate if the
// designated constraints aren't met.
type GetConsumerOrdersWithSubordersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConsumerOrdersWithSubordersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConsumerOrdersWithSubordersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConsumerOrdersWithSubordersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConsumerOrdersWithSubordersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConsumerOrdersWithSubordersRequestValidationError) ErrorName() string {
	return "GetConsumerOrdersWithSubordersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetConsumerOrdersWithSubordersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConsumerOrdersWithSubordersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConsumerOrdersWithSubordersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConsumerOrdersWithSubordersRequestValidationError{}

// Validate checks the field values on GetConsumerOrdersWithSubordersReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetConsumerOrdersWithSubordersReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConsumerOrdersWithSubordersReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetConsumerOrdersWithSubordersReplyMultiError, or nil if none found.
func (m *GetConsumerOrdersWithSubordersReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConsumerOrdersWithSubordersReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetConsumerOrdersWithSubordersReplyValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetConsumerOrdersWithSubordersReplyValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetConsumerOrdersWithSubordersReplyValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetConsumerOrdersWithSubordersReplyMultiError(errors)
	}

	return nil
}

// GetConsumerOrdersWithSubordersReplyMultiError is an error wrapping multiple
// validation errors returned by
// GetConsumerOrdersWithSubordersReply.ValidateAll() if the designated
// constraints aren't met.
type GetConsumerOrdersWithSubordersReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConsumerOrdersWithSubordersReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConsumerOrdersWithSubordersReplyMultiError) AllErrors() []error { return m }

// GetConsumerOrdersWithSubordersReplyValidationError is the validation error
// returned by GetConsumerOrdersWithSubordersReply.Validate if the designated
// constraints aren't met.
type GetConsumerOrdersWithSubordersReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConsumerOrdersWithSubordersReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConsumerOrdersWithSubordersReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConsumerOrdersWithSubordersReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConsumerOrdersWithSubordersReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConsumerOrdersWithSubordersReplyValidationError) ErrorName() string {
	return "GetConsumerOrdersWithSubordersReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetConsumerOrdersWithSubordersReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConsumerOrdersWithSubordersReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConsumerOrdersWithSubordersReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConsumerOrdersWithSubordersReplyValidationError{}

// Validate checks the field values on PlaceOrderRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PlaceOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlaceOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlaceOrderRequestMultiError, or nil if none found.
func (m *PlaceOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PlaceOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCurrency()) != 3 {
		err := PlaceOrderRequestValidationError{
			field:  "Currency",
			reason: "value length must be 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlaceOrderRequestValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlaceOrderRequestValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlaceOrderRequestValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Email

	for idx, item := range m.GetOrderItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlaceOrderRequestValidationError{
						field:  fmt.Sprintf("OrderItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlaceOrderRequestValidationError{
						field:  fmt.Sprintf("OrderItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlaceOrderRequestValidationError{
					field:  fmt.Sprintf("OrderItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PlaceOrderRequestMultiError(errors)
	}

	return nil
}

// PlaceOrderRequestMultiError is an error wrapping multiple validation errors
// returned by PlaceOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type PlaceOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlaceOrderRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlaceOrderRequestMultiError) AllErrors() []error { return m }

// PlaceOrderRequestValidationError is the validation error returned by
// PlaceOrderRequest.Validate if the designated constraints aren't met.
type PlaceOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlaceOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlaceOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlaceOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlaceOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlaceOrderRequestValidationError) ErrorName() string {
	return "PlaceOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PlaceOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlaceOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlaceOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlaceOrderRequestValidationError{}

// Validate checks the field values on PlaceOrderReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PlaceOrderReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlaceOrderReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlaceOrderReplyMultiError, or nil if none found.
func (m *PlaceOrderReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PlaceOrderReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrder()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlaceOrderReplyValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlaceOrderReplyValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrder()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlaceOrderReplyValidationError{
				field:  "Order",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PlaceOrderReplyMultiError(errors)
	}

	return nil
}

// PlaceOrderReplyMultiError is an error wrapping multiple validation errors
// returned by PlaceOrderReply.ValidateAll() if the designated constraints
// aren't met.
type PlaceOrderReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlaceOrderReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlaceOrderReplyMultiError) AllErrors() []error { return m }

// PlaceOrderReplyValidationError is the validation error returned by
// PlaceOrderReply.Validate if the designated constraints aren't met.
type PlaceOrderReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlaceOrderReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlaceOrderReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlaceOrderReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlaceOrderReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlaceOrderReplyValidationError) ErrorName() string { return "PlaceOrderReplyValidationError" }

// Error satisfies the builtin error interface
func (e PlaceOrderReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlaceOrderReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlaceOrderReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlaceOrderReplyValidationError{}

// Validate checks the field values on ConfirmReceivedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfirmReceivedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfirmReceivedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfirmReceivedRequestMultiError, or nil if none found.
func (m *ConfirmReceivedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfirmReceivedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	if len(errors) > 0 {
		return ConfirmReceivedRequestMultiError(errors)
	}

	return nil
}

// ConfirmReceivedRequestMultiError is an error wrapping multiple validation
// errors returned by ConfirmReceivedRequest.ValidateAll() if the designated
// constraints aren't met.
type ConfirmReceivedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfirmReceivedRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfirmReceivedRequestMultiError) AllErrors() []error { return m }

// ConfirmReceivedRequestValidationError is the validation error returned by
// ConfirmReceivedRequest.Validate if the designated constraints aren't met.
type ConfirmReceivedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmReceivedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmReceivedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmReceivedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmReceivedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmReceivedRequestValidationError) ErrorName() string {
	return "ConfirmReceivedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConfirmReceivedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmReceivedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmReceivedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmReceivedRequestValidationError{}

// Validate checks the field values on ConfirmReceivedReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfirmReceivedReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfirmReceivedReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfirmReceivedReplyMultiError, or nil if none found.
func (m *ConfirmReceivedReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfirmReceivedReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ConfirmReceivedReplyMultiError(errors)
	}

	return nil
}

// ConfirmReceivedReplyMultiError is an error wrapping multiple validation
// errors returned by ConfirmReceivedReply.ValidateAll() if the designated
// constraints aren't met.
type ConfirmReceivedReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfirmReceivedReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfirmReceivedReplyMultiError) AllErrors() []error { return m }

// ConfirmReceivedReplyValidationError is the validation error returned by
// ConfirmReceivedReply.Validate if the designated constraints aren't met.
type ConfirmReceivedReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmReceivedReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmReceivedReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmReceivedReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmReceivedReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmReceivedReplyValidationError) ErrorName() string {
	return "ConfirmReceivedReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ConfirmReceivedReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmReceivedReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmReceivedReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmReceivedReplyValidationError{}

// Validate checks the field values on GetShipOrderStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetShipOrderStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShipOrderStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetShipOrderStatusRequestMultiError, or nil if none found.
func (m *GetShipOrderStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShipOrderStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SubOrderId

	if len(errors) > 0 {
		return GetShipOrderStatusRequestMultiError(errors)
	}

	return nil
}

// GetShipOrderStatusRequestMultiError is an error wrapping multiple validation
// errors returned by GetShipOrderStatusRequest.ValidateAll() if the
// designated constraints aren't met.
type GetShipOrderStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShipOrderStatusRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShipOrderStatusRequestMultiError) AllErrors() []error { return m }

// GetShipOrderStatusRequestValidationError is the validation error returned by
// GetShipOrderStatusRequest.Validate if the designated constraints aren't met.
type GetShipOrderStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShipOrderStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShipOrderStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShipOrderStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShipOrderStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShipOrderStatusRequestValidationError) ErrorName() string {
	return "GetShipOrderStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetShipOrderStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShipOrderStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShipOrderStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShipOrderStatusRequestValidationError{}

// Validate checks the field values on GetShipOrderStatusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetShipOrderStatusReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShipOrderStatusReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetShipOrderStatusReplyMultiError, or nil if none found.
func (m *GetShipOrderStatusReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShipOrderStatusReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	// no validation rules for SubOrderId

	// no validation rules for ShippingStatus

	if all {
		switch v := interface{}(m.GetReceiverAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetShipOrderStatusReplyValidationError{
					field:  "ReceiverAddress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetShipOrderStatusReplyValidationError{
					field:  "ReceiverAddress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReceiverAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetShipOrderStatusReplyValidationError{
				field:  "ReceiverAddress",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShippingAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetShipOrderStatusReplyValidationError{
					field:  "ShippingAddress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetShipOrderStatusReplyValidationError{
					field:  "ShippingAddress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShippingAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetShipOrderStatusReplyValidationError{
				field:  "ShippingAddress",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TrackingNumber

	// no validation rules for Carrier

	if len(errors) > 0 {
		return GetShipOrderStatusReplyMultiError(errors)
	}

	return nil
}

// GetShipOrderStatusReplyMultiError is an error wrapping multiple validation
// errors returned by GetShipOrderStatusReply.ValidateAll() if the designated
// constraints aren't met.
type GetShipOrderStatusReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShipOrderStatusReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShipOrderStatusReplyMultiError) AllErrors() []error { return m }

// GetShipOrderStatusReplyValidationError is the validation error returned by
// GetShipOrderStatusReply.Validate if the designated constraints aren't met.
type GetShipOrderStatusReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShipOrderStatusReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShipOrderStatusReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShipOrderStatusReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShipOrderStatusReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShipOrderStatusReplyValidationError) ErrorName() string {
	return "GetShipOrderStatusReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetShipOrderStatusReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShipOrderStatusReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShipOrderStatusReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShipOrderStatusReplyValidationError{}

// Validate checks the field values on
// GetConsumerOrdersWithSubordersReply_Suborders with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetConsumerOrdersWithSubordersReply_Suborders) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetConsumerOrdersWithSubordersReply_Suborders with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetConsumerOrdersWithSubordersReply_SubordersMultiError, or nil if none found.
func (m *GetConsumerOrdersWithSubordersReply_Suborders) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConsumerOrdersWithSubordersReply_Suborders) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for SubOrderId

	// no validation rules for StreetAddress

	// no validation rules for City

	// no validation rules for State

	// no validation rules for Country

	// no validation rules for ZipCode

	// no validation rules for Email

	// no validation rules for MerchantId

	// no validation rules for PaymentStatus

	// no validation rules for ShippingStatus

	// no validation rules for TotalAmount

	// no validation rules for Currency

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetConsumerOrdersWithSubordersReply_SubordersValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetConsumerOrdersWithSubordersReply_SubordersValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetConsumerOrdersWithSubordersReply_SubordersValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetConsumerOrdersWithSubordersReply_SubordersValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetConsumerOrdersWithSubordersReply_SubordersValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetConsumerOrdersWithSubordersReply_SubordersValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetConsumerOrdersWithSubordersReply_SubordersValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetConsumerOrdersWithSubordersReply_SubordersValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetConsumerOrdersWithSubordersReply_SubordersValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetConsumerOrdersWithSubordersReply_SubordersMultiError(errors)
	}

	return nil
}

// GetConsumerOrdersWithSubordersReply_SubordersMultiError is an error wrapping
// multiple validation errors returned by
// GetConsumerOrdersWithSubordersReply_Suborders.ValidateAll() if the
// designated constraints aren't met.
type GetConsumerOrdersWithSubordersReply_SubordersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConsumerOrdersWithSubordersReply_SubordersMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConsumerOrdersWithSubordersReply_SubordersMultiError) AllErrors() []error { return m }

// GetConsumerOrdersWithSubordersReply_SubordersValidationError is the
// validation error returned by
// GetConsumerOrdersWithSubordersReply_Suborders.Validate if the designated
// constraints aren't met.
type GetConsumerOrdersWithSubordersReply_SubordersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConsumerOrdersWithSubordersReply_SubordersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConsumerOrdersWithSubordersReply_SubordersValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetConsumerOrdersWithSubordersReply_SubordersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConsumerOrdersWithSubordersReply_SubordersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConsumerOrdersWithSubordersReply_SubordersValidationError) ErrorName() string {
	return "GetConsumerOrdersWithSubordersReply_SubordersValidationError"
}

// Error satisfies the builtin error interface
func (e GetConsumerOrdersWithSubordersReply_SubordersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConsumerOrdersWithSubordersReply_Suborders.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConsumerOrdersWithSubordersReply_SubordersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConsumerOrdersWithSubordersReply_SubordersValidationError{}

// Validate checks the field values on PlaceOrderReply_OrderResult with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlaceOrderReply_OrderResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlaceOrderReply_OrderResult with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlaceOrderReply_OrderResultMultiError, or nil if none found.
func (m *PlaceOrderReply_OrderResult) ValidateAll() error {
	return m.validate(true)
}

func (m *PlaceOrderReply_OrderResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	// no validation rules for FreezeId

	// no validation rules for ConsumerVersion

	if len(errors) > 0 {
		return PlaceOrderReply_OrderResultMultiError(errors)
	}

	return nil
}

// PlaceOrderReply_OrderResultMultiError is an error wrapping multiple
// validation errors returned by PlaceOrderReply_OrderResult.ValidateAll() if
// the designated constraints aren't met.
type PlaceOrderReply_OrderResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlaceOrderReply_OrderResultMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlaceOrderReply_OrderResultMultiError) AllErrors() []error { return m }

// PlaceOrderReply_OrderResultValidationError is the validation error returned
// by PlaceOrderReply_OrderResult.Validate if the designated constraints
// aren't met.
type PlaceOrderReply_OrderResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlaceOrderReply_OrderResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlaceOrderReply_OrderResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlaceOrderReply_OrderResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlaceOrderReply_OrderResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlaceOrderReply_OrderResultValidationError) ErrorName() string {
	return "PlaceOrderReply_OrderResultValidationError"
}

// Error satisfies the builtin error interface
func (e PlaceOrderReply_OrderResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlaceOrderReply_OrderResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlaceOrderReply_OrderResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlaceOrderReply_OrderResultValidationError{}

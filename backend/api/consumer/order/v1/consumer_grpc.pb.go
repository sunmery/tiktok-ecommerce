// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: order/v1/consumer.proto

package consumerorderv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConsumerOrder_PlaceOrder_FullMethodName                     = "/ecommerce.consumerorder.v1.ConsumerOrder/PlaceOrder"
	ConsumerOrder_GetConsumerOrders_FullMethodName              = "/ecommerce.consumerorder.v1.ConsumerOrder/GetConsumerOrders"
	ConsumerOrder_GetConsumerOrdersWithSuborders_FullMethodName = "/ecommerce.consumerorder.v1.ConsumerOrder/GetConsumerOrdersWithSuborders"
	ConsumerOrder_GetConsumerSubOrderDetail_FullMethodName      = "/ecommerce.consumerorder.v1.ConsumerOrder/GetConsumerSubOrderDetail"
	ConsumerOrder_ConfirmReceived_FullMethodName                = "/ecommerce.consumerorder.v1.ConsumerOrder/ConfirmReceived"
	ConsumerOrder_GetShipOrderStatus_FullMethodName             = "/ecommerce.consumerorder.v1.ConsumerOrder/GetShipOrderStatus"
)

// ConsumerOrderClient is the client API for ConsumerOrder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsumerOrderClient interface {
	// 用户下单
	PlaceOrder(ctx context.Context, in *PlaceOrderRequest, opts ...grpc.CallOption) (*PlaceOrderReply, error)
	// 查询用户订单列表
	GetConsumerOrders(ctx context.Context, in *GetConsumerOrdersRequest, opts ...grpc.CallOption) (*ConsumerOrders, error)
	// 根据用户主订单查询子订单
	GetConsumerOrdersWithSuborders(ctx context.Context, in *GetConsumerOrdersWithSubordersRequest, opts ...grpc.CallOption) (*GetConsumerOrdersWithSubordersReply, error)
	// 根据用户id和子订单ID查询子订单详情
	GetConsumerSubOrderDetail(ctx context.Context, in *GetConsumerSubOrderDetailRequest, opts ...grpc.CallOption) (*Order, error)
	// 用户确认收货
	ConfirmReceived(ctx context.Context, in *ConfirmReceivedRequest, opts ...grpc.CallOption) (*ConfirmReceivedReply, error)
	// 查询订单货运状态
	GetShipOrderStatus(ctx context.Context, in *GetShipOrderStatusRequest, opts ...grpc.CallOption) (*GetShipOrderStatusReply, error)
}

type consumerOrderClient struct {
	cc grpc.ClientConnInterface
}

func NewConsumerOrderClient(cc grpc.ClientConnInterface) ConsumerOrderClient {
	return &consumerOrderClient{cc}
}

func (c *consumerOrderClient) PlaceOrder(ctx context.Context, in *PlaceOrderRequest, opts ...grpc.CallOption) (*PlaceOrderReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlaceOrderReply)
	err := c.cc.Invoke(ctx, ConsumerOrder_PlaceOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerOrderClient) GetConsumerOrders(ctx context.Context, in *GetConsumerOrdersRequest, opts ...grpc.CallOption) (*ConsumerOrders, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConsumerOrders)
	err := c.cc.Invoke(ctx, ConsumerOrder_GetConsumerOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerOrderClient) GetConsumerOrdersWithSuborders(ctx context.Context, in *GetConsumerOrdersWithSubordersRequest, opts ...grpc.CallOption) (*GetConsumerOrdersWithSubordersReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConsumerOrdersWithSubordersReply)
	err := c.cc.Invoke(ctx, ConsumerOrder_GetConsumerOrdersWithSuborders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerOrderClient) GetConsumerSubOrderDetail(ctx context.Context, in *GetConsumerSubOrderDetailRequest, opts ...grpc.CallOption) (*Order, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Order)
	err := c.cc.Invoke(ctx, ConsumerOrder_GetConsumerSubOrderDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerOrderClient) ConfirmReceived(ctx context.Context, in *ConfirmReceivedRequest, opts ...grpc.CallOption) (*ConfirmReceivedReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfirmReceivedReply)
	err := c.cc.Invoke(ctx, ConsumerOrder_ConfirmReceived_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerOrderClient) GetShipOrderStatus(ctx context.Context, in *GetShipOrderStatusRequest, opts ...grpc.CallOption) (*GetShipOrderStatusReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetShipOrderStatusReply)
	err := c.cc.Invoke(ctx, ConsumerOrder_GetShipOrderStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsumerOrderServer is the server API for ConsumerOrder service.
// All implementations must embed UnimplementedConsumerOrderServer
// for forward compatibility.
type ConsumerOrderServer interface {
	// 用户下单
	PlaceOrder(context.Context, *PlaceOrderRequest) (*PlaceOrderReply, error)
	// 查询用户订单列表
	GetConsumerOrders(context.Context, *GetConsumerOrdersRequest) (*ConsumerOrders, error)
	// 根据用户主订单查询子订单
	GetConsumerOrdersWithSuborders(context.Context, *GetConsumerOrdersWithSubordersRequest) (*GetConsumerOrdersWithSubordersReply, error)
	// 根据用户id和子订单ID查询子订单详情
	GetConsumerSubOrderDetail(context.Context, *GetConsumerSubOrderDetailRequest) (*Order, error)
	// 用户确认收货
	ConfirmReceived(context.Context, *ConfirmReceivedRequest) (*ConfirmReceivedReply, error)
	// 查询订单货运状态
	GetShipOrderStatus(context.Context, *GetShipOrderStatusRequest) (*GetShipOrderStatusReply, error)
	mustEmbedUnimplementedConsumerOrderServer()
}

// UnimplementedConsumerOrderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConsumerOrderServer struct{}

func (UnimplementedConsumerOrderServer) PlaceOrder(context.Context, *PlaceOrderRequest) (*PlaceOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceOrder not implemented")
}
func (UnimplementedConsumerOrderServer) GetConsumerOrders(context.Context, *GetConsumerOrdersRequest) (*ConsumerOrders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsumerOrders not implemented")
}
func (UnimplementedConsumerOrderServer) GetConsumerOrdersWithSuborders(context.Context, *GetConsumerOrdersWithSubordersRequest) (*GetConsumerOrdersWithSubordersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsumerOrdersWithSuborders not implemented")
}
func (UnimplementedConsumerOrderServer) GetConsumerSubOrderDetail(context.Context, *GetConsumerSubOrderDetailRequest) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsumerSubOrderDetail not implemented")
}
func (UnimplementedConsumerOrderServer) ConfirmReceived(context.Context, *ConfirmReceivedRequest) (*ConfirmReceivedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmReceived not implemented")
}
func (UnimplementedConsumerOrderServer) GetShipOrderStatus(context.Context, *GetShipOrderStatusRequest) (*GetShipOrderStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipOrderStatus not implemented")
}
func (UnimplementedConsumerOrderServer) mustEmbedUnimplementedConsumerOrderServer() {}
func (UnimplementedConsumerOrderServer) testEmbeddedByValue()                       {}

// UnsafeConsumerOrderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsumerOrderServer will
// result in compilation errors.
type UnsafeConsumerOrderServer interface {
	mustEmbedUnimplementedConsumerOrderServer()
}

func RegisterConsumerOrderServer(s grpc.ServiceRegistrar, srv ConsumerOrderServer) {
	// If the following call pancis, it indicates UnimplementedConsumerOrderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConsumerOrder_ServiceDesc, srv)
}

func _ConsumerOrder_PlaceOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerOrderServer).PlaceOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsumerOrder_PlaceOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerOrderServer).PlaceOrder(ctx, req.(*PlaceOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumerOrder_GetConsumerOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsumerOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerOrderServer).GetConsumerOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsumerOrder_GetConsumerOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerOrderServer).GetConsumerOrders(ctx, req.(*GetConsumerOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumerOrder_GetConsumerOrdersWithSuborders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsumerOrdersWithSubordersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerOrderServer).GetConsumerOrdersWithSuborders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsumerOrder_GetConsumerOrdersWithSuborders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerOrderServer).GetConsumerOrdersWithSuborders(ctx, req.(*GetConsumerOrdersWithSubordersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumerOrder_GetConsumerSubOrderDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsumerSubOrderDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerOrderServer).GetConsumerSubOrderDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsumerOrder_GetConsumerSubOrderDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerOrderServer).GetConsumerSubOrderDetail(ctx, req.(*GetConsumerSubOrderDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumerOrder_ConfirmReceived_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmReceivedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerOrderServer).ConfirmReceived(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsumerOrder_ConfirmReceived_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerOrderServer).ConfirmReceived(ctx, req.(*ConfirmReceivedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumerOrder_GetShipOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipOrderStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerOrderServer).GetShipOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsumerOrder_GetShipOrderStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerOrderServer).GetShipOrderStatus(ctx, req.(*GetShipOrderStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConsumerOrder_ServiceDesc is the grpc.ServiceDesc for ConsumerOrder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConsumerOrder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ecommerce.consumerorder.v1.ConsumerOrder",
	HandlerType: (*ConsumerOrderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlaceOrder",
			Handler:    _ConsumerOrder_PlaceOrder_Handler,
		},
		{
			MethodName: "GetConsumerOrders",
			Handler:    _ConsumerOrder_GetConsumerOrders_Handler,
		},
		{
			MethodName: "GetConsumerOrdersWithSuborders",
			Handler:    _ConsumerOrder_GetConsumerOrdersWithSuborders_Handler,
		},
		{
			MethodName: "GetConsumerSubOrderDetail",
			Handler:    _ConsumerOrder_GetConsumerSubOrderDetail_Handler,
		},
		{
			MethodName: "ConfirmReceived",
			Handler:    _ConsumerOrder_ConfirmReceived_Handler,
		},
		{
			MethodName: "GetShipOrderStatus",
			Handler:    _ConsumerOrder_GetShipOrderStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order/v1/consumer.proto",
}

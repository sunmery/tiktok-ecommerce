// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: order/v1/consumer.proto

package consumerorderv1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationConsumerOrderConfirmReceived = "/ecommerce.consumerorder.v1.ConsumerOrder/ConfirmReceived"
const OperationConsumerOrderGetConsumerOrders = "/ecommerce.consumerorder.v1.ConsumerOrder/GetConsumerOrders"
const OperationConsumerOrderGetConsumerOrdersWithSuborders = "/ecommerce.consumerorder.v1.ConsumerOrder/GetConsumerOrdersWithSuborders"
const OperationConsumerOrderGetConsumerSubOrderDetail = "/ecommerce.consumerorder.v1.ConsumerOrder/GetConsumerSubOrderDetail"
const OperationConsumerOrderGetShipOrderStatus = "/ecommerce.consumerorder.v1.ConsumerOrder/GetShipOrderStatus"
const OperationConsumerOrderPlaceOrder = "/ecommerce.consumerorder.v1.ConsumerOrder/PlaceOrder"

type ConsumerOrderHTTPServer interface {
	// ConfirmReceived 用户确认收货
	ConfirmReceived(context.Context, *ConfirmReceivedRequest) (*ConfirmReceivedReply, error)
	// GetConsumerOrders 查询用户订单列表
	GetConsumerOrders(context.Context, *GetConsumerOrdersRequest) (*ConsumerOrders, error)
	// GetConsumerOrdersWithSuborders 根据用户主订单查询子订单
	GetConsumerOrdersWithSuborders(context.Context, *GetConsumerOrdersWithSubordersRequest) (*GetConsumerOrdersWithSubordersReply, error)
	// GetConsumerSubOrderDetail 根据用户id和子订单ID查询子订单详情
	GetConsumerSubOrderDetail(context.Context, *GetConsumerSubOrderDetailRequest) (*Order, error)
	// GetShipOrderStatus 查询订单货运状态
	GetShipOrderStatus(context.Context, *GetShipOrderStatusRequest) (*GetShipOrderStatusReply, error)
	// PlaceOrder 用户下单
	PlaceOrder(context.Context, *PlaceOrderRequest) (*PlaceOrderReply, error)
}

func RegisterConsumerOrderHTTPServer(s *http.Server, srv ConsumerOrderHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/consumers/orders", _ConsumerOrder_PlaceOrder0_HTTP_Handler(srv))
	r.GET("/v1/consumers/orders", _ConsumerOrder_GetConsumerOrders0_HTTP_Handler(srv))
	r.GET("/v1/consumers/orders/{order_id}/suborders", _ConsumerOrder_GetConsumerOrdersWithSuborders0_HTTP_Handler(srv))
	r.GET("/v1/consumers/orders/{sub_order_id}", _ConsumerOrder_GetConsumerSubOrderDetail0_HTTP_Handler(srv))
	r.PATCH("/v1/consumers/orders/{order_id}/receive", _ConsumerOrder_ConfirmReceived0_HTTP_Handler(srv))
	r.GET("/v1/consumers/orders/{sub_order_id}/ship/status", _ConsumerOrder_GetShipOrderStatus0_HTTP_Handler(srv))
}

func _ConsumerOrder_PlaceOrder0_HTTP_Handler(srv ConsumerOrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PlaceOrderRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConsumerOrderPlaceOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PlaceOrder(ctx, req.(*PlaceOrderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PlaceOrderReply)
		return ctx.Result(200, reply)
	}
}

func _ConsumerOrder_GetConsumerOrders0_HTTP_Handler(srv ConsumerOrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetConsumerOrdersRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConsumerOrderGetConsumerOrders)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetConsumerOrders(ctx, req.(*GetConsumerOrdersRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ConsumerOrders)
		return ctx.Result(200, reply)
	}
}

func _ConsumerOrder_GetConsumerOrdersWithSuborders0_HTTP_Handler(srv ConsumerOrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetConsumerOrdersWithSubordersRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConsumerOrderGetConsumerOrdersWithSuborders)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetConsumerOrdersWithSuborders(ctx, req.(*GetConsumerOrdersWithSubordersRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetConsumerOrdersWithSubordersReply)
		return ctx.Result(200, reply)
	}
}

func _ConsumerOrder_GetConsumerSubOrderDetail0_HTTP_Handler(srv ConsumerOrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetConsumerSubOrderDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConsumerOrderGetConsumerSubOrderDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetConsumerSubOrderDetail(ctx, req.(*GetConsumerSubOrderDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Order)
		return ctx.Result(200, reply)
	}
}

func _ConsumerOrder_ConfirmReceived0_HTTP_Handler(srv ConsumerOrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ConfirmReceivedRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConsumerOrderConfirmReceived)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ConfirmReceived(ctx, req.(*ConfirmReceivedRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ConfirmReceivedReply)
		return ctx.Result(200, reply)
	}
}

func _ConsumerOrder_GetShipOrderStatus0_HTTP_Handler(srv ConsumerOrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetShipOrderStatusRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConsumerOrderGetShipOrderStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetShipOrderStatus(ctx, req.(*GetShipOrderStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetShipOrderStatusReply)
		return ctx.Result(200, reply)
	}
}

type ConsumerOrderHTTPClient interface {
	ConfirmReceived(ctx context.Context, req *ConfirmReceivedRequest, opts ...http.CallOption) (rsp *ConfirmReceivedReply, err error)
	GetConsumerOrders(ctx context.Context, req *GetConsumerOrdersRequest, opts ...http.CallOption) (rsp *ConsumerOrders, err error)
	GetConsumerOrdersWithSuborders(ctx context.Context, req *GetConsumerOrdersWithSubordersRequest, opts ...http.CallOption) (rsp *GetConsumerOrdersWithSubordersReply, err error)
	GetConsumerSubOrderDetail(ctx context.Context, req *GetConsumerSubOrderDetailRequest, opts ...http.CallOption) (rsp *Order, err error)
	GetShipOrderStatus(ctx context.Context, req *GetShipOrderStatusRequest, opts ...http.CallOption) (rsp *GetShipOrderStatusReply, err error)
	PlaceOrder(ctx context.Context, req *PlaceOrderRequest, opts ...http.CallOption) (rsp *PlaceOrderReply, err error)
}

type ConsumerOrderHTTPClientImpl struct {
	cc *http.Client
}

func NewConsumerOrderHTTPClient(client *http.Client) ConsumerOrderHTTPClient {
	return &ConsumerOrderHTTPClientImpl{client}
}

func (c *ConsumerOrderHTTPClientImpl) ConfirmReceived(ctx context.Context, in *ConfirmReceivedRequest, opts ...http.CallOption) (*ConfirmReceivedReply, error) {
	var out ConfirmReceivedReply
	pattern := "/v1/consumers/orders/{order_id}/receive"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConsumerOrderConfirmReceived))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConsumerOrderHTTPClientImpl) GetConsumerOrders(ctx context.Context, in *GetConsumerOrdersRequest, opts ...http.CallOption) (*ConsumerOrders, error) {
	var out ConsumerOrders
	pattern := "/v1/consumers/orders"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConsumerOrderGetConsumerOrders))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConsumerOrderHTTPClientImpl) GetConsumerOrdersWithSuborders(ctx context.Context, in *GetConsumerOrdersWithSubordersRequest, opts ...http.CallOption) (*GetConsumerOrdersWithSubordersReply, error) {
	var out GetConsumerOrdersWithSubordersReply
	pattern := "/v1/consumers/orders/{order_id}/suborders"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConsumerOrderGetConsumerOrdersWithSuborders))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConsumerOrderHTTPClientImpl) GetConsumerSubOrderDetail(ctx context.Context, in *GetConsumerSubOrderDetailRequest, opts ...http.CallOption) (*Order, error) {
	var out Order
	pattern := "/v1/consumers/orders/{sub_order_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConsumerOrderGetConsumerSubOrderDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConsumerOrderHTTPClientImpl) GetShipOrderStatus(ctx context.Context, in *GetShipOrderStatusRequest, opts ...http.CallOption) (*GetShipOrderStatusReply, error) {
	var out GetShipOrderStatusReply
	pattern := "/v1/consumers/orders/{sub_order_id}/ship/status"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConsumerOrderGetShipOrderStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConsumerOrderHTTPClientImpl) PlaceOrder(ctx context.Context, in *PlaceOrderRequest, opts ...http.CallOption) (*PlaceOrderReply, error) {
	var out PlaceOrderReply
	pattern := "/v1/consumers/orders"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConsumerOrderPlaceOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

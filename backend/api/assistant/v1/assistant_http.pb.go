// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.3
// - protoc             v5.29.3
// source: v1/assistant.proto

package assistantv1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAssistantServiceQuery = "/ecommerce.assistant.v1.AssistantService/Query"

type AssistantServiceHTTPServer interface {
	Query(context.Context, *QueryRequest) (*QueryReply, error)
}

func RegisterAssistantServiceHTTPServer(s *http.Server, srv AssistantServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/query/{question}", _AssistantService_Query0_HTTP_Handler(srv))
}

func _AssistantService_Query0_HTTP_Handler(srv AssistantServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QueryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAssistantServiceQuery)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Query(ctx, req.(*QueryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QueryReply)
		return ctx.Result(200, reply)
	}
}

type AssistantServiceHTTPClient interface {
	Query(ctx context.Context, req *QueryRequest, opts ...http.CallOption) (rsp *QueryReply, err error)
}

type AssistantServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewAssistantServiceHTTPClient(client *http.Client) AssistantServiceHTTPClient {
	return &AssistantServiceHTTPClientImpl{client}
}

func (c *AssistantServiceHTTPClientImpl) Query(ctx context.Context, in *QueryRequest, opts ...http.CallOption) (*QueryReply, error) {
	var out QueryReply
	pattern := "/v1/query/{question}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAssistantServiceQuery))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

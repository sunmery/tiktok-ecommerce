// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: v1/assistant.proto

package assistantv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Assistant_ProcessQuery_FullMethodName = "/ecommerce.assistant.v1.Assistant/ProcessQuery"
)

// AssistantClient is the client API for Assistant service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssistantClient interface {
	ProcessQuery(ctx context.Context, in *ProcessRequest, opts ...grpc.CallOption) (*ProcessResponse, error)
}

type assistantClient struct {
	cc grpc.ClientConnInterface
}

func NewAssistantClient(cc grpc.ClientConnInterface) AssistantClient {
	return &assistantClient{cc}
}

func (c *assistantClient) ProcessQuery(ctx context.Context, in *ProcessRequest, opts ...grpc.CallOption) (*ProcessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessResponse)
	err := c.cc.Invoke(ctx, Assistant_ProcessQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssistantServer is the server API for Assistant service.
// All implementations must embed UnimplementedAssistantServer
// for forward compatibility.
type AssistantServer interface {
	ProcessQuery(context.Context, *ProcessRequest) (*ProcessResponse, error)
	mustEmbedUnimplementedAssistantServer()
}

// UnimplementedAssistantServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAssistantServer struct{}

func (UnimplementedAssistantServer) ProcessQuery(context.Context, *ProcessRequest) (*ProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessQuery not implemented")
}
func (UnimplementedAssistantServer) mustEmbedUnimplementedAssistantServer() {}
func (UnimplementedAssistantServer) testEmbeddedByValue()                   {}

// UnsafeAssistantServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssistantServer will
// result in compilation errors.
type UnsafeAssistantServer interface {
	mustEmbedUnimplementedAssistantServer()
}

func RegisterAssistantServer(s grpc.ServiceRegistrar, srv AssistantServer) {
	// If the following call pancis, it indicates UnimplementedAssistantServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Assistant_ServiceDesc, srv)
}

func _Assistant_ProcessQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServer).ProcessQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assistant_ProcessQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServer).ProcessQuery(ctx, req.(*ProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Assistant_ServiceDesc is the grpc.ServiceDesc for Assistant service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Assistant_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ecommerce.assistant.v1.Assistant",
	HandlerType: (*AssistantServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessQuery",
			Handler:    _Assistant_ProcessQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/assistant.proto",
}

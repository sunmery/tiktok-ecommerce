syntax = "proto3"; // 指定使用 proto3 语法

package ecommerce.order.v1; // 定义包名，用于命名空间隔离

// 导入外部依赖
import "google/api/annotations.proto"; // 提供 HTTP 映射规则的支持
import "google/protobuf/timestamp.proto"; // 提供时间戳类型支持
import "validate/validate.proto"; // 提供字段验证规则支持
import "backend/api/cart/v1/cart.proto"; // 导入购物车相关的消息定义
import "backend/api/user/v1/user.proto"; // 导入用户相关的消息定义

// Go 语言生成代码的选项
option go_package = "backend/api/order/v1;orderv1";
// `go_package` 指定了生成的 Go 代码的包路径和别名：
// - "backend/api/order/v1" 是生成代码的完整路径
// - "orderv1" 是生成代码的包别名

// 订单服务接口定义
service OrderService {
  // 创建订单
  rpc PlaceOrder(PlaceOrderReq) returns (PlaceOrderResp) {
    option (google.api.http) = {
      post: "/v1/orders" // 定义 HTTP POST 请求路径
      body: "*"          // 表示请求体包含所有字段
    };
  }

  // 查询用户订单列表
  rpc GetConsumerOrders(GetConsumerOrdersReq) returns (Orders) {
    option (google.api.http) = {
      get: "/v1/orders"
    };
  }

  // 查询全部订单列表(管理员侧)
  rpc GetAllOrders(GetAllOrdersReq) returns (Orders) {
    option (google.api.http) = {
      get: "/v1/admin/orders"
    };
  }

  // 根据订单ID查询
  rpc GetOrder(GetOrderReq) returns (Order) {
    option (google.api.http) = {
      get: "/v1/orders/{id}"
    };
  }

  // 标记订单为已支付
  rpc MarkOrderPaid(MarkOrderPaidReq) returns (MarkOrderPaidResp) {
    option (google.api.http) = {
      post: "/v1/orders/{order_id}/paid" // 定义 HTTP POST 请求路径，路径参数为 order_id
      body: "*"                          // 表示请求体包含所有字段
    };
  }

  // 查询订单状态(支付状态和货运状态)
  rpc GetOrderStatus(GetOrderStatusReq) returns (GetOrderStatusResp) {
    option (google.api.http) = {
      get: "/v1/orders/{order_id}/status" // 定义 HTTP PUT 请求路径，路径参数为 order_id
    };
  }

  // 更新订单状态
  rpc UpdateOrderStatus(UpdateOrderStatusReq) returns (UpdateOrderStatusResp) {
    option (google.api.http) = {
      put: "/v1/orders/{order_id}/status" // 定义 HTTP PUT 请求路径，路径参数为 order_id
      body: "*"                         // 表示请求体包含所有字段
    };
  }

  // 商家发货
  rpc ShipOrder(ShipOrderReq) returns (ShipOrderResp) {
    option (google.api.http) = {
      put: "/v1/orders/{order_id}/ship" // 定义 HTTP PUT 请求路径，路径参数为 order_id
      body: "*"                         // 表示请求体包含所有字段
    };
  }

  // 用户确认收货
  rpc ConfirmReceived(ConfirmReceivedReq) returns (ConfirmReceivedResp) {
    option (google.api.http) = {
      put: "/v1/orders/{order_id}/receive" // 定义 HTTP PUT 请求路径，路径参数为 order_id
      body: "*"                            // 表示请求体包含所有字段
    };
  }
}

// 创建订单请求的消息结构
message PlaceOrderReq {
  string currency = 2 [(validate.rules).string.len = 3]; // 货币代码（如 USD、CNY），长度固定为 3
  user.v1.Address address = 3; // 用户地址信息 
  string email = 4; // 用户邮箱
  repeated OrderItem order_items = 5; // 订单项列表
}

// 订单项的消息结构
message OrderItem {
  cart.v1.CartItem item = 1; // 购物车中的商品项
  double cost = 2; // 商品单价
}

// 创建订单响应的消息结构
message OrderResult {
  int64 order_id = 1; // 订单 ID
}

// 创建订单响应的消息结构
message PlaceOrderResp {
  OrderResult order = 1; // 订单结果
}

// 支付状态的枚举类型
enum PaymentStatus {
  NOT_PAID = 0; // 未支付
  PROCESSING = 1; // 处理中
  PAID = 2; // 已支付
  FAILED = 3; // 支付失败
  CANCELLED_PAID = 4; // 取消支付
}

// 货运状态的枚举类型
enum ShippingStatus {
  PENDING_SHIPMENT = 0; //  待发货
  SHIPPED = 1; // 已发货
  IN_TRANSIT = 2; // 运输中
  DELIVERED = 3; // 已送达
  CONFIRMED = 4; // 已收货
  CANCELLED_SHIPMENT = 5; // 已取消发货
}

// 订单的消息结构
message Order {
  repeated OrderItem items = 1; // 订单项列表
  int64 order_id = 2; // 订单 ID
  string user_id = 3 [
    (validate.rules).string.len = 32, // 验证用户 ID 的长度为 32
    (validate.rules).string.uuid = true // 验证用户 ID 为 UUID 格式
  ];
  string currency = 4 [(validate.rules).string.len = 3]; // 货币代码（如 USD、CNY），长度固定为 3
  user.v1.Address address = 5; // 用户地址信息
  string email = 6; // 用户邮箱
  google.protobuf.Timestamp created_at = 7; // 订单创建时间
  PaymentStatus payment_status = 8; // 支付状态（NOT_PAID/PROCESSING/PAID/FAILED/CANCELLED）
  ShippingStatus shipping_status = 9; // 货运状态
}

message GetOrderReq {
  int64 id = 1; // 用户 ID
}

message GetConsumerOrdersReq {
  string user_id = 1; // 用户 ID
  uint32 page = 2; // 分页参数：当前页码，默认值为 0
  uint32 page_size = 3; // 分页参数：每页大小，默认值为 20，最大值为 100
}

// 查询订单列表请求的消息结构
message GetAllOrdersReq {
  uint32 page = 1; // 分页参数：当前页码，默认值为 0
  uint32 page_size = 2; // 分页参数：每页大小，默认值为 20，最大值为 100
}

// 查询订单列表响应的消息结构
message Orders {
  repeated Order orders = 1; // 订单列表
}


// 标记订单为已支付请求的消息结构
message MarkOrderPaidReq {
  //  string user_id = 1; // 用户 ID
  int64 order_id = 2; // 订单 ID
}

// 标记订单为已支付响应的消息结构
message MarkOrderPaidResp {}

// 查询订单状态请求的消息结构
message GetOrderStatusReq {
  int64 order_id = 1; // 订单 ID
}


// 更新订单状态请求的消息结构
message UpdateOrderStatusReq {
  int64 order_id = 1; // 订单 ID
  string status = 2; // 新的订单状态
}

// 更新订单状态响应的消息结构
message UpdateOrderStatusResp {}

// 查询订单状态响应的消息结构
message GetOrderStatusResp {
  int64 order_id = 1; // 主订单 ID
  int64 sub_order_id = 2; // 子订单 ID
  PaymentStatus payment_status = 3; // 支付状态
  ShippingStatus shipping_status = 4; // 货运状态
}

// 商家发货请求的消息结构
message ShipOrderReq {
  int64 order_id = 1; // 订单 ID
  string tracking_number = 2; // 物流单号
  string carrier = 3; // 承运商
  string estimated_delivery = 4; // 预计送达时间
}

// 商家发货响应的消息结构
message ShipOrderResp {}

// 用户确认收货请求的消息结构
message ConfirmReceivedReq {
  int64 order_id = 1; // 订单 ID
}

// 用户确认收货响应的消息结构
message ConfirmReceivedResp {}

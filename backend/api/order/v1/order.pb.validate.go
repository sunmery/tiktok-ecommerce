// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/order.proto

package orderv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _order_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on CreateOrderShippingReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrderShippingReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrderShippingReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrderShippingReqMultiError, or nil if none found.
func (m *CreateOrderShippingReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderShippingReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for SubOrderId

	// no validation rules for ShippingStatus

	// no validation rules for TrackingNumber

	// no validation rules for Carrier

	if all {
		switch v := interface{}(m.GetDelivery()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrderShippingReqValidationError{
					field:  "Delivery",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrderShippingReqValidationError{
					field:  "Delivery",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDelivery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrderShippingReqValidationError{
				field:  "Delivery",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShippingAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrderShippingReqValidationError{
					field:  "ShippingAddress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrderShippingReqValidationError{
					field:  "ShippingAddress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShippingAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrderShippingReqValidationError{
				field:  "ShippingAddress",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReceiverAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrderShippingReqValidationError{
					field:  "ReceiverAddress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrderShippingReqValidationError{
					field:  "ReceiverAddress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReceiverAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrderShippingReqValidationError{
				field:  "ReceiverAddress",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ShippingFe

	if m.MerchantId != nil {
		// no validation rules for MerchantId
	}

	if len(errors) > 0 {
		return CreateOrderShippingReqMultiError(errors)
	}

	return nil
}

// CreateOrderShippingReqMultiError is an error wrapping multiple validation
// errors returned by CreateOrderShippingReq.ValidateAll() if the designated
// constraints aren't met.
type CreateOrderShippingReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderShippingReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderShippingReqMultiError) AllErrors() []error { return m }

// CreateOrderShippingReqValidationError is the validation error returned by
// CreateOrderShippingReq.Validate if the designated constraints aren't met.
type CreateOrderShippingReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderShippingReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderShippingReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderShippingReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderShippingReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderShippingReqValidationError) ErrorName() string {
	return "CreateOrderShippingReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrderShippingReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderShippingReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderShippingReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderShippingReqValidationError{}

// Validate checks the field values on CreateOrderShippingResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrderShippingResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrderShippingResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrderShippingRespMultiError, or nil if none found.
func (m *CreateOrderShippingResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderShippingResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateOrderShippingRespMultiError(errors)
	}

	return nil
}

// CreateOrderShippingRespMultiError is an error wrapping multiple validation
// errors returned by CreateOrderShippingResp.ValidateAll() if the designated
// constraints aren't met.
type CreateOrderShippingRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderShippingRespMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderShippingRespMultiError) AllErrors() []error { return m }

// CreateOrderShippingRespValidationError is the validation error returned by
// CreateOrderShippingResp.Validate if the designated constraints aren't met.
type CreateOrderShippingRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderShippingRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderShippingRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderShippingRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderShippingRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderShippingRespValidationError) ErrorName() string {
	return "CreateOrderShippingRespValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrderShippingRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderShippingResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderShippingRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderShippingRespValidationError{}

// Validate checks the field values on GetShipOrderStatusReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetShipOrderStatusReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShipOrderStatusReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetShipOrderStatusReqMultiError, or nil if none found.
func (m *GetShipOrderStatusReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShipOrderStatusReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SubOrderId

	if len(errors) > 0 {
		return GetShipOrderStatusReqMultiError(errors)
	}

	return nil
}

// GetShipOrderStatusReqMultiError is an error wrapping multiple validation
// errors returned by GetShipOrderStatusReq.ValidateAll() if the designated
// constraints aren't met.
type GetShipOrderStatusReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShipOrderStatusReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShipOrderStatusReqMultiError) AllErrors() []error { return m }

// GetShipOrderStatusReqValidationError is the validation error returned by
// GetShipOrderStatusReq.Validate if the designated constraints aren't met.
type GetShipOrderStatusReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShipOrderStatusReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShipOrderStatusReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShipOrderStatusReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShipOrderStatusReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShipOrderStatusReqValidationError) ErrorName() string {
	return "GetShipOrderStatusReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetShipOrderStatusReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShipOrderStatusReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShipOrderStatusReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShipOrderStatusReqValidationError{}

// Validate checks the field values on GetShipOrderStatusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetShipOrderStatusReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShipOrderStatusReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetShipOrderStatusReplyMultiError, or nil if none found.
func (m *GetShipOrderStatusReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShipOrderStatusReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	// no validation rules for SubOrderId

	// no validation rules for PaymentStatus

	// no validation rules for ShippingStatus

	if all {
		switch v := interface{}(m.GetReceiverAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetShipOrderStatusReplyValidationError{
					field:  "ReceiverAddress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetShipOrderStatusReplyValidationError{
					field:  "ReceiverAddress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReceiverAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetShipOrderStatusReplyValidationError{
				field:  "ReceiverAddress",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShippingAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetShipOrderStatusReplyValidationError{
					field:  "ShippingAddress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetShipOrderStatusReplyValidationError{
					field:  "ShippingAddress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShippingAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetShipOrderStatusReplyValidationError{
				field:  "ShippingAddress",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TrackingNumber

	// no validation rules for Carrier

	if len(errors) > 0 {
		return GetShipOrderStatusReplyMultiError(errors)
	}

	return nil
}

// GetShipOrderStatusReplyMultiError is an error wrapping multiple validation
// errors returned by GetShipOrderStatusReply.ValidateAll() if the designated
// constraints aren't met.
type GetShipOrderStatusReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShipOrderStatusReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShipOrderStatusReplyMultiError) AllErrors() []error { return m }

// GetShipOrderStatusReplyValidationError is the validation error returned by
// GetShipOrderStatusReply.Validate if the designated constraints aren't met.
type GetShipOrderStatusReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShipOrderStatusReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShipOrderStatusReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShipOrderStatusReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShipOrderStatusReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShipOrderStatusReplyValidationError) ErrorName() string {
	return "GetShipOrderStatusReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetShipOrderStatusReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShipOrderStatusReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShipOrderStatusReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShipOrderStatusReplyValidationError{}

// Validate checks the field values on PlaceOrderReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PlaceOrderReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlaceOrderReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PlaceOrderReqMultiError, or
// nil if none found.
func (m *PlaceOrderReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PlaceOrderReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCurrency()) != 3 {
		err := PlaceOrderReqValidationError{
			field:  "Currency",
			reason: "value length must be 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlaceOrderReqValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlaceOrderReqValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlaceOrderReqValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Email

	for idx, item := range m.GetOrderItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlaceOrderReqValidationError{
						field:  fmt.Sprintf("OrderItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlaceOrderReqValidationError{
						field:  fmt.Sprintf("OrderItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlaceOrderReqValidationError{
					field:  fmt.Sprintf("OrderItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PlaceOrderReqMultiError(errors)
	}

	return nil
}

// PlaceOrderReqMultiError is an error wrapping multiple validation errors
// returned by PlaceOrderReq.ValidateAll() if the designated constraints
// aren't met.
type PlaceOrderReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlaceOrderReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlaceOrderReqMultiError) AllErrors() []error { return m }

// PlaceOrderReqValidationError is the validation error returned by
// PlaceOrderReq.Validate if the designated constraints aren't met.
type PlaceOrderReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlaceOrderReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlaceOrderReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlaceOrderReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlaceOrderReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlaceOrderReqValidationError) ErrorName() string { return "PlaceOrderReqValidationError" }

// Error satisfies the builtin error interface
func (e PlaceOrderReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlaceOrderReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlaceOrderReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlaceOrderReqValidationError{}

// Validate checks the field values on OrderItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderItemMultiError, or nil
// if none found.
func (m *OrderItem) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderItemValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderItemValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderItemValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Cost

	if len(errors) > 0 {
		return OrderItemMultiError(errors)
	}

	return nil
}

// OrderItemMultiError is an error wrapping multiple validation errors returned
// by OrderItem.ValidateAll() if the designated constraints aren't met.
type OrderItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderItemMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderItemMultiError) AllErrors() []error { return m }

// OrderItemValidationError is the validation error returned by
// OrderItem.Validate if the designated constraints aren't met.
type OrderItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderItemValidationError) ErrorName() string { return "OrderItemValidationError" }

// Error satisfies the builtin error interface
func (e OrderItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderItemValidationError{}

// Validate checks the field values on OrderResult with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderResult with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderResultMultiError, or
// nil if none found.
func (m *OrderResult) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	if len(errors) > 0 {
		return OrderResultMultiError(errors)
	}

	return nil
}

// OrderResultMultiError is an error wrapping multiple validation errors
// returned by OrderResult.ValidateAll() if the designated constraints aren't met.
type OrderResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderResultMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderResultMultiError) AllErrors() []error { return m }

// OrderResultValidationError is the validation error returned by
// OrderResult.Validate if the designated constraints aren't met.
type OrderResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderResultValidationError) ErrorName() string { return "OrderResultValidationError" }

// Error satisfies the builtin error interface
func (e OrderResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderResultValidationError{}

// Validate checks the field values on PlaceOrderResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PlaceOrderResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlaceOrderResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PlaceOrderRespMultiError,
// or nil if none found.
func (m *PlaceOrderResp) ValidateAll() error {
	return m.validate(true)
}

func (m *PlaceOrderResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrder()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlaceOrderRespValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlaceOrderRespValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrder()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlaceOrderRespValidationError{
				field:  "Order",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PlaceOrderRespMultiError(errors)
	}

	return nil
}

// PlaceOrderRespMultiError is an error wrapping multiple validation errors
// returned by PlaceOrderResp.ValidateAll() if the designated constraints
// aren't met.
type PlaceOrderRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlaceOrderRespMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlaceOrderRespMultiError) AllErrors() []error { return m }

// PlaceOrderRespValidationError is the validation error returned by
// PlaceOrderResp.Validate if the designated constraints aren't met.
type PlaceOrderRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlaceOrderRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlaceOrderRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlaceOrderRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlaceOrderRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlaceOrderRespValidationError) ErrorName() string { return "PlaceOrderRespValidationError" }

// Error satisfies the builtin error interface
func (e PlaceOrderRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlaceOrderResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlaceOrderRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlaceOrderRespValidationError{}

// Validate checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Order) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OrderMultiError, or nil if none found.
func (m *Order) ValidateAll() error {
	return m.validate(true)
}

func (m *Order) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrderValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrderValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrderValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for OrderId

	if utf8.RuneCountInString(m.GetUserId()) != 32 {
		err := OrderValidationError{
			field:  "UserId",
			reason: "value length must be 32 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = OrderValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCurrency()) != 3 {
		err := OrderValidationError{
			field:  "Currency",
			reason: "value length must be 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Email

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PaymentStatus

	// no validation rules for ShippingStatus

	if m.SubOrderId != nil {
		// no validation rules for SubOrderId
	}

	if len(errors) > 0 {
		return OrderMultiError(errors)
	}

	return nil
}

func (m *Order) _validateUuid(uuid string) error {
	if matched := _order_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// OrderMultiError is an error wrapping multiple validation errors returned by
// Order.ValidateAll() if the designated constraints aren't met.
type OrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderMultiError) AllErrors() []error { return m }

// OrderValidationError is the validation error returned by Order.Validate if
// the designated constraints aren't met.
type OrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderValidationError) ErrorName() string { return "OrderValidationError" }

// Error satisfies the builtin error interface
func (e OrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderValidationError{}

// Validate checks the field values on GetOrderReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetOrderReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetOrderReqMultiError, or
// nil if none found.
func (m *GetOrderReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetOrderReqMultiError(errors)
	}

	return nil
}

// GetOrderReqMultiError is an error wrapping multiple validation errors
// returned by GetOrderReq.ValidateAll() if the designated constraints aren't met.
type GetOrderReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderReqMultiError) AllErrors() []error { return m }

// GetOrderReqValidationError is the validation error returned by
// GetOrderReq.Validate if the designated constraints aren't met.
type GetOrderReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderReqValidationError) ErrorName() string { return "GetOrderReqValidationError" }

// Error satisfies the builtin error interface
func (e GetOrderReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderReqValidationError{}

// Validate checks the field values on GetOrdersReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetOrdersReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrdersReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetOrdersReqMultiError, or
// nil if none found.
func (m *GetOrdersReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrdersReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetOrdersReqMultiError(errors)
	}

	return nil
}

// GetOrdersReqMultiError is an error wrapping multiple validation errors
// returned by GetOrdersReq.ValidateAll() if the designated constraints aren't met.
type GetOrdersReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrdersReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrdersReqMultiError) AllErrors() []error { return m }

// GetOrdersReqValidationError is the validation error returned by
// GetOrdersReq.Validate if the designated constraints aren't met.
type GetOrdersReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrdersReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrdersReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrdersReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrdersReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrdersReqValidationError) ErrorName() string { return "GetOrdersReqValidationError" }

// Error satisfies the builtin error interface
func (e GetOrdersReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrdersReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrdersReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrdersReqValidationError{}

// Validate checks the field values on GetMerchantOrdersReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMerchantOrdersReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMerchantOrdersReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMerchantOrdersReqMultiError, or nil if none found.
func (m *GetMerchantOrdersReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMerchantOrdersReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MerchantId

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetMerchantOrdersReqMultiError(errors)
	}

	return nil
}

// GetMerchantOrdersReqMultiError is an error wrapping multiple validation
// errors returned by GetMerchantOrdersReq.ValidateAll() if the designated
// constraints aren't met.
type GetMerchantOrdersReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMerchantOrdersReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMerchantOrdersReqMultiError) AllErrors() []error { return m }

// GetMerchantOrdersReqValidationError is the validation error returned by
// GetMerchantOrdersReq.Validate if the designated constraints aren't met.
type GetMerchantOrdersReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMerchantOrdersReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMerchantOrdersReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMerchantOrdersReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMerchantOrdersReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMerchantOrdersReqValidationError) ErrorName() string {
	return "GetMerchantOrdersReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetMerchantOrdersReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMerchantOrdersReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMerchantOrdersReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMerchantOrdersReqValidationError{}

// Validate checks the field values on GetAllOrdersReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAllOrdersReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllOrdersReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllOrdersReqMultiError, or nil if none found.
func (m *GetAllOrdersReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllOrdersReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetAllOrdersReqMultiError(errors)
	}

	return nil
}

// GetAllOrdersReqMultiError is an error wrapping multiple validation errors
// returned by GetAllOrdersReq.ValidateAll() if the designated constraints
// aren't met.
type GetAllOrdersReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllOrdersReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllOrdersReqMultiError) AllErrors() []error { return m }

// GetAllOrdersReqValidationError is the validation error returned by
// GetAllOrdersReq.Validate if the designated constraints aren't met.
type GetAllOrdersReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllOrdersReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllOrdersReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllOrdersReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllOrdersReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllOrdersReqValidationError) ErrorName() string { return "GetAllOrdersReqValidationError" }

// Error satisfies the builtin error interface
func (e GetAllOrdersReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllOrdersReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllOrdersReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllOrdersReqValidationError{}

// Validate checks the field values on Orders with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Orders) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Orders with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OrdersMultiError, or nil if none found.
func (m *Orders) ValidateAll() error {
	return m.validate(true)
}

func (m *Orders) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrdersValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrdersValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrdersValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OrdersMultiError(errors)
	}

	return nil
}

// OrdersMultiError is an error wrapping multiple validation errors returned by
// Orders.ValidateAll() if the designated constraints aren't met.
type OrdersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrdersMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrdersMultiError) AllErrors() []error { return m }

// OrdersValidationError is the validation error returned by Orders.Validate if
// the designated constraints aren't met.
type OrdersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrdersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrdersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrdersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrdersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrdersValidationError) ErrorName() string { return "OrdersValidationError" }

// Error satisfies the builtin error interface
func (e OrdersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrders.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrdersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrdersValidationError{}

// Validate checks the field values on MarkOrderPaidReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MarkOrderPaidReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MarkOrderPaidReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MarkOrderPaidReqMultiError, or nil if none found.
func (m *MarkOrderPaidReq) ValidateAll() error {
	return m.validate(true)
}

func (m *MarkOrderPaidReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	if len(errors) > 0 {
		return MarkOrderPaidReqMultiError(errors)
	}

	return nil
}

// MarkOrderPaidReqMultiError is an error wrapping multiple validation errors
// returned by MarkOrderPaidReq.ValidateAll() if the designated constraints
// aren't met.
type MarkOrderPaidReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MarkOrderPaidReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MarkOrderPaidReqMultiError) AllErrors() []error { return m }

// MarkOrderPaidReqValidationError is the validation error returned by
// MarkOrderPaidReq.Validate if the designated constraints aren't met.
type MarkOrderPaidReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MarkOrderPaidReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MarkOrderPaidReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MarkOrderPaidReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MarkOrderPaidReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MarkOrderPaidReqValidationError) ErrorName() string { return "MarkOrderPaidReqValidationError" }

// Error satisfies the builtin error interface
func (e MarkOrderPaidReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMarkOrderPaidReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MarkOrderPaidReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MarkOrderPaidReqValidationError{}

// Validate checks the field values on MarkOrderPaidResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MarkOrderPaidResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MarkOrderPaidResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MarkOrderPaidRespMultiError, or nil if none found.
func (m *MarkOrderPaidResp) ValidateAll() error {
	return m.validate(true)
}

func (m *MarkOrderPaidResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MarkOrderPaidRespMultiError(errors)
	}

	return nil
}

// MarkOrderPaidRespMultiError is an error wrapping multiple validation errors
// returned by MarkOrderPaidResp.ValidateAll() if the designated constraints
// aren't met.
type MarkOrderPaidRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MarkOrderPaidRespMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MarkOrderPaidRespMultiError) AllErrors() []error { return m }

// MarkOrderPaidRespValidationError is the validation error returned by
// MarkOrderPaidResp.Validate if the designated constraints aren't met.
type MarkOrderPaidRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MarkOrderPaidRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MarkOrderPaidRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MarkOrderPaidRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MarkOrderPaidRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MarkOrderPaidRespValidationError) ErrorName() string {
	return "MarkOrderPaidRespValidationError"
}

// Error satisfies the builtin error interface
func (e MarkOrderPaidRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMarkOrderPaidResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MarkOrderPaidRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MarkOrderPaidRespValidationError{}

// Validate checks the field values on UpdateOrderStatusReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrderStatusReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrderStatusReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrderStatusReqMultiError, or nil if none found.
func (m *UpdateOrderStatusReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrderStatusReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateOrderStatusReqMultiError(errors)
	}

	return nil
}

// UpdateOrderStatusReqMultiError is an error wrapping multiple validation
// errors returned by UpdateOrderStatusReq.ValidateAll() if the designated
// constraints aren't met.
type UpdateOrderStatusReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrderStatusReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrderStatusReqMultiError) AllErrors() []error { return m }

// UpdateOrderStatusReqValidationError is the validation error returned by
// UpdateOrderStatusReq.Validate if the designated constraints aren't met.
type UpdateOrderStatusReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrderStatusReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrderStatusReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrderStatusReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrderStatusReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrderStatusReqValidationError) ErrorName() string {
	return "UpdateOrderStatusReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrderStatusReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrderStatusReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrderStatusReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrderStatusReqValidationError{}

// Validate checks the field values on UpdateOrderStatusResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrderStatusResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrderStatusResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrderStatusRespMultiError, or nil if none found.
func (m *UpdateOrderStatusResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrderStatusResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateOrderStatusRespMultiError(errors)
	}

	return nil
}

// UpdateOrderStatusRespMultiError is an error wrapping multiple validation
// errors returned by UpdateOrderStatusResp.ValidateAll() if the designated
// constraints aren't met.
type UpdateOrderStatusRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrderStatusRespMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrderStatusRespMultiError) AllErrors() []error { return m }

// UpdateOrderStatusRespValidationError is the validation error returned by
// UpdateOrderStatusResp.Validate if the designated constraints aren't met.
type UpdateOrderStatusRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrderStatusRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrderStatusRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrderStatusRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrderStatusRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrderStatusRespValidationError) ErrorName() string {
	return "UpdateOrderStatusRespValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrderStatusRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrderStatusResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrderStatusRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrderStatusRespValidationError{}

// Validate checks the field values on ConfirmReceivedReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfirmReceivedReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfirmReceivedReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfirmReceivedReqMultiError, or nil if none found.
func (m *ConfirmReceivedReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfirmReceivedReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	if len(errors) > 0 {
		return ConfirmReceivedReqMultiError(errors)
	}

	return nil
}

// ConfirmReceivedReqMultiError is an error wrapping multiple validation errors
// returned by ConfirmReceivedReq.ValidateAll() if the designated constraints
// aren't met.
type ConfirmReceivedReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfirmReceivedReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfirmReceivedReqMultiError) AllErrors() []error { return m }

// ConfirmReceivedReqValidationError is the validation error returned by
// ConfirmReceivedReq.Validate if the designated constraints aren't met.
type ConfirmReceivedReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmReceivedReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmReceivedReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmReceivedReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmReceivedReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmReceivedReqValidationError) ErrorName() string {
	return "ConfirmReceivedReqValidationError"
}

// Error satisfies the builtin error interface
func (e ConfirmReceivedReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmReceivedReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmReceivedReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmReceivedReqValidationError{}

// Validate checks the field values on ConfirmReceivedResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfirmReceivedResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfirmReceivedResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfirmReceivedRespMultiError, or nil if none found.
func (m *ConfirmReceivedResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfirmReceivedResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ConfirmReceivedRespMultiError(errors)
	}

	return nil
}

// ConfirmReceivedRespMultiError is an error wrapping multiple validation
// errors returned by ConfirmReceivedResp.ValidateAll() if the designated
// constraints aren't met.
type ConfirmReceivedRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfirmReceivedRespMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfirmReceivedRespMultiError) AllErrors() []error { return m }

// ConfirmReceivedRespValidationError is the validation error returned by
// ConfirmReceivedResp.Validate if the designated constraints aren't met.
type ConfirmReceivedRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmReceivedRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmReceivedRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmReceivedRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmReceivedRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmReceivedRespValidationError) ErrorName() string {
	return "ConfirmReceivedRespValidationError"
}

// Error satisfies the builtin error interface
func (e ConfirmReceivedRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmReceivedResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmReceivedRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmReceivedRespValidationError{}

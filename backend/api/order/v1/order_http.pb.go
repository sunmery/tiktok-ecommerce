// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: v1/order.proto

package orderv1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationOrderServiceMarkOrderPaid = "/ecommerce.order.v1.OrderService/MarkOrderPaid"

type OrderServiceHTTPServer interface {
	// MarkOrderPaid 标记订单为已支付
	MarkOrderPaid(context.Context, *MarkOrderPaidReq) (*MarkOrderPaidResp, error)
}

func RegisterOrderServiceHTTPServer(s *http.Server, srv OrderServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/orders/{order_id}/paid", _OrderService_MarkOrderPaid0_HTTP_Handler(srv))
}

func _OrderService_MarkOrderPaid0_HTTP_Handler(srv OrderServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MarkOrderPaidReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderServiceMarkOrderPaid)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MarkOrderPaid(ctx, req.(*MarkOrderPaidReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MarkOrderPaidResp)
		return ctx.Result(200, reply)
	}
}

type OrderServiceHTTPClient interface {
	MarkOrderPaid(ctx context.Context, req *MarkOrderPaidReq, opts ...http.CallOption) (rsp *MarkOrderPaidResp, err error)
}

type OrderServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewOrderServiceHTTPClient(client *http.Client) OrderServiceHTTPClient {
	return &OrderServiceHTTPClientImpl{client}
}

func (c *OrderServiceHTTPClientImpl) MarkOrderPaid(ctx context.Context, in *MarkOrderPaidReq, opts ...http.CallOption) (*MarkOrderPaidResp, error) {
	var out MarkOrderPaidResp
	pattern := "/v1/orders/{order_id}/paid"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrderServiceMarkOrderPaid))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

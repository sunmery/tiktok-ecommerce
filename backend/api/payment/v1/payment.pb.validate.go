// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/payment.proto

package paymentv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreatePaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePaymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePaymentRequestMultiError, or nil if none found.
func (m *CreatePaymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	// no validation rules for ConsumerId

	// no validation rules for Amount

	// no validation rules for Currency

	// no validation rules for Subject

	// no validation rules for ReturnUrl

	// no validation rules for FreezeId

	// no validation rules for ConsumerVersion

	// no validation rules for MerchantVersion

	if len(errors) > 0 {
		return CreatePaymentRequestMultiError(errors)
	}

	return nil
}

// CreatePaymentRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePaymentRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePaymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentRequestMultiError) AllErrors() []error { return m }

// CreatePaymentRequestValidationError is the validation error returned by
// CreatePaymentRequest.Validate if the designated constraints aren't met.
type CreatePaymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentRequestValidationError) ErrorName() string {
	return "CreatePaymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentRequestValidationError{}

// Validate checks the field values on CreatePaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePaymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePaymentResponseMultiError, or nil if none found.
func (m *CreatePaymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PaymentId

	// no validation rules for PayUrl

	if len(errors) > 0 {
		return CreatePaymentResponseMultiError(errors)
	}

	return nil
}

// CreatePaymentResponseMultiError is an error wrapping multiple validation
// errors returned by CreatePaymentResponse.ValidateAll() if the designated
// constraints aren't met.
type CreatePaymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentResponseMultiError) AllErrors() []error { return m }

// CreatePaymentResponseValidationError is the validation error returned by
// CreatePaymentResponse.Validate if the designated constraints aren't met.
type CreatePaymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentResponseValidationError) ErrorName() string {
	return "CreatePaymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentResponseValidationError{}

// Validate checks the field values on GetPaymentStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPaymentStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaymentStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPaymentStatusRequestMultiError, or nil if none found.
func (m *GetPaymentStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PaymentId

	if len(errors) > 0 {
		return GetPaymentStatusRequestMultiError(errors)
	}

	return nil
}

// GetPaymentStatusRequestMultiError is an error wrapping multiple validation
// errors returned by GetPaymentStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPaymentStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentStatusRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentStatusRequestMultiError) AllErrors() []error { return m }

// GetPaymentStatusRequestValidationError is the validation error returned by
// GetPaymentStatusRequest.Validate if the designated constraints aren't met.
type GetPaymentStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentStatusRequestValidationError) ErrorName() string {
	return "GetPaymentStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentStatusRequestValidationError{}

// Validate checks the field values on GetPaymentStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPaymentStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaymentStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPaymentStatusResponseMultiError, or nil if none found.
func (m *GetPaymentStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PaymentId

	// no validation rules for OrderId

	// no validation rules for Status

	// no validation rules for TradeNo

	if len(errors) > 0 {
		return GetPaymentStatusResponseMultiError(errors)
	}

	return nil
}

// GetPaymentStatusResponseMultiError is an error wrapping multiple validation
// errors returned by GetPaymentStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPaymentStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentStatusResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentStatusResponseMultiError) AllErrors() []error { return m }

// GetPaymentStatusResponseValidationError is the validation error returned by
// GetPaymentStatusResponse.Validate if the designated constraints aren't met.
type GetPaymentStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentStatusResponseValidationError) ErrorName() string {
	return "GetPaymentStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentStatusResponseValidationError{}

// Validate checks the field values on KeyValue with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *KeyValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KeyValue with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in KeyValueMultiError, or nil
// if none found.
func (m *KeyValue) ValidateAll() error {
	return m.validate(true)
}

func (m *KeyValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	if len(errors) > 0 {
		return KeyValueMultiError(errors)
	}

	return nil
}

// KeyValueMultiError is an error wrapping multiple validation errors returned
// by KeyValue.ValidateAll() if the designated constraints aren't met.
type KeyValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KeyValueMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KeyValueMultiError) AllErrors() []error { return m }

// KeyValueValidationError is the validation error returned by
// KeyValue.Validate if the designated constraints aren't met.
type KeyValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KeyValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KeyValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KeyValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KeyValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KeyValueValidationError) ErrorName() string { return "KeyValueValidationError" }

// Error satisfies the builtin error interface
func (e KeyValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKeyValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KeyValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KeyValueValidationError{}

// Validate checks the field values on UrlValues with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UrlValues) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UrlValues with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UrlValuesMultiError, or nil
// if none found.
func (m *UrlValues) ValidateAll() error {
	return m.validate(true)
}

func (m *UrlValues) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPairs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UrlValuesValidationError{
						field:  fmt.Sprintf("Pairs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UrlValuesValidationError{
						field:  fmt.Sprintf("Pairs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UrlValuesValidationError{
					field:  fmt.Sprintf("Pairs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UrlValuesMultiError(errors)
	}

	return nil
}

// UrlValuesMultiError is an error wrapping multiple validation errors returned
// by UrlValues.ValidateAll() if the designated constraints aren't met.
type UrlValuesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UrlValuesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UrlValuesMultiError) AllErrors() []error { return m }

// UrlValuesValidationError is the validation error returned by
// UrlValues.Validate if the designated constraints aren't met.
type UrlValuesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UrlValuesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UrlValuesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UrlValuesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UrlValuesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UrlValuesValidationError) ErrorName() string { return "UrlValuesValidationError" }

// Error satisfies the builtin error interface
func (e UrlValuesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUrlValues.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UrlValuesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UrlValuesValidationError{}

// Validate checks the field values on HandlePaymentNotifyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HandlePaymentNotifyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HandlePaymentNotifyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HandlePaymentNotifyResponseMultiError, or nil if none found.
func (m *HandlePaymentNotifyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *HandlePaymentNotifyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return HandlePaymentNotifyResponseMultiError(errors)
	}

	return nil
}

// HandlePaymentNotifyResponseMultiError is an error wrapping multiple
// validation errors returned by HandlePaymentNotifyResponse.ValidateAll() if
// the designated constraints aren't met.
type HandlePaymentNotifyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HandlePaymentNotifyResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HandlePaymentNotifyResponseMultiError) AllErrors() []error { return m }

// HandlePaymentNotifyResponseValidationError is the validation error returned
// by HandlePaymentNotifyResponse.Validate if the designated constraints
// aren't met.
type HandlePaymentNotifyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HandlePaymentNotifyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HandlePaymentNotifyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HandlePaymentNotifyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HandlePaymentNotifyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HandlePaymentNotifyResponseValidationError) ErrorName() string {
	return "HandlePaymentNotifyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e HandlePaymentNotifyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHandlePaymentNotifyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HandlePaymentNotifyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HandlePaymentNotifyResponseValidationError{}

// Validate checks the field values on HandlePaymentCallbackRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HandlePaymentCallbackRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HandlePaymentCallbackRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HandlePaymentCallbackRequestMultiError, or nil if none found.
func (m *HandlePaymentCallbackRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HandlePaymentCallbackRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OutTradeNo

	// no validation rules for TradeNo

	// no validation rules for TotalAmount

	// no validation rules for Subject

	// no validation rules for TradeStatus

	// no validation rules for Charset

	// no validation rules for Method

	// no validation rules for Sign

	// no validation rules for SignType

	// no validation rules for AppId

	// no validation rules for AuthAppId

	// no validation rules for Version

	// no validation rules for SellerId

	// no validation rules for Timestamp

	// no validation rules for Params

	if len(errors) > 0 {
		return HandlePaymentCallbackRequestMultiError(errors)
	}

	return nil
}

// HandlePaymentCallbackRequestMultiError is an error wrapping multiple
// validation errors returned by HandlePaymentCallbackRequest.ValidateAll() if
// the designated constraints aren't met.
type HandlePaymentCallbackRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HandlePaymentCallbackRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HandlePaymentCallbackRequestMultiError) AllErrors() []error { return m }

// HandlePaymentCallbackRequestValidationError is the validation error returned
// by HandlePaymentCallbackRequest.Validate if the designated constraints
// aren't met.
type HandlePaymentCallbackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HandlePaymentCallbackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HandlePaymentCallbackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HandlePaymentCallbackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HandlePaymentCallbackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HandlePaymentCallbackRequestValidationError) ErrorName() string {
	return "HandlePaymentCallbackRequestValidationError"
}

// Error satisfies the builtin error interface
func (e HandlePaymentCallbackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHandlePaymentCallbackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HandlePaymentCallbackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HandlePaymentCallbackRequestValidationError{}

// Validate checks the field values on HandlePaymentCallbackResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HandlePaymentCallbackResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HandlePaymentCallbackResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// HandlePaymentCallbackResponseMultiError, or nil if none found.
func (m *HandlePaymentCallbackResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *HandlePaymentCallbackResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return HandlePaymentCallbackResponseMultiError(errors)
	}

	return nil
}

// HandlePaymentCallbackResponseMultiError is an error wrapping multiple
// validation errors returned by HandlePaymentCallbackResponse.ValidateAll()
// if the designated constraints aren't met.
type HandlePaymentCallbackResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HandlePaymentCallbackResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HandlePaymentCallbackResponseMultiError) AllErrors() []error { return m }

// HandlePaymentCallbackResponseValidationError is the validation error
// returned by HandlePaymentCallbackResponse.Validate if the designated
// constraints aren't met.
type HandlePaymentCallbackResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HandlePaymentCallbackResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HandlePaymentCallbackResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HandlePaymentCallbackResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HandlePaymentCallbackResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HandlePaymentCallbackResponseValidationError) ErrorName() string {
	return "HandlePaymentCallbackResponseValidationError"
}

// Error satisfies the builtin error interface
func (e HandlePaymentCallbackResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHandlePaymentCallbackResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HandlePaymentCallbackResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HandlePaymentCallbackResponseValidationError{}

// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/payment.proto

package paymentv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on StringList with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StringList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StringList with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StringListMultiError, or
// nil if none found.
func (m *StringList) ValidateAll() error {
	return m.validate(true)
}

func (m *StringList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StringListMultiError(errors)
	}

	return nil
}

// StringListMultiError is an error wrapping multiple validation errors
// returned by StringList.ValidateAll() if the designated constraints aren't met.
type StringListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StringListMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StringListMultiError) AllErrors() []error { return m }

// StringListValidationError is the validation error returned by
// StringList.Validate if the designated constraints aren't met.
type StringListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StringListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StringListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StringListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StringListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StringListValidationError) ErrorName() string { return "StringListValidationError" }

// Error satisfies the builtin error interface
func (e StringListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStringList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StringListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StringListValidationError{}

// Validate checks the field values on PaymentNotifyReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PaymentNotifyReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentNotifyReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PaymentNotifyReqMultiError, or nil if none found.
func (m *PaymentNotifyReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentNotifyReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetValues()))
		i := 0
		for key := range m.GetValues() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetValues()[key]
			_ = val

			// no validation rules for Values[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, PaymentNotifyReqValidationError{
							field:  fmt.Sprintf("Values[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, PaymentNotifyReqValidationError{
							field:  fmt.Sprintf("Values[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return PaymentNotifyReqValidationError{
						field:  fmt.Sprintf("Values[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return PaymentNotifyReqMultiError(errors)
	}

	return nil
}

// PaymentNotifyReqMultiError is an error wrapping multiple validation errors
// returned by PaymentNotifyReq.ValidateAll() if the designated constraints
// aren't met.
type PaymentNotifyReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentNotifyReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentNotifyReqMultiError) AllErrors() []error { return m }

// PaymentNotifyReqValidationError is the validation error returned by
// PaymentNotifyReq.Validate if the designated constraints aren't met.
type PaymentNotifyReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentNotifyReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentNotifyReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentNotifyReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentNotifyReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentNotifyReqValidationError) ErrorName() string { return "PaymentNotifyReqValidationError" }

// Error satisfies the builtin error interface
func (e PaymentNotifyReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentNotifyReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentNotifyReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentNotifyReqValidationError{}

// Validate checks the field values on PaymentNotifyResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PaymentNotifyResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentNotifyResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PaymentNotifyRespMultiError, or nil if none found.
func (m *PaymentNotifyResp) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentNotifyResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return PaymentNotifyRespMultiError(errors)
	}

	return nil
}

// PaymentNotifyRespMultiError is an error wrapping multiple validation errors
// returned by PaymentNotifyResp.ValidateAll() if the designated constraints
// aren't met.
type PaymentNotifyRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentNotifyRespMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentNotifyRespMultiError) AllErrors() []error { return m }

// PaymentNotifyRespValidationError is the validation error returned by
// PaymentNotifyResp.Validate if the designated constraints aren't met.
type PaymentNotifyRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentNotifyRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentNotifyRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentNotifyRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentNotifyRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentNotifyRespValidationError) ErrorName() string {
	return "PaymentNotifyRespValidationError"
}

// Error satisfies the builtin error interface
func (e PaymentNotifyRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentNotifyResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentNotifyRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentNotifyRespValidationError{}

// Validate checks the field values on CreatePaymentReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreatePaymentReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePaymentReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePaymentReqMultiError, or nil if none found.
func (m *CreatePaymentReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	// no validation rules for Currency

	// no validation rules for Amount

	// no validation rules for PaymentMethod

	// no validation rules for Subject

	// no validation rules for TimeExpire

	if len(errors) > 0 {
		return CreatePaymentReqMultiError(errors)
	}

	return nil
}

// CreatePaymentReqMultiError is an error wrapping multiple validation errors
// returned by CreatePaymentReq.ValidateAll() if the designated constraints
// aren't met.
type CreatePaymentReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentReqMultiError) AllErrors() []error { return m }

// CreatePaymentReqValidationError is the validation error returned by
// CreatePaymentReq.Validate if the designated constraints aren't met.
type CreatePaymentReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentReqValidationError) ErrorName() string { return "CreatePaymentReqValidationError" }

// Error satisfies the builtin error interface
func (e CreatePaymentReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentReqValidationError{}

// Validate checks the field values on PaymentResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PaymentResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PaymentRespMultiError, or
// nil if none found.
func (m *PaymentResp) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PaymentId

	// no validation rules for Status

	// no validation rules for PaymentUrl

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentRespValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentRespValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentRespValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PaymentRespMultiError(errors)
	}

	return nil
}

// PaymentRespMultiError is an error wrapping multiple validation errors
// returned by PaymentResp.ValidateAll() if the designated constraints aren't met.
type PaymentRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentRespMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentRespMultiError) AllErrors() []error { return m }

// PaymentRespValidationError is the validation error returned by
// PaymentResp.Validate if the designated constraints aren't met.
type PaymentRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentRespValidationError) ErrorName() string { return "PaymentRespValidationError" }

// Error satisfies the builtin error interface
func (e PaymentRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentRespValidationError{}

// Validate checks the field values on GetPaymentReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetPaymentReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaymentReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetPaymentReqMultiError, or
// nil if none found.
func (m *GetPaymentReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PaymentId

	if len(errors) > 0 {
		return GetPaymentReqMultiError(errors)
	}

	return nil
}

// GetPaymentReqMultiError is an error wrapping multiple validation errors
// returned by GetPaymentReq.ValidateAll() if the designated constraints
// aren't met.
type GetPaymentReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentReqMultiError) AllErrors() []error { return m }

// GetPaymentReqValidationError is the validation error returned by
// GetPaymentReq.Validate if the designated constraints aren't met.
type GetPaymentReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentReqValidationError) ErrorName() string { return "GetPaymentReqValidationError" }

// Error satisfies the builtin error interface
func (e GetPaymentReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentReqValidationError{}

// Validate checks the field values on PaymentCallbackReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PaymentCallbackReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentCallbackReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PaymentCallbackReqMultiError, or nil if none found.
func (m *PaymentCallbackReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentCallbackReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PaymentId

	// no validation rules for Status

	// no validation rules for GatewayResponse

	if all {
		switch v := interface{}(m.GetProcessedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentCallbackReqValidationError{
					field:  "ProcessedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentCallbackReqValidationError{
					field:  "ProcessedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProcessedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentCallbackReqValidationError{
				field:  "ProcessedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	{
		sorted_keys := make([]string, len(m.GetRequestForm()))
		i := 0
		for key := range m.GetRequestForm() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetRequestForm()[key]
			_ = val

			// no validation rules for RequestForm[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, PaymentCallbackReqValidationError{
							field:  fmt.Sprintf("RequestForm[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, PaymentCallbackReqValidationError{
							field:  fmt.Sprintf("RequestForm[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return PaymentCallbackReqValidationError{
						field:  fmt.Sprintf("RequestForm[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return PaymentCallbackReqMultiError(errors)
	}

	return nil
}

// PaymentCallbackReqMultiError is an error wrapping multiple validation errors
// returned by PaymentCallbackReq.ValidateAll() if the designated constraints
// aren't met.
type PaymentCallbackReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentCallbackReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentCallbackReqMultiError) AllErrors() []error { return m }

// PaymentCallbackReqValidationError is the validation error returned by
// PaymentCallbackReq.Validate if the designated constraints aren't met.
type PaymentCallbackReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentCallbackReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentCallbackReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentCallbackReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentCallbackReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentCallbackReqValidationError) ErrorName() string {
	return "PaymentCallbackReqValidationError"
}

// Error satisfies the builtin error interface
func (e PaymentCallbackReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentCallbackReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentCallbackReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentCallbackReqValidationError{}

// Validate checks the field values on PaymentCallbackResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PaymentCallbackResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentCallbackResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PaymentCallbackRespMultiError, or nil if none found.
func (m *PaymentCallbackResp) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentCallbackResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PaymentCallbackRespMultiError(errors)
	}

	return nil
}

// PaymentCallbackRespMultiError is an error wrapping multiple validation
// errors returned by PaymentCallbackResp.ValidateAll() if the designated
// constraints aren't met.
type PaymentCallbackRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentCallbackRespMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentCallbackRespMultiError) AllErrors() []error { return m }

// PaymentCallbackRespValidationError is the validation error returned by
// PaymentCallbackResp.Validate if the designated constraints aren't met.
type PaymentCallbackRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentCallbackRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentCallbackRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentCallbackRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentCallbackRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentCallbackRespValidationError) ErrorName() string {
	return "PaymentCallbackRespValidationError"
}

// Error satisfies the builtin error interface
func (e PaymentCallbackRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentCallbackResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentCallbackRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentCallbackRespValidationError{}

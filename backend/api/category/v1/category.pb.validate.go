// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/category.proto

package categoryv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on BatchGetCategoriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchGetCategoriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchGetCategoriesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchGetCategoriesRequestMultiError, or nil if none found.
func (m *BatchGetCategoriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchGetCategoriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BatchGetCategoriesRequestMultiError(errors)
	}

	return nil
}

// BatchGetCategoriesRequestMultiError is an error wrapping multiple validation
// errors returned by BatchGetCategoriesRequest.ValidateAll() if the
// designated constraints aren't met.
type BatchGetCategoriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchGetCategoriesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchGetCategoriesRequestMultiError) AllErrors() []error { return m }

// BatchGetCategoriesRequestValidationError is the validation error returned by
// BatchGetCategoriesRequest.Validate if the designated constraints aren't met.
type BatchGetCategoriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchGetCategoriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchGetCategoriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchGetCategoriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchGetCategoriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchGetCategoriesRequestValidationError) ErrorName() string {
	return "BatchGetCategoriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchGetCategoriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchGetCategoriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchGetCategoriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchGetCategoriesRequestValidationError{}

// Validate checks the field values on Categories with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Categories) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Categories with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CategoriesMultiError, or
// nil if none found.
func (m *Categories) ValidateAll() error {
	return m.validate(true)
}

func (m *Categories) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCategories() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CategoriesValidationError{
						field:  fmt.Sprintf("Categories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CategoriesValidationError{
						field:  fmt.Sprintf("Categories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CategoriesValidationError{
					field:  fmt.Sprintf("Categories[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CategoriesMultiError(errors)
	}

	return nil
}

// CategoriesMultiError is an error wrapping multiple validation errors
// returned by Categories.ValidateAll() if the designated constraints aren't met.
type CategoriesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoriesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoriesMultiError) AllErrors() []error { return m }

// CategoriesValidationError is the validation error returned by
// Categories.Validate if the designated constraints aren't met.
type CategoriesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoriesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoriesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoriesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoriesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoriesValidationError) ErrorName() string { return "CategoriesValidationError" }

// Error satisfies the builtin error interface
func (e CategoriesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategories.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoriesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoriesValidationError{}

// Validate checks the field values on Category with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Category) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Category with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CategoryMultiError, or nil
// if none found.
func (m *Category) ValidateAll() error {
	return m.validate(true)
}

func (m *Category) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ParentId

	// no validation rules for Level

	// no validation rules for Path

	// no validation rules for Name

	// no validation rules for SortOrder

	// no validation rules for IsLeaf

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CategoryValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CategoryValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CategoryValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CategoryValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CategoryValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CategoryValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CategoryMultiError(errors)
	}

	return nil
}

// CategoryMultiError is an error wrapping multiple validation errors returned
// by Category.ValidateAll() if the designated constraints aren't met.
type CategoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryMultiError) AllErrors() []error { return m }

// CategoryValidationError is the validation error returned by
// Category.Validate if the designated constraints aren't met.
type CategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryValidationError) ErrorName() string { return "CategoryValidationError" }

// Error satisfies the builtin error interface
func (e CategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryValidationError{}

// Validate checks the field values on ClosureRelations with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ClosureRelations) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClosureRelations with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClosureRelationsMultiError, or nil if none found.
func (m *ClosureRelations) ValidateAll() error {
	return m.validate(true)
}

func (m *ClosureRelations) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRelations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ClosureRelationsValidationError{
						field:  fmt.Sprintf("Relations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ClosureRelationsValidationError{
						field:  fmt.Sprintf("Relations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClosureRelationsValidationError{
					field:  fmt.Sprintf("Relations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ClosureRelationsMultiError(errors)
	}

	return nil
}

// ClosureRelationsMultiError is an error wrapping multiple validation errors
// returned by ClosureRelations.ValidateAll() if the designated constraints
// aren't met.
type ClosureRelationsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClosureRelationsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClosureRelationsMultiError) AllErrors() []error { return m }

// ClosureRelationsValidationError is the validation error returned by
// ClosureRelations.Validate if the designated constraints aren't met.
type ClosureRelationsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClosureRelationsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClosureRelationsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClosureRelationsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClosureRelationsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClosureRelationsValidationError) ErrorName() string { return "ClosureRelationsValidationError" }

// Error satisfies the builtin error interface
func (e ClosureRelationsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClosureRelations.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClosureRelationsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClosureRelationsValidationError{}

// Validate checks the field values on ClosureRelation with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ClosureRelation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClosureRelation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClosureRelationMultiError, or nil if none found.
func (m *ClosureRelation) ValidateAll() error {
	return m.validate(true)
}

func (m *ClosureRelation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ancestor

	// no validation rules for Descendant

	// no validation rules for Depth

	if len(errors) > 0 {
		return ClosureRelationMultiError(errors)
	}

	return nil
}

// ClosureRelationMultiError is an error wrapping multiple validation errors
// returned by ClosureRelation.ValidateAll() if the designated constraints
// aren't met.
type ClosureRelationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClosureRelationMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClosureRelationMultiError) AllErrors() []error { return m }

// ClosureRelationValidationError is the validation error returned by
// ClosureRelation.Validate if the designated constraints aren't met.
type ClosureRelationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClosureRelationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClosureRelationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClosureRelationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClosureRelationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClosureRelationValidationError) ErrorName() string { return "ClosureRelationValidationError" }

// Error satisfies the builtin error interface
func (e ClosureRelationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClosureRelation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClosureRelationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClosureRelationValidationError{}

// Validate checks the field values on CreateCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCategoryRequestMultiError, or nil if none found.
func (m *CreateCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ParentId

	// no validation rules for Name

	// no validation rules for SortOrder

	if len(errors) > 0 {
		return CreateCategoryRequestMultiError(errors)
	}

	return nil
}

// CreateCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCategoryRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCategoryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCategoryRequestMultiError) AllErrors() []error { return m }

// CreateCategoryRequestValidationError is the validation error returned by
// CreateCategoryRequest.Validate if the designated constraints aren't met.
type CreateCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCategoryRequestValidationError) ErrorName() string {
	return "CreateCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCategoryRequestValidationError{}

// Validate checks the field values on GetCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCategoryRequestMultiError, or nil if none found.
func (m *GetCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetCategoryRequestMultiError(errors)
	}

	return nil
}

// GetCategoryRequestMultiError is an error wrapping multiple validation errors
// returned by GetCategoryRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCategoryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCategoryRequestMultiError) AllErrors() []error { return m }

// GetCategoryRequestValidationError is the validation error returned by
// GetCategoryRequest.Validate if the designated constraints aren't met.
type GetCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCategoryRequestValidationError) ErrorName() string {
	return "GetCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCategoryRequestValidationError{}

// Validate checks the field values on UpdateCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCategoryRequestMultiError, or nil if none found.
func (m *UpdateCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return UpdateCategoryRequestMultiError(errors)
	}

	return nil
}

// UpdateCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCategoryRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCategoryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCategoryRequestMultiError) AllErrors() []error { return m }

// UpdateCategoryRequestValidationError is the validation error returned by
// UpdateCategoryRequest.Validate if the designated constraints aren't met.
type UpdateCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCategoryRequestValidationError) ErrorName() string {
	return "UpdateCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCategoryRequestValidationError{}

// Validate checks the field values on DeleteCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCategoryRequestMultiError, or nil if none found.
func (m *DeleteCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteCategoryRequestMultiError(errors)
	}

	return nil
}

// DeleteCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCategoryRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCategoryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCategoryRequestMultiError) AllErrors() []error { return m }

// DeleteCategoryRequestValidationError is the validation error returned by
// DeleteCategoryRequest.Validate if the designated constraints aren't met.
type DeleteCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCategoryRequestValidationError) ErrorName() string {
	return "DeleteCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCategoryRequestValidationError{}

// Validate checks the field values on GetSubTreeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSubTreeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubTreeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSubTreeRequestMultiError, or nil if none found.
func (m *GetSubTreeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubTreeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RootId

	if len(errors) > 0 {
		return GetSubTreeRequestMultiError(errors)
	}

	return nil
}

// GetSubTreeRequestMultiError is an error wrapping multiple validation errors
// returned by GetSubTreeRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSubTreeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubTreeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubTreeRequestMultiError) AllErrors() []error { return m }

// GetSubTreeRequestValidationError is the validation error returned by
// GetSubTreeRequest.Validate if the designated constraints aren't met.
type GetSubTreeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubTreeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubTreeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubTreeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubTreeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubTreeRequestValidationError) ErrorName() string {
	return "GetSubTreeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubTreeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubTreeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubTreeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubTreeRequestValidationError{}

// Validate checks the field values on GetCategoryPathRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCategoryPathRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCategoryPathRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCategoryPathRequestMultiError, or nil if none found.
func (m *GetCategoryPathRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCategoryPathRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CategoryId

	if len(errors) > 0 {
		return GetCategoryPathRequestMultiError(errors)
	}

	return nil
}

// GetCategoryPathRequestMultiError is an error wrapping multiple validation
// errors returned by GetCategoryPathRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCategoryPathRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCategoryPathRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCategoryPathRequestMultiError) AllErrors() []error { return m }

// GetCategoryPathRequestValidationError is the validation error returned by
// GetCategoryPathRequest.Validate if the designated constraints aren't met.
type GetCategoryPathRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCategoryPathRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCategoryPathRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCategoryPathRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCategoryPathRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCategoryPathRequestValidationError) ErrorName() string {
	return "GetCategoryPathRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCategoryPathRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCategoryPathRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCategoryPathRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCategoryPathRequestValidationError{}

// Validate checks the field values on GetDirectSubCategoriesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDirectSubCategoriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDirectSubCategoriesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetDirectSubCategoriesRequestMultiError, or nil if none found.
func (m *GetDirectSubCategoriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDirectSubCategoriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ParentId

	if len(errors) > 0 {
		return GetDirectSubCategoriesRequestMultiError(errors)
	}

	return nil
}

// GetDirectSubCategoriesRequestMultiError is an error wrapping multiple
// validation errors returned by GetDirectSubCategoriesRequest.ValidateAll()
// if the designated constraints aren't met.
type GetDirectSubCategoriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDirectSubCategoriesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDirectSubCategoriesRequestMultiError) AllErrors() []error { return m }

// GetDirectSubCategoriesRequestValidationError is the validation error
// returned by GetDirectSubCategoriesRequest.Validate if the designated
// constraints aren't met.
type GetDirectSubCategoriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDirectSubCategoriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDirectSubCategoriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDirectSubCategoriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDirectSubCategoriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDirectSubCategoriesRequestValidationError) ErrorName() string {
	return "GetDirectSubCategoriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDirectSubCategoriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDirectSubCategoriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDirectSubCategoriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDirectSubCategoriesRequestValidationError{}

// Validate checks the field values on GetClosureRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetClosureRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClosureRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClosureRequestMultiError, or nil if none found.
func (m *GetClosureRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClosureRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CategoryId

	if len(errors) > 0 {
		return GetClosureRequestMultiError(errors)
	}

	return nil
}

// GetClosureRequestMultiError is an error wrapping multiple validation errors
// returned by GetClosureRequest.ValidateAll() if the designated constraints
// aren't met.
type GetClosureRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClosureRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClosureRequestMultiError) AllErrors() []error { return m }

// GetClosureRequestValidationError is the validation error returned by
// GetClosureRequest.Validate if the designated constraints aren't met.
type GetClosureRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClosureRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClosureRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClosureRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClosureRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClosureRequestValidationError) ErrorName() string {
	return "GetClosureRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetClosureRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClosureRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClosureRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClosureRequestValidationError{}

// Validate checks the field values on UpdateClosureDepthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateClosureDepthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateClosureDepthRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateClosureDepthRequestMultiError, or nil if none found.
func (m *UpdateClosureDepthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateClosureDepthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CategoryId

	// no validation rules for Name

	if len(errors) > 0 {
		return UpdateClosureDepthRequestMultiError(errors)
	}

	return nil
}

// UpdateClosureDepthRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateClosureDepthRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateClosureDepthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateClosureDepthRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateClosureDepthRequestMultiError) AllErrors() []error { return m }

// UpdateClosureDepthRequestValidationError is the validation error returned by
// UpdateClosureDepthRequest.Validate if the designated constraints aren't met.
type UpdateClosureDepthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateClosureDepthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateClosureDepthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateClosureDepthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateClosureDepthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateClosureDepthRequestValidationError) ErrorName() string {
	return "UpdateClosureDepthRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateClosureDepthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateClosureDepthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateClosureDepthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateClosureDepthRequestValidationError{}

syntax = "proto3";

package ecommerce.product.v1;

option go_package = "backend/api/product/v1;productv1";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "validate/validate.proto";
import "openapi/v3/annotations.proto";

// 商品服务定义
service ProductService {
  // 上传商品文件
  rpc UploadProductFile(UploadProductFileRequest) returns (UploadProductFileReply) {
    option (google.api.http) = {
      post: "/v1/products/uploadfile"
      body: "*"
    };
  }

  // 创建商品（草稿状态）
  rpc CreateProduct(CreateProductRequest) returns (CreateProductReply) {
    option (google.api.http) = {
      post: "/v1/products"
      body: "*"
    };
  }

  // 提交商品审核
  rpc SubmitForAudit(SubmitAuditRequest) returns (AuditRecord) {
    option (google.api.http) = {
      post: "/v1/products/{product_id}/submit-audit"
      body: "*"
    };
  }

  // 审核商品
  rpc AuditProduct(AuditProductRequest) returns (AuditRecord) {
    option (google.api.http) = {
      post: "/v1/products/{product_id}/audit"
      body: "*"
    };
  }

  // 随机返回商品数据
  rpc ListRandomProducts(ListRandomProductsRequest) returns (Products) {
    option (google.api.http) = {
      get: "/v1/products"
    };
  }

  // 根据分类返回商品数据
  rpc GetCategoryProducts(GetCategoryProductsRequest) returns (Products) {
    option (google.api.http) = {
      get: "/v1/products/category/{category_id}"
    };
  }

  // 根据分类及其所有子分类返回商品数据
  rpc GetCategoryWithChildrenProducts(GetCategoryProductsRequest) returns (Products) {
    option (google.api.http) = {
      get: "/v1/products/category/{category_id}/with-children"
    };
  }

  // 批量获取商品详情
  rpc GetProductsBatch(GetProductsBatchRequest) returns (Products) {
    option (google.api.http) = {
      get: "/v1/products/batch"
    };
  }

  // 获取单个商品详情
  rpc GetProduct(GetProductRequest) returns (Product) {
    option (google.api.http) = {
      get: "/v1/products/{id}"
    };
  }


  // 根据商品名称模糊查询
  rpc SearchProductsByName(SearchProductRequest) returns (Products) {
    option (google.api.http) = {
      get: "/v1/products/{name}"
    };
  }

  // 根据商品分类查询
  rpc ListProductsByCategory(ListProductsByCategoryRequest) returns (Products) {
    option (google.api.http) = {
      get: "/v1/products/categories/{name}"
    };
  }

  // 删除商品（软删除）
  rpc DeleteProduct(DeleteProductRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/products/{id}"
    };
  }
}

// 商品状态枚举定义
enum ProductStatus {
  PRODUCT_STATUS_DRAFT = 0;    // 草稿状态
  PRODUCT_STATUS_PENDING = 1;  // 待审核
  PRODUCT_STATUS_APPROVED = 2; // 审核通过
  PRODUCT_STATUS_REJECTED = 3; // 审核驳回
  PRODUCT_STATUS_SOLD_OUT = 4; // 下架
}

// 审核动作枚举
enum AuditAction {
  AUDIT_ACTION_APPROVED = 0; // 通过审核
  AUDIT_ACTION_REJECT = 1;  // 驳回审核
}

// 前端上传文件所用的HTTP方法
enum UploadMethod {
  Put = 0;
  Post = 1;
}

message GetCategoryProductsRequest {
  uint32 category_id = 1;
  uint32 page = 2;
  uint32 page_size = 3;
  uint32 status = 4; // 商品状态
}

// 获取对象存储上传链接
message UploadProductFileRequest {
  UploadMethod method = 1 [
    json_name = "method",
    (openapi.v3.property) = {description: "上传文件所用的HTTP方法，支持POST和PUT"}
  ];  // 上传文件所用的HTTP方法

  optional string content_type = 2 [
    json_name = "contentType",
    (openapi.v3.property) = {description: "文件的MIME类型"}
  ];  // 文件的MIME类型

  optional string bucket_name = 3 [
    json_name = "bucketName",
    (openapi.v3.property) = {description: "文件桶名称，如果不填写，将会根据文件名或者MIME类型进行自动解析"}
  ]; // 文件桶名称，如果不填写，将会根据文件名或者MIME类型进行自动解析。

  optional string file_path = 4 [
    json_name = "filePath",
    (openapi.v3.property) = {description: "远端的文件路径，可以不填写"}
  ]; // 远端的文件路径，可以不填写。

  optional string file_name = 5 [
    json_name = "fileName",
    (openapi.v3.property) = {description: "文件名，如果不填写，则会生成UUID，有同名文件也会改为UUID"}
  ]; // 文件名，如果不填写，则会生成UUID，有同名文件也会改为UUID。
}

// 获取对象存储上传链接
message UploadProductFileReply {
  string upload_url = 1 [
    json_name = "uploadUrl",
    (openapi.v3.property) = {description: "文件的上传链接，默认1个小时的过期时间"}
  ]; // 文件的上传链接，默认1个小时的过期时间。

  string download_url = 2 [
    json_name = "downloadUrl",
    (openapi.v3.property) = {description: "文件的下载链接"}
  ]; // 文件的下载链接

  optional string bucket_name = 3 [
    json_name = "bucketName",
    (openapi.v3.property) = {description: "文件桶名称"}
  ]; // 文件桶名称

  string object_name = 4 [
    json_name = "objectName",
    (openapi.v3.property) = {description: "文件名"}
  ];  // 文件名

  map<string, string> form_data = 5 [
    json_name = "formData",
    (openapi.v3.property) = {description: "表单数据，使用POST方法时填写"}
  ];
}

// 返回随机顺序的商品数据
message ListRandomProductsRequest {
  uint32 page = 1;
  uint32 page_size = 2;
  uint32 status = 3; // 商品状态
}

message SearchProductRequest {
  string name = 1 [(validate.rules).string = {min_len: 1, max_len: 200}];
  // 将自然语言文本转换为全文搜索查询条件（tsquery 类型），主要功能包括：
  // 词素标准化（Normalization）
  // 移除停用词（的、是、the、a 等）
  // 执行词干提取（running → run，dogs → dog）
  // 逻辑运算符转换
  // 自动用 &（AND）连接词汇
  // 示例："red apple" → 'red' & 'apple'
  // 安全过滤
  // 自动转义特殊字符（! : & 等）
  string query = 2[(validate.rules).string = {min_len: 1, max_len: 200}];
  uint32 page = 3 [(validate.rules).uint32 = {gt: 0}];
  uint32 page_size = 4[(validate.rules).uint32 = {gt: 0}];
}

// 商品数组
message Products {
  repeated Product items = 1;
}

//分类名称
message ListProductsByCategoryRequest {
  string name = 1;
}

// 新增分类验证相关定义
message CategoryInfo {
  uint32 category_id = 1 [(validate.rules).uint32 = {gt: 1}];
  string category_name = 2;
}
// 图片信息
message Image {
  string url = 1;         // 图片URL
  bool is_primary = 2;    // 是否主图
  int32 sort_order = 3;   // 排序顺序
}

message Inventory  {
  string product_id = 1 [
    (validate.rules).string = {min_len: 1, max_len: 200,uuid: true},
    (openapi.v3.property) = {description: "商品ID"}
  ];
  string  merchant_id = 2[
    (validate.rules).string = {min_len: 1, max_len: 200,uuid: true},
    (openapi.v3.property) = {description: "商家ID"}
  ];
  uint32 stock = 3 [
    (validate.rules).uint32 = {gt: 0},
    (openapi.v3.property) = {description: "库存数量，必须大于0"}
  ];
}

// 商品核心数据结构
message Product {
  string id = 1 [(validate.rules).string = {min_len: 2, max_len: 200}]; // 商品唯一ID（系统生成）
  string name = 2 [(validate.rules).string = {min_len: 2, max_len: 200}]; // 商品名称
  string description = 3 [(validate.rules).string.max_len = 2000]; // 商品描述
  double price = 4; // 商品价格（单位：元）
  uint32 status = 6; // 当前状态
  string merchant_id = 7;    // 所属商家ID
  repeated Image images = 8; // 商品图片列表

  // 商品属性（使用 JSON 格式存储）
  google.protobuf.Value attributes = 9;

  // 审核信息（仅当处于审核状态时有效）
  AuditInfo audit_info = 10;

  // 时间戳
  google.protobuf.Timestamp created_at = 11;
  google.protobuf.Timestamp updated_at = 12;
  CategoryInfo category = 13;
  // 库存信息
  Inventory inventory = 14;
}

// 创建商品的返回值
message CreateProductReply {
  string id = 1;  // 商品唯一ID（系统生成）
  google.protobuf.Timestamp created_at = 2;
  google.protobuf.Timestamp updated_at = 3;
}

// 审核信息
message AuditInfo {
  string audit_id = 1;           // 审核记录ID
  string reason = 2;            // 审核意见/驳回原因
  string operator_id = 3;        // 操作人ID
  google.protobuf.Timestamp operated_at = 4; // 操作时间
}

// 创建商品请求
message CreateProductRequest {
  string name = 1 [(validate.rules).string = {min_len: 2, max_len: 200}]; // 商品名称
  double price = 2; // 商品价格（单位：元
  string description = 3 [(validate.rules).string.max_len = 2000]; // 商品描述
  uint32 stock = 4; // 商品库存
  repeated Image images = 8; // 商品图片列表
  google.protobuf.Value attributes = 7;
  // 时间戳
  google.protobuf.Timestamp created_at = 11;
  google.protobuf.Timestamp updated_at = 12;
  CategoryInfo category = 13;
}

// 提交审核请求
message SubmitAuditRequest {
  string product_id = 1;
}

// 审核操作请求
message AuditProductRequest {
  string product_id = 1;
  string merchant_id = 2;
  AuditAction action = 3;
  string reason = 4;     // 审核消息
  string operator_id = 5;
}

// 查询单个商品请求
message GetProductRequest {
  string id = 1;
  string merchant_id = 2;
}

message GetProductsBatchRequest {
  repeated string product_ids = 1;
  repeated string merchant_ids = 2;
}

// 删除商品请求
message DeleteProductRequest {
  string id = 1; // 商品 ID
  string merchant_id =  2; // 商家 ID
  uint32 status = 3; // 商品状态, 默认删除状态为4, 即下架状态
}

// 审核记录返回结构
message AuditRecord {
  string id = 1;
  string product_id = 2;
  uint32 old_status = 3;
  uint32 new_status = 4;
  string reason = 5;
  string operator_id = 6;
  google.protobuf.Timestamp operated_at = 7;
}

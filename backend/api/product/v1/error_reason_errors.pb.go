// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package product

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 找不到
func IsProductNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PRODUCT_NOT_FOUND.String() && e.Code == 404
}

// 找不到
func ErrorProductNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_PRODUCT_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 内部错误
func IsInvalidStatus(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_STATUS.String() && e.Code == 500
}

// 内部错误
func ErrorInvalidStatus(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INVALID_STATUS.String(), fmt.Sprintf(format, args...))
}

// 错误参数
func IsInvalidAuditAction(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_InvalidAuditAction.String() && e.Code == 400
}

// 错误参数
func ErrorInvalidAuditAction(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_InvalidAuditAction.String(), fmt.Sprintf(format, args...))
}

func IsCategoryNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CategoryNotFound.String() && e.Code == 404
}

func ErrorCategoryNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_CategoryNotFound.String(), fmt.Sprintf(format, args...))
}

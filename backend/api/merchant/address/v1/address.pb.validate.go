// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: address/v1/address.proto

package merchantaddressv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on MerchantAddress with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MerchantAddress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MerchantAddress with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MerchantAddressMultiError, or nil if none found.
func (m *MerchantAddress) ValidateAll() error {
	return m.validate(true)
}

func (m *MerchantAddress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for MerchantId

	if _, ok := MerchantAddress_MerchantAddressType_name[int32(m.GetAddressType())]; !ok {
		err := MerchantAddressValidationError{
			field:  "AddressType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetContactPerson()); l < 2 || l > 50 {
		err := MerchantAddressValidationError{
			field:  "ContactPerson",
			reason: "value length must be between 2 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_MerchantAddress_ContactPhone_Pattern.MatchString(m.GetContactPhone()) {
		err := MerchantAddressValidationError{
			field:  "ContactPhone",
			reason: "value does not match regex pattern \"^\\\\+?[0-9\\\\-\\\\s]{6,20}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetStreetAddress()) < 5 {
		err := MerchantAddressValidationError{
			field:  "StreetAddress",
			reason: "value length must be at least 5 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCity()) < 2 {
		err := MerchantAddressValidationError{
			field:  "City",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetState()) < 2 {
		err := MerchantAddressValidationError{
			field:  "State",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCountry()) < 2 {
		err := MerchantAddressValidationError{
			field:  "Country",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_MerchantAddress_ZipCode_Pattern.MatchString(m.GetZipCode()) {
		err := MerchantAddressValidationError{
			field:  "ZipCode",
			reason: "value does not match regex pattern \"^[0-9A-Z\\\\-]{3,10}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsDefault

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MerchantAddressValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MerchantAddressValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MerchantAddressValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MerchantAddressValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MerchantAddressValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MerchantAddressValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Remarks

	if len(errors) > 0 {
		return MerchantAddressMultiError(errors)
	}

	return nil
}

// MerchantAddressMultiError is an error wrapping multiple validation errors
// returned by MerchantAddress.ValidateAll() if the designated constraints
// aren't met.
type MerchantAddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MerchantAddressMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MerchantAddressMultiError) AllErrors() []error { return m }

// MerchantAddressValidationError is the validation error returned by
// MerchantAddress.Validate if the designated constraints aren't met.
type MerchantAddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MerchantAddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MerchantAddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MerchantAddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MerchantAddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MerchantAddressValidationError) ErrorName() string { return "MerchantAddressValidationError" }

// Error satisfies the builtin error interface
func (e MerchantAddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMerchantAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MerchantAddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MerchantAddressValidationError{}

var _MerchantAddress_ContactPhone_Pattern = regexp.MustCompile("^\\+?[0-9\\-\\s]{6,20}$")

var _MerchantAddress_ZipCode_Pattern = regexp.MustCompile("^[0-9A-Z\\-]{3,10}$")

// Validate checks the field values on BatchCreateMerchantAddressesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BatchCreateMerchantAddressesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchCreateMerchantAddressesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BatchCreateMerchantAddressesRequestMultiError, or nil if none found.
func (m *BatchCreateMerchantAddressesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchCreateMerchantAddressesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAddresses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchCreateMerchantAddressesRequestValidationError{
						field:  fmt.Sprintf("Addresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchCreateMerchantAddressesRequestValidationError{
						field:  fmt.Sprintf("Addresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchCreateMerchantAddressesRequestValidationError{
					field:  fmt.Sprintf("Addresses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for SkipDuplicates

	if len(errors) > 0 {
		return BatchCreateMerchantAddressesRequestMultiError(errors)
	}

	return nil
}

// BatchCreateMerchantAddressesRequestMultiError is an error wrapping multiple
// validation errors returned by
// BatchCreateMerchantAddressesRequest.ValidateAll() if the designated
// constraints aren't met.
type BatchCreateMerchantAddressesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchCreateMerchantAddressesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchCreateMerchantAddressesRequestMultiError) AllErrors() []error { return m }

// BatchCreateMerchantAddressesRequestValidationError is the validation error
// returned by BatchCreateMerchantAddressesRequest.Validate if the designated
// constraints aren't met.
type BatchCreateMerchantAddressesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchCreateMerchantAddressesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchCreateMerchantAddressesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchCreateMerchantAddressesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchCreateMerchantAddressesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchCreateMerchantAddressesRequestValidationError) ErrorName() string {
	return "BatchCreateMerchantAddressesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchCreateMerchantAddressesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchCreateMerchantAddressesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchCreateMerchantAddressesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchCreateMerchantAddressesRequestValidationError{}

// Validate checks the field values on BatchCreateMerchantAddressesReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BatchCreateMerchantAddressesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchCreateMerchantAddressesReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BatchCreateMerchantAddressesReplyMultiError, or nil if none found.
func (m *BatchCreateMerchantAddressesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchCreateMerchantAddressesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SuccessCount

	for idx, item := range m.GetFailedItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchCreateMerchantAddressesReplyValidationError{
						field:  fmt.Sprintf("FailedItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchCreateMerchantAddressesReplyValidationError{
						field:  fmt.Sprintf("FailedItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchCreateMerchantAddressesReplyValidationError{
					field:  fmt.Sprintf("FailedItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BatchCreateMerchantAddressesReplyMultiError(errors)
	}

	return nil
}

// BatchCreateMerchantAddressesReplyMultiError is an error wrapping multiple
// validation errors returned by
// BatchCreateMerchantAddressesReply.ValidateAll() if the designated
// constraints aren't met.
type BatchCreateMerchantAddressesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchCreateMerchantAddressesReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchCreateMerchantAddressesReplyMultiError) AllErrors() []error { return m }

// BatchCreateMerchantAddressesReplyValidationError is the validation error
// returned by BatchCreateMerchantAddressesReply.Validate if the designated
// constraints aren't met.
type BatchCreateMerchantAddressesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchCreateMerchantAddressesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchCreateMerchantAddressesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchCreateMerchantAddressesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchCreateMerchantAddressesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchCreateMerchantAddressesReplyValidationError) ErrorName() string {
	return "BatchCreateMerchantAddressesReplyValidationError"
}

// Error satisfies the builtin error interface
func (e BatchCreateMerchantAddressesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchCreateMerchantAddressesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchCreateMerchantAddressesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchCreateMerchantAddressesReplyValidationError{}

// Validate checks the field values on DeletMerchanteAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletMerchanteAddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletMerchanteAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletMerchanteAddressRequestMultiError, or nil if none found.
func (m *DeletMerchanteAddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletMerchanteAddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeletMerchanteAddressRequestMultiError(errors)
	}

	return nil
}

// DeletMerchanteAddressRequestMultiError is an error wrapping multiple
// validation errors returned by DeletMerchanteAddressRequest.ValidateAll() if
// the designated constraints aren't met.
type DeletMerchanteAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletMerchanteAddressRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletMerchanteAddressRequestMultiError) AllErrors() []error { return m }

// DeletMerchanteAddressRequestValidationError is the validation error returned
// by DeletMerchanteAddressRequest.Validate if the designated constraints
// aren't met.
type DeletMerchanteAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletMerchanteAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletMerchanteAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletMerchanteAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletMerchanteAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletMerchanteAddressRequestValidationError) ErrorName() string {
	return "DeletMerchanteAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletMerchanteAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletMerchanteAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletMerchanteAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletMerchanteAddressRequestValidationError{}

// Validate checks the field values on GetMerchantAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMerchantAddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMerchantAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMerchantAddressRequestMultiError, or nil if none found.
func (m *GetMerchantAddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMerchantAddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetMerchantAddressRequestMultiError(errors)
	}

	return nil
}

// GetMerchantAddressRequestMultiError is an error wrapping multiple validation
// errors returned by GetMerchantAddressRequest.ValidateAll() if the
// designated constraints aren't met.
type GetMerchantAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMerchantAddressRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMerchantAddressRequestMultiError) AllErrors() []error { return m }

// GetMerchantAddressRequestValidationError is the validation error returned by
// GetMerchantAddressRequest.Validate if the designated constraints aren't met.
type GetMerchantAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMerchantAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMerchantAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMerchantAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMerchantAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMerchantAddressRequestValidationError) ErrorName() string {
	return "GetMerchantAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMerchantAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMerchantAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMerchantAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMerchantAddressRequestValidationError{}

// Validate checks the field values on ListMerchantAddressesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMerchantAddressesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMerchantAddressesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMerchantAddressesRequestMultiError, or nil if none found.
func (m *ListMerchantAddressesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMerchantAddressesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AddressType

	// no validation rules for OnlyDefault

	if m.GetPage() < 1 {
		err := ListMerchantAddressesRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 5 || val > 100 {
		err := ListMerchantAddressesRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [5, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListMerchantAddressesRequestMultiError(errors)
	}

	return nil
}

// ListMerchantAddressesRequestMultiError is an error wrapping multiple
// validation errors returned by ListMerchantAddressesRequest.ValidateAll() if
// the designated constraints aren't met.
type ListMerchantAddressesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMerchantAddressesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMerchantAddressesRequestMultiError) AllErrors() []error { return m }

// ListMerchantAddressesRequestValidationError is the validation error returned
// by ListMerchantAddressesRequest.Validate if the designated constraints
// aren't met.
type ListMerchantAddressesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMerchantAddressesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMerchantAddressesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMerchantAddressesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMerchantAddressesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMerchantAddressesRequestValidationError) ErrorName() string {
	return "ListMerchantAddressesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMerchantAddressesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMerchantAddressesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMerchantAddressesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMerchantAddressesRequestValidationError{}

// Validate checks the field values on ListMerchantAddressesReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMerchantAddressesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMerchantAddressesReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMerchantAddressesReplyMultiError, or nil if none found.
func (m *ListMerchantAddressesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMerchantAddressesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAddresses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMerchantAddressesReplyValidationError{
						field:  fmt.Sprintf("Addresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMerchantAddressesReplyValidationError{
						field:  fmt.Sprintf("Addresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMerchantAddressesReplyValidationError{
					field:  fmt.Sprintf("Addresses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalCount

	if len(errors) > 0 {
		return ListMerchantAddressesReplyMultiError(errors)
	}

	return nil
}

// ListMerchantAddressesReplyMultiError is an error wrapping multiple
// validation errors returned by ListMerchantAddressesReply.ValidateAll() if
// the designated constraints aren't met.
type ListMerchantAddressesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMerchantAddressesReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMerchantAddressesReplyMultiError) AllErrors() []error { return m }

// ListMerchantAddressesReplyValidationError is the validation error returned
// by ListMerchantAddressesReply.Validate if the designated constraints aren't met.
type ListMerchantAddressesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMerchantAddressesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMerchantAddressesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMerchantAddressesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMerchantAddressesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMerchantAddressesReplyValidationError) ErrorName() string {
	return "ListMerchantAddressesReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListMerchantAddressesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMerchantAddressesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMerchantAddressesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMerchantAddressesReplyValidationError{}

// Validate checks the field values on SetDefaultMerchantAddressRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SetDefaultMerchantAddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetDefaultMerchantAddressRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SetDefaultMerchantAddressRequestMultiError, or nil if none found.
func (m *SetDefaultMerchantAddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetDefaultMerchantAddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SetDefaultMerchantAddressRequestMultiError(errors)
	}

	return nil
}

// SetDefaultMerchantAddressRequestMultiError is an error wrapping multiple
// validation errors returned by
// SetDefaultMerchantAddressRequest.ValidateAll() if the designated
// constraints aren't met.
type SetDefaultMerchantAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetDefaultMerchantAddressRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetDefaultMerchantAddressRequestMultiError) AllErrors() []error { return m }

// SetDefaultMerchantAddressRequestValidationError is the validation error
// returned by SetDefaultMerchantAddressRequest.Validate if the designated
// constraints aren't met.
type SetDefaultMerchantAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDefaultMerchantAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDefaultMerchantAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDefaultMerchantAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDefaultMerchantAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDefaultMerchantAddressRequestValidationError) ErrorName() string {
	return "SetDefaultMerchantAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetDefaultMerchantAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDefaultMerchantAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDefaultMerchantAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDefaultMerchantAddressRequestValidationError{}

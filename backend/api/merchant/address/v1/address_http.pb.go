// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: address/v1/address.proto

package merchantaddressv1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationMerchantAddressesBatchCreateMerchantAddresses = "/ecommerce.merchantaddress.v1.MerchantAddresses/BatchCreateMerchantAddresses"
const OperationMerchantAddressesCreateMerchantAddress = "/ecommerce.merchantaddress.v1.MerchantAddresses/CreateMerchantAddress"
const OperationMerchantAddressesDeletMerchanteAddress = "/ecommerce.merchantaddress.v1.MerchantAddresses/DeletMerchanteAddress"
const OperationMerchantAddressesGetMerchantAddress = "/ecommerce.merchantaddress.v1.MerchantAddresses/GetMerchantAddress"
const OperationMerchantAddressesListMerchantAddresses = "/ecommerce.merchantaddress.v1.MerchantAddresses/ListMerchantAddresses"
const OperationMerchantAddressesSetDefaultMerchantAddress = "/ecommerce.merchantaddress.v1.MerchantAddresses/SetDefaultMerchantAddress"
const OperationMerchantAddressesUpdateMerchantAddress = "/ecommerce.merchantaddress.v1.MerchantAddresses/UpdateMerchantAddress"

type MerchantAddressesHTTPServer interface {
	// BatchCreateMerchantAddresses 批量导入商家地址（CSV/JSON格式）
	BatchCreateMerchantAddresses(context.Context, *BatchCreateMerchantAddressesRequest) (*BatchCreateMerchantAddressesReply, error)
	// CreateMerchantAddress 创建商家地址（支持多类型地址）
	CreateMerchantAddress(context.Context, *MerchantAddress) (*MerchantAddress, error)
	// DeletMerchanteAddress 删除商家地址
	DeletMerchanteAddress(context.Context, *DeletMerchanteAddressRequest) (*emptypb.Empty, error)
	// GetMerchantAddress 获取单个地址详情
	GetMerchantAddress(context.Context, *GetMerchantAddressRequest) (*MerchantAddress, error)
	// ListMerchantAddresses 列出商家所有地址（支持按类型过滤）
	ListMerchantAddresses(context.Context, *ListMerchantAddressesRequest) (*ListMerchantAddressesReply, error)
	// SetDefaultMerchantAddress 设置默认地址（按地址类型）
	SetDefaultMerchantAddress(context.Context, *SetDefaultMerchantAddressRequest) (*MerchantAddress, error)
	// UpdateMerchantAddress 更新商家地址（支持部分更新）
	UpdateMerchantAddress(context.Context, *MerchantAddress) (*MerchantAddress, error)
}

func RegisterMerchantAddressesHTTPServer(s *http.Server, srv MerchantAddressesHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/merchants/addresses", _MerchantAddresses_CreateMerchantAddress0_HTTP_Handler(srv))
	r.POST("/v1/merchants/addresses/batch", _MerchantAddresses_BatchCreateMerchantAddresses0_HTTP_Handler(srv))
	r.PATCH("/v1/merchants/addresses/{id}", _MerchantAddresses_UpdateMerchantAddress0_HTTP_Handler(srv))
	r.DELETE("/v1/merchants/addresses/{id}", _MerchantAddresses_DeletMerchanteAddress0_HTTP_Handler(srv))
	r.GET("/v1/merchants/addresses/{id}", _MerchantAddresses_GetMerchantAddress0_HTTP_Handler(srv))
	r.GET("/v1/merchants/addresses", _MerchantAddresses_ListMerchantAddresses0_HTTP_Handler(srv))
	r.PUT("/v1/merchants/addresses/{id}/default", _MerchantAddresses_SetDefaultMerchantAddress0_HTTP_Handler(srv))
}

func _MerchantAddresses_CreateMerchantAddress0_HTTP_Handler(srv MerchantAddressesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MerchantAddress
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMerchantAddressesCreateMerchantAddress)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateMerchantAddress(ctx, req.(*MerchantAddress))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MerchantAddress)
		return ctx.Result(200, reply)
	}
}

func _MerchantAddresses_BatchCreateMerchantAddresses0_HTTP_Handler(srv MerchantAddressesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BatchCreateMerchantAddressesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMerchantAddressesBatchCreateMerchantAddresses)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchCreateMerchantAddresses(ctx, req.(*BatchCreateMerchantAddressesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BatchCreateMerchantAddressesReply)
		return ctx.Result(200, reply)
	}
}

func _MerchantAddresses_UpdateMerchantAddress0_HTTP_Handler(srv MerchantAddressesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MerchantAddress
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMerchantAddressesUpdateMerchantAddress)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateMerchantAddress(ctx, req.(*MerchantAddress))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MerchantAddress)
		return ctx.Result(200, reply)
	}
}

func _MerchantAddresses_DeletMerchanteAddress0_HTTP_Handler(srv MerchantAddressesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeletMerchanteAddressRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMerchantAddressesDeletMerchanteAddress)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeletMerchanteAddress(ctx, req.(*DeletMerchanteAddressRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _MerchantAddresses_GetMerchantAddress0_HTTP_Handler(srv MerchantAddressesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMerchantAddressRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMerchantAddressesGetMerchantAddress)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMerchantAddress(ctx, req.(*GetMerchantAddressRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MerchantAddress)
		return ctx.Result(200, reply)
	}
}

func _MerchantAddresses_ListMerchantAddresses0_HTTP_Handler(srv MerchantAddressesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListMerchantAddressesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMerchantAddressesListMerchantAddresses)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMerchantAddresses(ctx, req.(*ListMerchantAddressesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListMerchantAddressesReply)
		return ctx.Result(200, reply)
	}
}

func _MerchantAddresses_SetDefaultMerchantAddress0_HTTP_Handler(srv MerchantAddressesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetDefaultMerchantAddressRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMerchantAddressesSetDefaultMerchantAddress)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetDefaultMerchantAddress(ctx, req.(*SetDefaultMerchantAddressRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MerchantAddress)
		return ctx.Result(200, reply)
	}
}

type MerchantAddressesHTTPClient interface {
	BatchCreateMerchantAddresses(ctx context.Context, req *BatchCreateMerchantAddressesRequest, opts ...http.CallOption) (rsp *BatchCreateMerchantAddressesReply, err error)
	CreateMerchantAddress(ctx context.Context, req *MerchantAddress, opts ...http.CallOption) (rsp *MerchantAddress, err error)
	DeletMerchanteAddress(ctx context.Context, req *DeletMerchanteAddressRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetMerchantAddress(ctx context.Context, req *GetMerchantAddressRequest, opts ...http.CallOption) (rsp *MerchantAddress, err error)
	ListMerchantAddresses(ctx context.Context, req *ListMerchantAddressesRequest, opts ...http.CallOption) (rsp *ListMerchantAddressesReply, err error)
	SetDefaultMerchantAddress(ctx context.Context, req *SetDefaultMerchantAddressRequest, opts ...http.CallOption) (rsp *MerchantAddress, err error)
	UpdateMerchantAddress(ctx context.Context, req *MerchantAddress, opts ...http.CallOption) (rsp *MerchantAddress, err error)
}

type MerchantAddressesHTTPClientImpl struct {
	cc *http.Client
}

func NewMerchantAddressesHTTPClient(client *http.Client) MerchantAddressesHTTPClient {
	return &MerchantAddressesHTTPClientImpl{client}
}

func (c *MerchantAddressesHTTPClientImpl) BatchCreateMerchantAddresses(ctx context.Context, in *BatchCreateMerchantAddressesRequest, opts ...http.CallOption) (*BatchCreateMerchantAddressesReply, error) {
	var out BatchCreateMerchantAddressesReply
	pattern := "/v1/merchants/addresses/batch"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMerchantAddressesBatchCreateMerchantAddresses))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MerchantAddressesHTTPClientImpl) CreateMerchantAddress(ctx context.Context, in *MerchantAddress, opts ...http.CallOption) (*MerchantAddress, error) {
	var out MerchantAddress
	pattern := "/v1/merchants/addresses"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMerchantAddressesCreateMerchantAddress))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MerchantAddressesHTTPClientImpl) DeletMerchanteAddress(ctx context.Context, in *DeletMerchanteAddressRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/merchants/addresses/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMerchantAddressesDeletMerchanteAddress))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MerchantAddressesHTTPClientImpl) GetMerchantAddress(ctx context.Context, in *GetMerchantAddressRequest, opts ...http.CallOption) (*MerchantAddress, error) {
	var out MerchantAddress
	pattern := "/v1/merchants/addresses/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMerchantAddressesGetMerchantAddress))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MerchantAddressesHTTPClientImpl) ListMerchantAddresses(ctx context.Context, in *ListMerchantAddressesRequest, opts ...http.CallOption) (*ListMerchantAddressesReply, error) {
	var out ListMerchantAddressesReply
	pattern := "/v1/merchants/addresses"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMerchantAddressesListMerchantAddresses))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MerchantAddressesHTTPClientImpl) SetDefaultMerchantAddress(ctx context.Context, in *SetDefaultMerchantAddressRequest, opts ...http.CallOption) (*MerchantAddress, error) {
	var out MerchantAddress
	pattern := "/v1/merchants/addresses/{id}/default"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMerchantAddressesSetDefaultMerchantAddress))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MerchantAddressesHTTPClientImpl) UpdateMerchantAddress(ctx context.Context, in *MerchantAddress, opts ...http.CallOption) (*MerchantAddress, error) {
	var out MerchantAddress
	pattern := "/v1/merchants/addresses/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMerchantAddressesUpdateMerchantAddress))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

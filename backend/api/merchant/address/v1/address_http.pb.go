// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: address/v1/address.proto

package addressv1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationMerchantAddressBatchCreateAddresses = "/ecommerce.merchant.v1.MerchantAddress/BatchCreateAddresses"
const OperationMerchantAddressCreateAddress = "/ecommerce.merchant.v1.MerchantAddress/CreateAddress"
const OperationMerchantAddressDeleteAddress = "/ecommerce.merchant.v1.MerchantAddress/DeleteAddress"
const OperationMerchantAddressGetAddress = "/ecommerce.merchant.v1.MerchantAddress/GetAddress"
const OperationMerchantAddressGetShippingAddress = "/ecommerce.merchant.v1.MerchantAddress/GetShippingAddress"
const OperationMerchantAddressListAddresses = "/ecommerce.merchant.v1.MerchantAddress/ListAddresses"
const OperationMerchantAddressSetDefaultAddress = "/ecommerce.merchant.v1.MerchantAddress/SetDefaultAddress"
const OperationMerchantAddressUpdateAddress = "/ecommerce.merchant.v1.MerchantAddress/UpdateAddress"

type MerchantAddressHTTPServer interface {
	// BatchCreateAddresses 批量导入商家地址（CSV/JSON格式）
	BatchCreateAddresses(context.Context, *BatchCreateAddressesRequest) (*BatchCreateAddressesResponse, error)
	// CreateAddress 创建商家地址（支持多类型地址）
	CreateAddress(context.Context, *Address) (*Address, error)
	// DeleteAddress 删除商家地址
	DeleteAddress(context.Context, *DeleteAddressRequest) (*emptypb.Empty, error)
	// GetAddress 获取单个地址详情
	GetAddress(context.Context, *GetAddressRequest) (*Address, error)
	// GetShippingAddress 获取发货地址（智能选择逻辑）
	GetShippingAddress(context.Context, *GetShippingAddressRequest) (*Address, error)
	// ListAddresses 列出商家所有地址（支持按类型过滤）
	ListAddresses(context.Context, *ListAddressesRequest) (*ListAddressesResponse, error)
	// SetDefaultAddress 设置默认地址（按地址类型）
	SetDefaultAddress(context.Context, *SetDefaultAddressRequest) (*Address, error)
	// UpdateAddress 更新商家地址（支持部分更新）
	UpdateAddress(context.Context, *Address) (*Address, error)
}

func RegisterMerchantAddressHTTPServer(s *http.Server, srv MerchantAddressHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/merchants/addresses", _MerchantAddress_CreateAddress0_HTTP_Handler(srv))
	r.POST("/v1/merchants/addresses/batch", _MerchantAddress_BatchCreateAddresses0_HTTP_Handler(srv))
	r.PATCH("/v1/merchants/addresses/{id}", _MerchantAddress_UpdateAddress0_HTTP_Handler(srv))
	r.DELETE("/v1/merchants/addresses/{id}", _MerchantAddress_DeleteAddress0_HTTP_Handler(srv))
	r.GET("/v1/merchants/addresses/{id}", _MerchantAddress_GetAddress0_HTTP_Handler(srv))
	r.GET("/v1/merchants/addresses", _MerchantAddress_ListAddresses0_HTTP_Handler(srv))
	r.PUT("/v1/merchants/addresses/{id}/default", _MerchantAddress_SetDefaultAddress0_HTTP_Handler(srv))
	r.GET("/v1/merchants/addresses/shipping", _MerchantAddress_GetShippingAddress0_HTTP_Handler(srv))
}

func _MerchantAddress_CreateAddress0_HTTP_Handler(srv MerchantAddressHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Address
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMerchantAddressCreateAddress)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAddress(ctx, req.(*Address))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Address)
		return ctx.Result(200, reply)
	}
}

func _MerchantAddress_BatchCreateAddresses0_HTTP_Handler(srv MerchantAddressHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BatchCreateAddressesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMerchantAddressBatchCreateAddresses)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchCreateAddresses(ctx, req.(*BatchCreateAddressesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BatchCreateAddressesResponse)
		return ctx.Result(200, reply)
	}
}

func _MerchantAddress_UpdateAddress0_HTTP_Handler(srv MerchantAddressHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Address
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMerchantAddressUpdateAddress)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAddress(ctx, req.(*Address))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Address)
		return ctx.Result(200, reply)
	}
}

func _MerchantAddress_DeleteAddress0_HTTP_Handler(srv MerchantAddressHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteAddressRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMerchantAddressDeleteAddress)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteAddress(ctx, req.(*DeleteAddressRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _MerchantAddress_GetAddress0_HTTP_Handler(srv MerchantAddressHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAddressRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMerchantAddressGetAddress)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAddress(ctx, req.(*GetAddressRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Address)
		return ctx.Result(200, reply)
	}
}

func _MerchantAddress_ListAddresses0_HTTP_Handler(srv MerchantAddressHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAddressesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMerchantAddressListAddresses)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAddresses(ctx, req.(*ListAddressesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAddressesResponse)
		return ctx.Result(200, reply)
	}
}

func _MerchantAddress_SetDefaultAddress0_HTTP_Handler(srv MerchantAddressHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetDefaultAddressRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMerchantAddressSetDefaultAddress)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetDefaultAddress(ctx, req.(*SetDefaultAddressRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Address)
		return ctx.Result(200, reply)
	}
}

func _MerchantAddress_GetShippingAddress0_HTTP_Handler(srv MerchantAddressHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetShippingAddressRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMerchantAddressGetShippingAddress)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetShippingAddress(ctx, req.(*GetShippingAddressRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Address)
		return ctx.Result(200, reply)
	}
}

type MerchantAddressHTTPClient interface {
	BatchCreateAddresses(ctx context.Context, req *BatchCreateAddressesRequest, opts ...http.CallOption) (rsp *BatchCreateAddressesResponse, err error)
	CreateAddress(ctx context.Context, req *Address, opts ...http.CallOption) (rsp *Address, err error)
	DeleteAddress(ctx context.Context, req *DeleteAddressRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetAddress(ctx context.Context, req *GetAddressRequest, opts ...http.CallOption) (rsp *Address, err error)
	GetShippingAddress(ctx context.Context, req *GetShippingAddressRequest, opts ...http.CallOption) (rsp *Address, err error)
	ListAddresses(ctx context.Context, req *ListAddressesRequest, opts ...http.CallOption) (rsp *ListAddressesResponse, err error)
	SetDefaultAddress(ctx context.Context, req *SetDefaultAddressRequest, opts ...http.CallOption) (rsp *Address, err error)
	UpdateAddress(ctx context.Context, req *Address, opts ...http.CallOption) (rsp *Address, err error)
}

type MerchantAddressHTTPClientImpl struct {
	cc *http.Client
}

func NewMerchantAddressHTTPClient(client *http.Client) MerchantAddressHTTPClient {
	return &MerchantAddressHTTPClientImpl{client}
}

func (c *MerchantAddressHTTPClientImpl) BatchCreateAddresses(ctx context.Context, in *BatchCreateAddressesRequest, opts ...http.CallOption) (*BatchCreateAddressesResponse, error) {
	var out BatchCreateAddressesResponse
	pattern := "/v1/merchants/addresses/batch"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMerchantAddressBatchCreateAddresses))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MerchantAddressHTTPClientImpl) CreateAddress(ctx context.Context, in *Address, opts ...http.CallOption) (*Address, error) {
	var out Address
	pattern := "/v1/merchants/addresses"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMerchantAddressCreateAddress))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MerchantAddressHTTPClientImpl) DeleteAddress(ctx context.Context, in *DeleteAddressRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/merchants/addresses/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMerchantAddressDeleteAddress))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MerchantAddressHTTPClientImpl) GetAddress(ctx context.Context, in *GetAddressRequest, opts ...http.CallOption) (*Address, error) {
	var out Address
	pattern := "/v1/merchants/addresses/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMerchantAddressGetAddress))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MerchantAddressHTTPClientImpl) GetShippingAddress(ctx context.Context, in *GetShippingAddressRequest, opts ...http.CallOption) (*Address, error) {
	var out Address
	pattern := "/v1/merchants/addresses/shipping"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMerchantAddressGetShippingAddress))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MerchantAddressHTTPClientImpl) ListAddresses(ctx context.Context, in *ListAddressesRequest, opts ...http.CallOption) (*ListAddressesResponse, error) {
	var out ListAddressesResponse
	pattern := "/v1/merchants/addresses"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMerchantAddressListAddresses))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MerchantAddressHTTPClientImpl) SetDefaultAddress(ctx context.Context, in *SetDefaultAddressRequest, opts ...http.CallOption) (*Address, error) {
	var out Address
	pattern := "/v1/merchants/addresses/{id}/default"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMerchantAddressSetDefaultAddress))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MerchantAddressHTTPClientImpl) UpdateAddress(ctx context.Context, in *Address, opts ...http.CallOption) (*Address, error) {
	var out Address
	pattern := "/v1/merchants/addresses/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMerchantAddressUpdateAddress))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

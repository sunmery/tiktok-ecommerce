// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: address/v1/address.proto

package addressv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MerchantAddress_CreateAddress_FullMethodName        = "/ecommerce.merchant.v1.MerchantAddress/CreateAddress"
	MerchantAddress_BatchCreateAddresses_FullMethodName = "/ecommerce.merchant.v1.MerchantAddress/BatchCreateAddresses"
	MerchantAddress_UpdateAddress_FullMethodName        = "/ecommerce.merchant.v1.MerchantAddress/UpdateAddress"
	MerchantAddress_DeleteAddress_FullMethodName        = "/ecommerce.merchant.v1.MerchantAddress/DeleteAddress"
	MerchantAddress_GetAddress_FullMethodName           = "/ecommerce.merchant.v1.MerchantAddress/GetAddress"
	MerchantAddress_ListAddresses_FullMethodName        = "/ecommerce.merchant.v1.MerchantAddress/ListAddresses"
	MerchantAddress_SetDefaultAddress_FullMethodName    = "/ecommerce.merchant.v1.MerchantAddress/SetDefaultAddress"
	MerchantAddress_GetShippingAddress_FullMethodName   = "/ecommerce.merchant.v1.MerchantAddress/GetShippingAddress"
)

// MerchantAddressClient is the client API for MerchantAddress service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 商家地址服务接口定义
type MerchantAddressClient interface {
	// 创建商家地址（支持多类型地址）
	CreateAddress(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Address, error)
	// 批量导入商家地址（CSV/JSON格式）
	BatchCreateAddresses(ctx context.Context, in *BatchCreateAddressesRequest, opts ...grpc.CallOption) (*BatchCreateAddressesResponse, error)
	// 更新商家地址（支持部分更新）
	UpdateAddress(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Address, error)
	// 删除商家地址
	DeleteAddress(ctx context.Context, in *DeleteAddressRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取单个地址详情
	GetAddress(ctx context.Context, in *GetAddressRequest, opts ...grpc.CallOption) (*Address, error)
	// 列出商家所有地址（支持按类型过滤）
	ListAddresses(ctx context.Context, in *ListAddressesRequest, opts ...grpc.CallOption) (*ListAddressesResponse, error)
	// 设置默认地址（按地址类型）
	SetDefaultAddress(ctx context.Context, in *SetDefaultAddressRequest, opts ...grpc.CallOption) (*Address, error)
	// 获取发货地址（智能选择逻辑）
	GetShippingAddress(ctx context.Context, in *GetShippingAddressRequest, opts ...grpc.CallOption) (*Address, error)
}

type merchantAddressClient struct {
	cc grpc.ClientConnInterface
}

func NewMerchantAddressClient(cc grpc.ClientConnInterface) MerchantAddressClient {
	return &merchantAddressClient{cc}
}

func (c *merchantAddressClient) CreateAddress(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Address, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Address)
	err := c.cc.Invoke(ctx, MerchantAddress_CreateAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAddressClient) BatchCreateAddresses(ctx context.Context, in *BatchCreateAddressesRequest, opts ...grpc.CallOption) (*BatchCreateAddressesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchCreateAddressesResponse)
	err := c.cc.Invoke(ctx, MerchantAddress_BatchCreateAddresses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAddressClient) UpdateAddress(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Address, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Address)
	err := c.cc.Invoke(ctx, MerchantAddress_UpdateAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAddressClient) DeleteAddress(ctx context.Context, in *DeleteAddressRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MerchantAddress_DeleteAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAddressClient) GetAddress(ctx context.Context, in *GetAddressRequest, opts ...grpc.CallOption) (*Address, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Address)
	err := c.cc.Invoke(ctx, MerchantAddress_GetAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAddressClient) ListAddresses(ctx context.Context, in *ListAddressesRequest, opts ...grpc.CallOption) (*ListAddressesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAddressesResponse)
	err := c.cc.Invoke(ctx, MerchantAddress_ListAddresses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAddressClient) SetDefaultAddress(ctx context.Context, in *SetDefaultAddressRequest, opts ...grpc.CallOption) (*Address, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Address)
	err := c.cc.Invoke(ctx, MerchantAddress_SetDefaultAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAddressClient) GetShippingAddress(ctx context.Context, in *GetShippingAddressRequest, opts ...grpc.CallOption) (*Address, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Address)
	err := c.cc.Invoke(ctx, MerchantAddress_GetShippingAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerchantAddressServer is the server API for MerchantAddress service.
// All implementations must embed UnimplementedMerchantAddressServer
// for forward compatibility.
//
// 商家地址服务接口定义
type MerchantAddressServer interface {
	// 创建商家地址（支持多类型地址）
	CreateAddress(context.Context, *Address) (*Address, error)
	// 批量导入商家地址（CSV/JSON格式）
	BatchCreateAddresses(context.Context, *BatchCreateAddressesRequest) (*BatchCreateAddressesResponse, error)
	// 更新商家地址（支持部分更新）
	UpdateAddress(context.Context, *Address) (*Address, error)
	// 删除商家地址
	DeleteAddress(context.Context, *DeleteAddressRequest) (*emptypb.Empty, error)
	// 获取单个地址详情
	GetAddress(context.Context, *GetAddressRequest) (*Address, error)
	// 列出商家所有地址（支持按类型过滤）
	ListAddresses(context.Context, *ListAddressesRequest) (*ListAddressesResponse, error)
	// 设置默认地址（按地址类型）
	SetDefaultAddress(context.Context, *SetDefaultAddressRequest) (*Address, error)
	// 获取发货地址（智能选择逻辑）
	GetShippingAddress(context.Context, *GetShippingAddressRequest) (*Address, error)
	mustEmbedUnimplementedMerchantAddressServer()
}

// UnimplementedMerchantAddressServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMerchantAddressServer struct{}

func (UnimplementedMerchantAddressServer) CreateAddress(context.Context, *Address) (*Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAddress not implemented")
}
func (UnimplementedMerchantAddressServer) BatchCreateAddresses(context.Context, *BatchCreateAddressesRequest) (*BatchCreateAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateAddresses not implemented")
}
func (UnimplementedMerchantAddressServer) UpdateAddress(context.Context, *Address) (*Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAddress not implemented")
}
func (UnimplementedMerchantAddressServer) DeleteAddress(context.Context, *DeleteAddressRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAddress not implemented")
}
func (UnimplementedMerchantAddressServer) GetAddress(context.Context, *GetAddressRequest) (*Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddress not implemented")
}
func (UnimplementedMerchantAddressServer) ListAddresses(context.Context, *ListAddressesRequest) (*ListAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAddresses not implemented")
}
func (UnimplementedMerchantAddressServer) SetDefaultAddress(context.Context, *SetDefaultAddressRequest) (*Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultAddress not implemented")
}
func (UnimplementedMerchantAddressServer) GetShippingAddress(context.Context, *GetShippingAddressRequest) (*Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShippingAddress not implemented")
}
func (UnimplementedMerchantAddressServer) mustEmbedUnimplementedMerchantAddressServer() {}
func (UnimplementedMerchantAddressServer) testEmbeddedByValue()                         {}

// UnsafeMerchantAddressServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MerchantAddressServer will
// result in compilation errors.
type UnsafeMerchantAddressServer interface {
	mustEmbedUnimplementedMerchantAddressServer()
}

func RegisterMerchantAddressServer(s grpc.ServiceRegistrar, srv MerchantAddressServer) {
	// If the following call pancis, it indicates UnimplementedMerchantAddressServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MerchantAddress_ServiceDesc, srv)
}

func _MerchantAddress_CreateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAddressServer).CreateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAddress_CreateAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAddressServer).CreateAddress(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAddress_BatchCreateAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAddressServer).BatchCreateAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAddress_BatchCreateAddresses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAddressServer).BatchCreateAddresses(ctx, req.(*BatchCreateAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAddress_UpdateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAddressServer).UpdateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAddress_UpdateAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAddressServer).UpdateAddress(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAddress_DeleteAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAddressServer).DeleteAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAddress_DeleteAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAddressServer).DeleteAddress(ctx, req.(*DeleteAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAddress_GetAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAddressServer).GetAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAddress_GetAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAddressServer).GetAddress(ctx, req.(*GetAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAddress_ListAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAddressServer).ListAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAddress_ListAddresses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAddressServer).ListAddresses(ctx, req.(*ListAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAddress_SetDefaultAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAddressServer).SetDefaultAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAddress_SetDefaultAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAddressServer).SetDefaultAddress(ctx, req.(*SetDefaultAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAddress_GetShippingAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShippingAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAddressServer).GetShippingAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAddress_GetShippingAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAddressServer).GetShippingAddress(ctx, req.(*GetShippingAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MerchantAddress_ServiceDesc is the grpc.ServiceDesc for MerchantAddress service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MerchantAddress_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ecommerce.merchant.v1.MerchantAddress",
	HandlerType: (*MerchantAddressServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAddress",
			Handler:    _MerchantAddress_CreateAddress_Handler,
		},
		{
			MethodName: "BatchCreateAddresses",
			Handler:    _MerchantAddress_BatchCreateAddresses_Handler,
		},
		{
			MethodName: "UpdateAddress",
			Handler:    _MerchantAddress_UpdateAddress_Handler,
		},
		{
			MethodName: "DeleteAddress",
			Handler:    _MerchantAddress_DeleteAddress_Handler,
		},
		{
			MethodName: "GetAddress",
			Handler:    _MerchantAddress_GetAddress_Handler,
		},
		{
			MethodName: "ListAddresses",
			Handler:    _MerchantAddress_ListAddresses_Handler,
		},
		{
			MethodName: "SetDefaultAddress",
			Handler:    _MerchantAddress_SetDefaultAddress_Handler,
		},
		{
			MethodName: "GetShippingAddress",
			Handler:    _MerchantAddress_GetShippingAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "address/v1/address.proto",
}

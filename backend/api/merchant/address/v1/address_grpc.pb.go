// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: address/v1/address.proto

package merchantaddressv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MerchantAddresses_CreateMerchantAddress_FullMethodName        = "/ecommerce.merchantaddress.v1.MerchantAddresses/CreateMerchantAddress"
	MerchantAddresses_BatchCreateMerchantAddresses_FullMethodName = "/ecommerce.merchantaddress.v1.MerchantAddresses/BatchCreateMerchantAddresses"
	MerchantAddresses_ListAddresses_FullMethodName                = "/ecommerce.merchantaddress.v1.MerchantAddresses/ListAddresses"
	MerchantAddresses_ListFilterAddresses_FullMethodName          = "/ecommerce.merchantaddress.v1.MerchantAddresses/ListFilterAddresses"
	MerchantAddresses_GetDefaultAddress_FullMethodName            = "/ecommerce.merchantaddress.v1.MerchantAddresses/GetDefaultAddress"
	MerchantAddresses_GetDefaultAddresses_FullMethodName          = "/ecommerce.merchantaddress.v1.MerchantAddresses/GetDefaultAddresses"
	MerchantAddresses_UpdateMerchantAddress_FullMethodName        = "/ecommerce.merchantaddress.v1.MerchantAddresses/UpdateMerchantAddress"
	MerchantAddresses_DeletMerchanteAddress_FullMethodName        = "/ecommerce.merchantaddress.v1.MerchantAddresses/DeletMerchanteAddress"
	MerchantAddresses_GetMerchantAddress_FullMethodName           = "/ecommerce.merchantaddress.v1.MerchantAddresses/GetMerchantAddress"
	MerchantAddresses_SetDefaultMerchantAddress_FullMethodName    = "/ecommerce.merchantaddress.v1.MerchantAddresses/SetDefaultMerchantAddress"
)

// MerchantAddressesClient is the client API for MerchantAddresses service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 商家地址服务接口定义
type MerchantAddressesClient interface {
	// 创建商家地址（支持多类型地址）
	CreateMerchantAddress(ctx context.Context, in *MerchantAddress, opts ...grpc.CallOption) (*MerchantAddress, error)
	// 批量导入商家地址（CSV/JSON格式）
	BatchCreateMerchantAddresses(ctx context.Context, in *BatchCreateMerchantAddressesRequest, opts ...grpc.CallOption) (*BatchCreateMerchantAddressesReply, error)
	// 列出商家全部地址
	ListAddresses(ctx context.Context, in *ListAddressesRequest, opts ...grpc.CallOption) (*ListAddressesReply, error)
	// 列出商家地址（按地址类型过滤）
	ListFilterAddresses(ctx context.Context, in *ListFilterAddressesRequest, opts ...grpc.CallOption) (*ListAddressesReply, error)
	// 按照地址类型列出商家默认地址
	GetDefaultAddress(ctx context.Context, in *GetDefaultAddressRequest, opts ...grpc.CallOption) (*MerchantAddress, error)
	// 列出商家所有默认地址
	GetDefaultAddresses(ctx context.Context, in *GetDefaultAddressesRequest, opts ...grpc.CallOption) (*ListAddressesReply, error)
	// 更新商家地址（支持部分更新）
	UpdateMerchantAddress(ctx context.Context, in *MerchantAddress, opts ...grpc.CallOption) (*MerchantAddress, error)
	// 删除商家地址
	DeletMerchanteAddress(ctx context.Context, in *DeletMerchanteAddressRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取单个地址详情
	GetMerchantAddress(ctx context.Context, in *GetMerchantAddressRequest, opts ...grpc.CallOption) (*MerchantAddress, error)
	// 设置默认地址（按地址类型）
	SetDefaultMerchantAddress(ctx context.Context, in *SetDefaultMerchantAddressRequest, opts ...grpc.CallOption) (*MerchantAddress, error)
}

type merchantAddressesClient struct {
	cc grpc.ClientConnInterface
}

func NewMerchantAddressesClient(cc grpc.ClientConnInterface) MerchantAddressesClient {
	return &merchantAddressesClient{cc}
}

func (c *merchantAddressesClient) CreateMerchantAddress(ctx context.Context, in *MerchantAddress, opts ...grpc.CallOption) (*MerchantAddress, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MerchantAddress)
	err := c.cc.Invoke(ctx, MerchantAddresses_CreateMerchantAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAddressesClient) BatchCreateMerchantAddresses(ctx context.Context, in *BatchCreateMerchantAddressesRequest, opts ...grpc.CallOption) (*BatchCreateMerchantAddressesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchCreateMerchantAddressesReply)
	err := c.cc.Invoke(ctx, MerchantAddresses_BatchCreateMerchantAddresses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAddressesClient) ListAddresses(ctx context.Context, in *ListAddressesRequest, opts ...grpc.CallOption) (*ListAddressesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAddressesReply)
	err := c.cc.Invoke(ctx, MerchantAddresses_ListAddresses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAddressesClient) ListFilterAddresses(ctx context.Context, in *ListFilterAddressesRequest, opts ...grpc.CallOption) (*ListAddressesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAddressesReply)
	err := c.cc.Invoke(ctx, MerchantAddresses_ListFilterAddresses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAddressesClient) GetDefaultAddress(ctx context.Context, in *GetDefaultAddressRequest, opts ...grpc.CallOption) (*MerchantAddress, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MerchantAddress)
	err := c.cc.Invoke(ctx, MerchantAddresses_GetDefaultAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAddressesClient) GetDefaultAddresses(ctx context.Context, in *GetDefaultAddressesRequest, opts ...grpc.CallOption) (*ListAddressesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAddressesReply)
	err := c.cc.Invoke(ctx, MerchantAddresses_GetDefaultAddresses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAddressesClient) UpdateMerchantAddress(ctx context.Context, in *MerchantAddress, opts ...grpc.CallOption) (*MerchantAddress, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MerchantAddress)
	err := c.cc.Invoke(ctx, MerchantAddresses_UpdateMerchantAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAddressesClient) DeletMerchanteAddress(ctx context.Context, in *DeletMerchanteAddressRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MerchantAddresses_DeletMerchanteAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAddressesClient) GetMerchantAddress(ctx context.Context, in *GetMerchantAddressRequest, opts ...grpc.CallOption) (*MerchantAddress, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MerchantAddress)
	err := c.cc.Invoke(ctx, MerchantAddresses_GetMerchantAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAddressesClient) SetDefaultMerchantAddress(ctx context.Context, in *SetDefaultMerchantAddressRequest, opts ...grpc.CallOption) (*MerchantAddress, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MerchantAddress)
	err := c.cc.Invoke(ctx, MerchantAddresses_SetDefaultMerchantAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerchantAddressesServer is the server API for MerchantAddresses service.
// All implementations must embed UnimplementedMerchantAddressesServer
// for forward compatibility.
//
// 商家地址服务接口定义
type MerchantAddressesServer interface {
	// 创建商家地址（支持多类型地址）
	CreateMerchantAddress(context.Context, *MerchantAddress) (*MerchantAddress, error)
	// 批量导入商家地址（CSV/JSON格式）
	BatchCreateMerchantAddresses(context.Context, *BatchCreateMerchantAddressesRequest) (*BatchCreateMerchantAddressesReply, error)
	// 列出商家全部地址
	ListAddresses(context.Context, *ListAddressesRequest) (*ListAddressesReply, error)
	// 列出商家地址（按地址类型过滤）
	ListFilterAddresses(context.Context, *ListFilterAddressesRequest) (*ListAddressesReply, error)
	// 按照地址类型列出商家默认地址
	GetDefaultAddress(context.Context, *GetDefaultAddressRequest) (*MerchantAddress, error)
	// 列出商家所有默认地址
	GetDefaultAddresses(context.Context, *GetDefaultAddressesRequest) (*ListAddressesReply, error)
	// 更新商家地址（支持部分更新）
	UpdateMerchantAddress(context.Context, *MerchantAddress) (*MerchantAddress, error)
	// 删除商家地址
	DeletMerchanteAddress(context.Context, *DeletMerchanteAddressRequest) (*emptypb.Empty, error)
	// 获取单个地址详情
	GetMerchantAddress(context.Context, *GetMerchantAddressRequest) (*MerchantAddress, error)
	// 设置默认地址（按地址类型）
	SetDefaultMerchantAddress(context.Context, *SetDefaultMerchantAddressRequest) (*MerchantAddress, error)
	mustEmbedUnimplementedMerchantAddressesServer()
}

// UnimplementedMerchantAddressesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMerchantAddressesServer struct{}

func (UnimplementedMerchantAddressesServer) CreateMerchantAddress(context.Context, *MerchantAddress) (*MerchantAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMerchantAddress not implemented")
}
func (UnimplementedMerchantAddressesServer) BatchCreateMerchantAddresses(context.Context, *BatchCreateMerchantAddressesRequest) (*BatchCreateMerchantAddressesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateMerchantAddresses not implemented")
}
func (UnimplementedMerchantAddressesServer) ListAddresses(context.Context, *ListAddressesRequest) (*ListAddressesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAddresses not implemented")
}
func (UnimplementedMerchantAddressesServer) ListFilterAddresses(context.Context, *ListFilterAddressesRequest) (*ListAddressesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFilterAddresses not implemented")
}
func (UnimplementedMerchantAddressesServer) GetDefaultAddress(context.Context, *GetDefaultAddressRequest) (*MerchantAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultAddress not implemented")
}
func (UnimplementedMerchantAddressesServer) GetDefaultAddresses(context.Context, *GetDefaultAddressesRequest) (*ListAddressesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultAddresses not implemented")
}
func (UnimplementedMerchantAddressesServer) UpdateMerchantAddress(context.Context, *MerchantAddress) (*MerchantAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMerchantAddress not implemented")
}
func (UnimplementedMerchantAddressesServer) DeletMerchanteAddress(context.Context, *DeletMerchanteAddressRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletMerchanteAddress not implemented")
}
func (UnimplementedMerchantAddressesServer) GetMerchantAddress(context.Context, *GetMerchantAddressRequest) (*MerchantAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchantAddress not implemented")
}
func (UnimplementedMerchantAddressesServer) SetDefaultMerchantAddress(context.Context, *SetDefaultMerchantAddressRequest) (*MerchantAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultMerchantAddress not implemented")
}
func (UnimplementedMerchantAddressesServer) mustEmbedUnimplementedMerchantAddressesServer() {}
func (UnimplementedMerchantAddressesServer) testEmbeddedByValue()                           {}

// UnsafeMerchantAddressesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MerchantAddressesServer will
// result in compilation errors.
type UnsafeMerchantAddressesServer interface {
	mustEmbedUnimplementedMerchantAddressesServer()
}

func RegisterMerchantAddressesServer(s grpc.ServiceRegistrar, srv MerchantAddressesServer) {
	// If the following call pancis, it indicates UnimplementedMerchantAddressesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MerchantAddresses_ServiceDesc, srv)
}

func _MerchantAddresses_CreateMerchantAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAddressesServer).CreateMerchantAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAddresses_CreateMerchantAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAddressesServer).CreateMerchantAddress(ctx, req.(*MerchantAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAddresses_BatchCreateMerchantAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateMerchantAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAddressesServer).BatchCreateMerchantAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAddresses_BatchCreateMerchantAddresses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAddressesServer).BatchCreateMerchantAddresses(ctx, req.(*BatchCreateMerchantAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAddresses_ListAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAddressesServer).ListAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAddresses_ListAddresses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAddressesServer).ListAddresses(ctx, req.(*ListAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAddresses_ListFilterAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilterAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAddressesServer).ListFilterAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAddresses_ListFilterAddresses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAddressesServer).ListFilterAddresses(ctx, req.(*ListFilterAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAddresses_GetDefaultAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAddressesServer).GetDefaultAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAddresses_GetDefaultAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAddressesServer).GetDefaultAddress(ctx, req.(*GetDefaultAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAddresses_GetDefaultAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAddressesServer).GetDefaultAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAddresses_GetDefaultAddresses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAddressesServer).GetDefaultAddresses(ctx, req.(*GetDefaultAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAddresses_UpdateMerchantAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAddressesServer).UpdateMerchantAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAddresses_UpdateMerchantAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAddressesServer).UpdateMerchantAddress(ctx, req.(*MerchantAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAddresses_DeletMerchanteAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletMerchanteAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAddressesServer).DeletMerchanteAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAddresses_DeletMerchanteAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAddressesServer).DeletMerchanteAddress(ctx, req.(*DeletMerchanteAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAddresses_GetMerchantAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMerchantAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAddressesServer).GetMerchantAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAddresses_GetMerchantAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAddressesServer).GetMerchantAddress(ctx, req.(*GetMerchantAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAddresses_SetDefaultMerchantAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultMerchantAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAddressesServer).SetDefaultMerchantAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAddresses_SetDefaultMerchantAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAddressesServer).SetDefaultMerchantAddress(ctx, req.(*SetDefaultMerchantAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MerchantAddresses_ServiceDesc is the grpc.ServiceDesc for MerchantAddresses service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MerchantAddresses_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ecommerce.merchantaddress.v1.MerchantAddresses",
	HandlerType: (*MerchantAddressesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMerchantAddress",
			Handler:    _MerchantAddresses_CreateMerchantAddress_Handler,
		},
		{
			MethodName: "BatchCreateMerchantAddresses",
			Handler:    _MerchantAddresses_BatchCreateMerchantAddresses_Handler,
		},
		{
			MethodName: "ListAddresses",
			Handler:    _MerchantAddresses_ListAddresses_Handler,
		},
		{
			MethodName: "ListFilterAddresses",
			Handler:    _MerchantAddresses_ListFilterAddresses_Handler,
		},
		{
			MethodName: "GetDefaultAddress",
			Handler:    _MerchantAddresses_GetDefaultAddress_Handler,
		},
		{
			MethodName: "GetDefaultAddresses",
			Handler:    _MerchantAddresses_GetDefaultAddresses_Handler,
		},
		{
			MethodName: "UpdateMerchantAddress",
			Handler:    _MerchantAddresses_UpdateMerchantAddress_Handler,
		},
		{
			MethodName: "DeletMerchanteAddress",
			Handler:    _MerchantAddresses_DeletMerchanteAddress_Handler,
		},
		{
			MethodName: "GetMerchantAddress",
			Handler:    _MerchantAddresses_GetMerchantAddress_Handler,
		},
		{
			MethodName: "SetDefaultMerchantAddress",
			Handler:    _MerchantAddresses_SetDefaultMerchantAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "address/v1/address.proto",
}

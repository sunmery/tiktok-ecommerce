// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: order/v1/order.proto

package merchantorderv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	orderv1 "backend/api/order/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = orderv1.PaymentStatus(0)
)

// define the regex for a UUID once up-front
var _order_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on GetMerchantByOrderIdReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMerchantByOrderIdReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMerchantByOrderIdReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMerchantByOrderIdReqMultiError, or nil if none found.
func (m *GetMerchantByOrderIdReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMerchantByOrderIdReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	if len(errors) > 0 {
		return GetMerchantByOrderIdReqMultiError(errors)
	}

	return nil
}

// GetMerchantByOrderIdReqMultiError is an error wrapping multiple validation
// errors returned by GetMerchantByOrderIdReq.ValidateAll() if the designated
// constraints aren't met.
type GetMerchantByOrderIdReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMerchantByOrderIdReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMerchantByOrderIdReqMultiError) AllErrors() []error { return m }

// GetMerchantByOrderIdReqValidationError is the validation error returned by
// GetMerchantByOrderIdReq.Validate if the designated constraints aren't met.
type GetMerchantByOrderIdReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMerchantByOrderIdReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMerchantByOrderIdReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMerchantByOrderIdReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMerchantByOrderIdReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMerchantByOrderIdReqValidationError) ErrorName() string {
	return "GetMerchantByOrderIdReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetMerchantByOrderIdReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMerchantByOrderIdReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMerchantByOrderIdReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMerchantByOrderIdReqValidationError{}

// Validate checks the field values on GetMerchantByOrderIdReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMerchantByOrderIdReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMerchantByOrderIdReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMerchantByOrderIdReplyMultiError, or nil if none found.
func (m *GetMerchantByOrderIdReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMerchantByOrderIdReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MerchantId

	if len(errors) > 0 {
		return GetMerchantByOrderIdReplyMultiError(errors)
	}

	return nil
}

// GetMerchantByOrderIdReplyMultiError is an error wrapping multiple validation
// errors returned by GetMerchantByOrderIdReply.ValidateAll() if the
// designated constraints aren't met.
type GetMerchantByOrderIdReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMerchantByOrderIdReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMerchantByOrderIdReplyMultiError) AllErrors() []error { return m }

// GetMerchantByOrderIdReplyValidationError is the validation error returned by
// GetMerchantByOrderIdReply.Validate if the designated constraints aren't met.
type GetMerchantByOrderIdReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMerchantByOrderIdReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMerchantByOrderIdReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMerchantByOrderIdReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMerchantByOrderIdReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMerchantByOrderIdReplyValidationError) ErrorName() string {
	return "GetMerchantByOrderIdReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetMerchantByOrderIdReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMerchantByOrderIdReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMerchantByOrderIdReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMerchantByOrderIdReplyValidationError{}

// Validate checks the field values on GetMerchantOrdersReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMerchantOrdersReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMerchantOrdersReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMerchantOrdersReqMultiError, or nil if none found.
func (m *GetMerchantOrdersReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMerchantOrdersReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MerchantId

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetMerchantOrdersReqMultiError(errors)
	}

	return nil
}

// GetMerchantOrdersReqMultiError is an error wrapping multiple validation
// errors returned by GetMerchantOrdersReq.ValidateAll() if the designated
// constraints aren't met.
type GetMerchantOrdersReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMerchantOrdersReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMerchantOrdersReqMultiError) AllErrors() []error { return m }

// GetMerchantOrdersReqValidationError is the validation error returned by
// GetMerchantOrdersReq.Validate if the designated constraints aren't met.
type GetMerchantOrdersReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMerchantOrdersReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMerchantOrdersReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMerchantOrdersReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMerchantOrdersReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMerchantOrdersReqValidationError) ErrorName() string {
	return "GetMerchantOrdersReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetMerchantOrdersReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMerchantOrdersReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMerchantOrdersReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMerchantOrdersReqValidationError{}

// Validate checks the field values on OrderItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderItemMultiError, or nil
// if none found.
func (m *OrderItem) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SubOrderId

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderItemValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderItemValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderItemValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Cost

	// no validation rules for Email

	if utf8.RuneCountInString(m.GetUserId()) != 32 {
		err := OrderItemValidationError{
			field:  "UserId",
			reason: "value length must be 32 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = OrderItemValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderItemValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderItemValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderItemValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetCurrency()) != 3 {
		err := OrderItemValidationError{
			field:  "Currency",
			reason: "value length must be 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	// no validation rules for PaymentStatus

	// no validation rules for ShippingStatus

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderItemValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderItemValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderItemValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderItemValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderItemValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderItemValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OrderItemMultiError(errors)
	}

	return nil
}

func (m *OrderItem) _validateUuid(uuid string) error {
	if matched := _order_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// OrderItemMultiError is an error wrapping multiple validation errors returned
// by OrderItem.ValidateAll() if the designated constraints aren't met.
type OrderItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderItemMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderItemMultiError) AllErrors() []error { return m }

// OrderItemValidationError is the validation error returned by
// OrderItem.Validate if the designated constraints aren't met.
type OrderItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderItemValidationError) ErrorName() string { return "OrderItemValidationError" }

// Error satisfies the builtin error interface
func (e OrderItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderItemValidationError{}

// Validate checks the field values on MerchantOrder with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MerchantOrder) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MerchantOrder with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MerchantOrderMultiError, or
// nil if none found.
func (m *MerchantOrder) ValidateAll() error {
	return m.validate(true)
}

func (m *MerchantOrder) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MerchantOrderValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MerchantOrderValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MerchantOrderValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for OrderId

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MerchantOrderValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MerchantOrderValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MerchantOrderValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MerchantOrderMultiError(errors)
	}

	return nil
}

// MerchantOrderMultiError is an error wrapping multiple validation errors
// returned by MerchantOrder.ValidateAll() if the designated constraints
// aren't met.
type MerchantOrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MerchantOrderMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MerchantOrderMultiError) AllErrors() []error { return m }

// MerchantOrderValidationError is the validation error returned by
// MerchantOrder.Validate if the designated constraints aren't met.
type MerchantOrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MerchantOrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MerchantOrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MerchantOrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MerchantOrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MerchantOrderValidationError) ErrorName() string { return "MerchantOrderValidationError" }

// Error satisfies the builtin error interface
func (e MerchantOrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMerchantOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MerchantOrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MerchantOrderValidationError{}

// Validate checks the field values on GetMerchantOrdersReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMerchantOrdersReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMerchantOrdersReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMerchantOrdersReplyMultiError, or nil if none found.
func (m *GetMerchantOrdersReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMerchantOrdersReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMerchantOrdersReplyValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMerchantOrdersReplyValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMerchantOrdersReplyValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetMerchantOrdersReplyMultiError(errors)
	}

	return nil
}

// GetMerchantOrdersReplyMultiError is an error wrapping multiple validation
// errors returned by GetMerchantOrdersReply.ValidateAll() if the designated
// constraints aren't met.
type GetMerchantOrdersReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMerchantOrdersReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMerchantOrdersReplyMultiError) AllErrors() []error { return m }

// GetMerchantOrdersReplyValidationError is the validation error returned by
// GetMerchantOrdersReply.Validate if the designated constraints aren't met.
type GetMerchantOrdersReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMerchantOrdersReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMerchantOrdersReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMerchantOrdersReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMerchantOrdersReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMerchantOrdersReplyValidationError) ErrorName() string {
	return "GetMerchantOrdersReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetMerchantOrdersReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMerchantOrdersReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMerchantOrdersReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMerchantOrdersReplyValidationError{}

// Validate checks the field values on ReceiverAddress with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReceiverAddress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReceiverAddress with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReceiverAddressMultiError, or nil if none found.
func (m *ReceiverAddress) ValidateAll() error {
	return m.validate(true)
}

func (m *ReceiverAddress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Phone

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceiverAddressValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceiverAddressValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceiverAddressValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReceiverAddressMultiError(errors)
	}

	return nil
}

// ReceiverAddressMultiError is an error wrapping multiple validation errors
// returned by ReceiverAddress.ValidateAll() if the designated constraints
// aren't met.
type ReceiverAddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReceiverAddressMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReceiverAddressMultiError) AllErrors() []error { return m }

// ReceiverAddressValidationError is the validation error returned by
// ReceiverAddress.Validate if the designated constraints aren't met.
type ReceiverAddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReceiverAddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReceiverAddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReceiverAddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReceiverAddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReceiverAddressValidationError) ErrorName() string { return "ReceiverAddressValidationError" }

// Error satisfies the builtin error interface
func (e ReceiverAddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReceiverAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReceiverAddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReceiverAddressValidationError{}

// Validate checks the field values on CreateOrderShipReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrderShipReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrderShipReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrderShipReqMultiError, or nil if none found.
func (m *CreateOrderShipReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderShipReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SubOrderId

	// no validation rules for TrackingNumber

	// no validation rules for Carrier

	// no validation rules for Delivery

	// no validation rules for ShippingFee

	if all {
		switch v := interface{}(m.GetShippingAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrderShipReqValidationError{
					field:  "ShippingAddress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrderShipReqValidationError{
					field:  "ShippingAddress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShippingAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrderShipReqValidationError{
				field:  "ShippingAddress",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrderShipReqMultiError(errors)
	}

	return nil
}

// CreateOrderShipReqMultiError is an error wrapping multiple validation errors
// returned by CreateOrderShipReq.ValidateAll() if the designated constraints
// aren't met.
type CreateOrderShipReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderShipReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderShipReqMultiError) AllErrors() []error { return m }

// CreateOrderShipReqValidationError is the validation error returned by
// CreateOrderShipReq.Validate if the designated constraints aren't met.
type CreateOrderShipReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderShipReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderShipReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderShipReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderShipReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderShipReqValidationError) ErrorName() string {
	return "CreateOrderShipReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrderShipReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderShipReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderShipReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderShipReqValidationError{}

// Validate checks the field values on CreateOrderShipReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrderShipReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrderShipReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrderShipReplyMultiError, or nil if none found.
func (m *CreateOrderShipReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderShipReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrderShipReplyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrderShipReplyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrderShipReplyValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrderShipReplyMultiError(errors)
	}

	return nil
}

// CreateOrderShipReplyMultiError is an error wrapping multiple validation
// errors returned by CreateOrderShipReply.ValidateAll() if the designated
// constraints aren't met.
type CreateOrderShipReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderShipReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderShipReplyMultiError) AllErrors() []error { return m }

// CreateOrderShipReplyValidationError is the validation error returned by
// CreateOrderShipReply.Validate if the designated constraints aren't met.
type CreateOrderShipReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderShipReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderShipReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderShipReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderShipReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderShipReplyValidationError) ErrorName() string {
	return "CreateOrderShipReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrderShipReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderShipReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderShipReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderShipReplyValidationError{}

// Validate checks the field values on UpdateOrderShippingStatusReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrderShippingStatusReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrderShippingStatusReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrderShippingStatusReqMultiError, or nil if none found.
func (m *UpdateOrderShippingStatusReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrderShippingStatusReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MerchantId

	// no validation rules for SubOrderId

	// no validation rules for TrackingNumber

	// no validation rules for Carrier

	if all {
		switch v := interface{}(m.GetDelivery()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrderShippingStatusReqValidationError{
					field:  "Delivery",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrderShippingStatusReqValidationError{
					field:  "Delivery",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDelivery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrderShippingStatusReqValidationError{
				field:  "Delivery",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ShippingStatus

	// no validation rules for ShippingFee

	if all {
		switch v := interface{}(m.GetShippingAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrderShippingStatusReqValidationError{
					field:  "ShippingAddress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrderShippingStatusReqValidationError{
					field:  "ShippingAddress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShippingAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrderShippingStatusReqValidationError{
				field:  "ShippingAddress",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOrderShippingStatusReqMultiError(errors)
	}

	return nil
}

// UpdateOrderShippingStatusReqMultiError is an error wrapping multiple
// validation errors returned by UpdateOrderShippingStatusReq.ValidateAll() if
// the designated constraints aren't met.
type UpdateOrderShippingStatusReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrderShippingStatusReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrderShippingStatusReqMultiError) AllErrors() []error { return m }

// UpdateOrderShippingStatusReqValidationError is the validation error returned
// by UpdateOrderShippingStatusReq.Validate if the designated constraints
// aren't met.
type UpdateOrderShippingStatusReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrderShippingStatusReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrderShippingStatusReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrderShippingStatusReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrderShippingStatusReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrderShippingStatusReqValidationError) ErrorName() string {
	return "UpdateOrderShippingStatusReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrderShippingStatusReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrderShippingStatusReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrderShippingStatusReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrderShippingStatusReqValidationError{}

// Validate checks the field values on UpdateOrderShippingStatusReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrderShippingStatusReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrderShippingStatusReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateOrderShippingStatusReplyMultiError, or nil if none found.
func (m *UpdateOrderShippingStatusReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrderShippingStatusReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrderShippingStatusReplyValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrderShippingStatusReplyValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrderShippingStatusReplyValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOrderShippingStatusReplyMultiError(errors)
	}

	return nil
}

// UpdateOrderShippingStatusReplyMultiError is an error wrapping multiple
// validation errors returned by UpdateOrderShippingStatusReply.ValidateAll()
// if the designated constraints aren't met.
type UpdateOrderShippingStatusReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrderShippingStatusReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrderShippingStatusReplyMultiError) AllErrors() []error { return m }

// UpdateOrderShippingStatusReplyValidationError is the validation error
// returned by UpdateOrderShippingStatusReply.Validate if the designated
// constraints aren't met.
type UpdateOrderShippingStatusReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrderShippingStatusReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrderShippingStatusReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrderShippingStatusReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrderShippingStatusReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrderShippingStatusReplyValidationError) ErrorName() string {
	return "UpdateOrderShippingStatusReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrderShippingStatusReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrderShippingStatusReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrderShippingStatusReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrderShippingStatusReplyValidationError{}

// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: order/v1/order.proto

package merchantorderv1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationOrderGetMerchantByOrderId = "/ecommerce.merchantorder.v1.Order/GetMerchantByOrderId"
const OperationOrderGetMerchantOrders = "/ecommerce.merchantorder.v1.Order/GetMerchantOrders"
const OperationOrderShipOrder = "/ecommerce.merchantorder.v1.Order/ShipOrder"
const OperationOrderUpdateOrderShippingStatus = "/ecommerce.merchantorder.v1.Order/UpdateOrderShippingStatus"

type OrderHTTPServer interface {
	// GetMerchantByOrderId 根据订单ID查找商家
	GetMerchantByOrderId(context.Context, *GetMerchantByOrderIdReq) (*GetMerchantByOrderIdReply, error)
	// GetMerchantOrders 查询商家订单列表
	GetMerchantOrders(context.Context, *GetMerchantOrdersReq) (*GetMerchantOrdersReply, error)
	// ShipOrder 商家发货
	ShipOrder(context.Context, *ShipOrderReq) (*ShipOrderReply, error)
	// UpdateOrderShippingStatus 更新订单货运状态
	UpdateOrderShippingStatus(context.Context, *UpdateOrderShippingStatusReq) (*UpdateOrderShippingStatusReply, error)
}

func RegisterOrderHTTPServer(s *http.Server, srv OrderHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/merchants/orders", _Order_GetMerchantOrders0_HTTP_Handler(srv))
	r.GET("/v1/merchants/orders/{order_id}", _Order_GetMerchantByOrderId0_HTTP_Handler(srv))
	r.PUT("/v1/merchants/orders/ship/{sub_order_id}", _Order_ShipOrder0_HTTP_Handler(srv))
	r.PUT("/v1/merchants/orders/ship/{sub_order_id}/status", _Order_UpdateOrderShippingStatus0_HTTP_Handler(srv))
}

func _Order_GetMerchantOrders0_HTTP_Handler(srv OrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMerchantOrdersReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderGetMerchantOrders)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMerchantOrders(ctx, req.(*GetMerchantOrdersReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMerchantOrdersReply)
		return ctx.Result(200, reply)
	}
}

func _Order_GetMerchantByOrderId0_HTTP_Handler(srv OrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMerchantByOrderIdReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderGetMerchantByOrderId)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMerchantByOrderId(ctx, req.(*GetMerchantByOrderIdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMerchantByOrderIdReply)
		return ctx.Result(200, reply)
	}
}

func _Order_ShipOrder0_HTTP_Handler(srv OrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ShipOrderReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderShipOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ShipOrder(ctx, req.(*ShipOrderReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ShipOrderReply)
		return ctx.Result(200, reply)
	}
}

func _Order_UpdateOrderShippingStatus0_HTTP_Handler(srv OrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateOrderShippingStatusReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderUpdateOrderShippingStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateOrderShippingStatus(ctx, req.(*UpdateOrderShippingStatusReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateOrderShippingStatusReply)
		return ctx.Result(200, reply)
	}
}

type OrderHTTPClient interface {
	GetMerchantByOrderId(ctx context.Context, req *GetMerchantByOrderIdReq, opts ...http.CallOption) (rsp *GetMerchantByOrderIdReply, err error)
	GetMerchantOrders(ctx context.Context, req *GetMerchantOrdersReq, opts ...http.CallOption) (rsp *GetMerchantOrdersReply, err error)
	ShipOrder(ctx context.Context, req *ShipOrderReq, opts ...http.CallOption) (rsp *ShipOrderReply, err error)
	UpdateOrderShippingStatus(ctx context.Context, req *UpdateOrderShippingStatusReq, opts ...http.CallOption) (rsp *UpdateOrderShippingStatusReply, err error)
}

type OrderHTTPClientImpl struct {
	cc *http.Client
}

func NewOrderHTTPClient(client *http.Client) OrderHTTPClient {
	return &OrderHTTPClientImpl{client}
}

func (c *OrderHTTPClientImpl) GetMerchantByOrderId(ctx context.Context, in *GetMerchantByOrderIdReq, opts ...http.CallOption) (*GetMerchantByOrderIdReply, error) {
	var out GetMerchantByOrderIdReply
	pattern := "/v1/merchants/orders/{order_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOrderGetMerchantByOrderId))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrderHTTPClientImpl) GetMerchantOrders(ctx context.Context, in *GetMerchantOrdersReq, opts ...http.CallOption) (*GetMerchantOrdersReply, error) {
	var out GetMerchantOrdersReply
	pattern := "/v1/merchants/orders"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOrderGetMerchantOrders))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrderHTTPClientImpl) ShipOrder(ctx context.Context, in *ShipOrderReq, opts ...http.CallOption) (*ShipOrderReply, error) {
	var out ShipOrderReply
	pattern := "/v1/merchants/orders/ship/{sub_order_id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrderShipOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrderHTTPClientImpl) UpdateOrderShippingStatus(ctx context.Context, in *UpdateOrderShippingStatusReq, opts ...http.CallOption) (*UpdateOrderShippingStatusReply, error) {
	var out UpdateOrderShippingStatusReply
	pattern := "/v1/merchants/orders/ship/{sub_order_id}/status"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrderUpdateOrderShippingStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: inventory/v1/inventory.proto

package inventoryv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetProductStockRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductStockRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductStockRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductStockRequestMultiError, or nil if none found.
func (m *GetProductStockRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductStockRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductId

	// no validation rules for MerchantId

	if len(errors) > 0 {
		return GetProductStockRequestMultiError(errors)
	}

	return nil
}

// GetProductStockRequestMultiError is an error wrapping multiple validation
// errors returned by GetProductStockRequest.ValidateAll() if the designated
// constraints aren't met.
type GetProductStockRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductStockRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductStockRequestMultiError) AllErrors() []error { return m }

// GetProductStockRequestValidationError is the validation error returned by
// GetProductStockRequest.Validate if the designated constraints aren't met.
type GetProductStockRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductStockRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductStockRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductStockRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductStockRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductStockRequestValidationError) ErrorName() string {
	return "GetProductStockRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductStockRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductStockRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductStockRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductStockRequestValidationError{}

// Validate checks the field values on GetProductStockResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductStockResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductStockResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductStockResponseMultiError, or nil if none found.
func (m *GetProductStockResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductStockResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductId

	// no validation rules for MerchantId

	// no validation rules for Stock

	// no validation rules for AlertThreshold

	// no validation rules for IsLowStock

	if len(errors) > 0 {
		return GetProductStockResponseMultiError(errors)
	}

	return nil
}

// GetProductStockResponseMultiError is an error wrapping multiple validation
// errors returned by GetProductStockResponse.ValidateAll() if the designated
// constraints aren't met.
type GetProductStockResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductStockResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductStockResponseMultiError) AllErrors() []error { return m }

// GetProductStockResponseValidationError is the validation error returned by
// GetProductStockResponse.Validate if the designated constraints aren't met.
type GetProductStockResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductStockResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductStockResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductStockResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductStockResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductStockResponseValidationError) ErrorName() string {
	return "GetProductStockResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductStockResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductStockResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductStockResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductStockResponseValidationError{}

// Validate checks the field values on UpdateProductStockRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProductStockRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProductStockRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProductStockRequestMultiError, or nil if none found.
func (m *UpdateProductStockRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProductStockRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductId

	// no validation rules for MerchantId

	// no validation rules for Stock

	// no validation rules for Reason

	if len(errors) > 0 {
		return UpdateProductStockRequestMultiError(errors)
	}

	return nil
}

// UpdateProductStockRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateProductStockRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateProductStockRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProductStockRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProductStockRequestMultiError) AllErrors() []error { return m }

// UpdateProductStockRequestValidationError is the validation error returned by
// UpdateProductStockRequest.Validate if the designated constraints aren't met.
type UpdateProductStockRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductStockRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductStockRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductStockRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductStockRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductStockRequestValidationError) ErrorName() string {
	return "UpdateProductStockRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProductStockRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductStockRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductStockRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductStockRequestValidationError{}

// Validate checks the field values on UpdateProductStockResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProductStockResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProductStockResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProductStockResponseMultiError, or nil if none found.
func (m *UpdateProductStockResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProductStockResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateProductStockResponseMultiError(errors)
	}

	return nil
}

// UpdateProductStockResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateProductStockResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateProductStockResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProductStockResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProductStockResponseMultiError) AllErrors() []error { return m }

// UpdateProductStockResponseValidationError is the validation error returned
// by UpdateProductStockResponse.Validate if the designated constraints aren't met.
type UpdateProductStockResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductStockResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductStockResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductStockResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductStockResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductStockResponseValidationError) ErrorName() string {
	return "UpdateProductStockResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProductStockResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductStockResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductStockResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductStockResponseValidationError{}

// Validate checks the field values on SetStockAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetStockAlertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetStockAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetStockAlertRequestMultiError, or nil if none found.
func (m *SetStockAlertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetStockAlertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductId

	// no validation rules for MerchantId

	// no validation rules for Threshold

	if len(errors) > 0 {
		return SetStockAlertRequestMultiError(errors)
	}

	return nil
}

// SetStockAlertRequestMultiError is an error wrapping multiple validation
// errors returned by SetStockAlertRequest.ValidateAll() if the designated
// constraints aren't met.
type SetStockAlertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetStockAlertRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetStockAlertRequestMultiError) AllErrors() []error { return m }

// SetStockAlertRequestValidationError is the validation error returned by
// SetStockAlertRequest.Validate if the designated constraints aren't met.
type SetStockAlertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetStockAlertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetStockAlertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetStockAlertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetStockAlertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetStockAlertRequestValidationError) ErrorName() string {
	return "SetStockAlertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetStockAlertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetStockAlertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetStockAlertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetStockAlertRequestValidationError{}

// Validate checks the field values on SetStockAlertResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetStockAlertResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetStockAlertResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetStockAlertResponseMultiError, or nil if none found.
func (m *SetStockAlertResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetStockAlertResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return SetStockAlertResponseMultiError(errors)
	}

	return nil
}

// SetStockAlertResponseMultiError is an error wrapping multiple validation
// errors returned by SetStockAlertResponse.ValidateAll() if the designated
// constraints aren't met.
type SetStockAlertResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetStockAlertResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetStockAlertResponseMultiError) AllErrors() []error { return m }

// SetStockAlertResponseValidationError is the validation error returned by
// SetStockAlertResponse.Validate if the designated constraints aren't met.
type SetStockAlertResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetStockAlertResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetStockAlertResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetStockAlertResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetStockAlertResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetStockAlertResponseValidationError) ErrorName() string {
	return "SetStockAlertResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetStockAlertResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetStockAlertResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetStockAlertResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetStockAlertResponseValidationError{}

// Validate checks the field values on GetStockAlertsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStockAlertsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStockAlertsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStockAlertsRequestMultiError, or nil if none found.
func (m *GetStockAlertsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStockAlertsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MerchantId

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetStockAlertsRequestMultiError(errors)
	}

	return nil
}

// GetStockAlertsRequestMultiError is an error wrapping multiple validation
// errors returned by GetStockAlertsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetStockAlertsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStockAlertsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStockAlertsRequestMultiError) AllErrors() []error { return m }

// GetStockAlertsRequestValidationError is the validation error returned by
// GetStockAlertsRequest.Validate if the designated constraints aren't met.
type GetStockAlertsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStockAlertsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStockAlertsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStockAlertsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStockAlertsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStockAlertsRequestValidationError) ErrorName() string {
	return "GetStockAlertsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStockAlertsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStockAlertsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStockAlertsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStockAlertsRequestValidationError{}

// Validate checks the field values on StockAlert with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StockAlert) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StockAlert with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StockAlertMultiError, or
// nil if none found.
func (m *StockAlert) ValidateAll() error {
	return m.validate(true)
}

func (m *StockAlert) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductId

	// no validation rules for MerchantId

	// no validation rules for ProductName

	// no validation rules for CurrentStock

	// no validation rules for Threshold

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StockAlertValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StockAlertValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StockAlertValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StockAlertValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StockAlertValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StockAlertValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StockAlertMultiError(errors)
	}

	return nil
}

// StockAlertMultiError is an error wrapping multiple validation errors
// returned by StockAlert.ValidateAll() if the designated constraints aren't met.
type StockAlertMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StockAlertMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StockAlertMultiError) AllErrors() []error { return m }

// StockAlertValidationError is the validation error returned by
// StockAlert.Validate if the designated constraints aren't met.
type StockAlertValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StockAlertValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StockAlertValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StockAlertValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StockAlertValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StockAlertValidationError) ErrorName() string { return "StockAlertValidationError" }

// Error satisfies the builtin error interface
func (e StockAlertValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStockAlert.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StockAlertValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StockAlertValidationError{}

// Validate checks the field values on GetStockAlertsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStockAlertsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStockAlertsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStockAlertsResponseMultiError, or nil if none found.
func (m *GetStockAlertsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStockAlertsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAlerts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetStockAlertsResponseValidationError{
						field:  fmt.Sprintf("Alerts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetStockAlertsResponseValidationError{
						field:  fmt.Sprintf("Alerts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetStockAlertsResponseValidationError{
					field:  fmt.Sprintf("Alerts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return GetStockAlertsResponseMultiError(errors)
	}

	return nil
}

// GetStockAlertsResponseMultiError is an error wrapping multiple validation
// errors returned by GetStockAlertsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetStockAlertsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStockAlertsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStockAlertsResponseMultiError) AllErrors() []error { return m }

// GetStockAlertsResponseValidationError is the validation error returned by
// GetStockAlertsResponse.Validate if the designated constraints aren't met.
type GetStockAlertsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStockAlertsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStockAlertsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStockAlertsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStockAlertsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStockAlertsResponseValidationError) ErrorName() string {
	return "GetStockAlertsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStockAlertsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStockAlertsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStockAlertsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStockAlertsResponseValidationError{}

// Validate checks the field values on GetLowStockProductsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLowStockProductsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLowStockProductsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLowStockProductsRequestMultiError, or nil if none found.
func (m *GetLowStockProductsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLowStockProductsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MerchantId

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Threshold

	if len(errors) > 0 {
		return GetLowStockProductsRequestMultiError(errors)
	}

	return nil
}

// GetLowStockProductsRequestMultiError is an error wrapping multiple
// validation errors returned by GetLowStockProductsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetLowStockProductsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLowStockProductsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLowStockProductsRequestMultiError) AllErrors() []error { return m }

// GetLowStockProductsRequestValidationError is the validation error returned
// by GetLowStockProductsRequest.Validate if the designated constraints aren't met.
type GetLowStockProductsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLowStockProductsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLowStockProductsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLowStockProductsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLowStockProductsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLowStockProductsRequestValidationError) ErrorName() string {
	return "GetLowStockProductsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLowStockProductsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLowStockProductsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLowStockProductsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLowStockProductsRequestValidationError{}

// Validate checks the field values on LowStockProduct with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LowStockProduct) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LowStockProduct with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LowStockProductMultiError, or nil if none found.
func (m *LowStockProduct) ValidateAll() error {
	return m.validate(true)
}

func (m *LowStockProduct) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductId

	// no validation rules for MerchantId

	// no validation rules for ProductName

	// no validation rules for CurrentStock

	// no validation rules for Threshold

	// no validation rules for ImageUrl

	if len(errors) > 0 {
		return LowStockProductMultiError(errors)
	}

	return nil
}

// LowStockProductMultiError is an error wrapping multiple validation errors
// returned by LowStockProduct.ValidateAll() if the designated constraints
// aren't met.
type LowStockProductMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LowStockProductMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LowStockProductMultiError) AllErrors() []error { return m }

// LowStockProductValidationError is the validation error returned by
// LowStockProduct.Validate if the designated constraints aren't met.
type LowStockProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LowStockProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LowStockProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LowStockProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LowStockProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LowStockProductValidationError) ErrorName() string { return "LowStockProductValidationError" }

// Error satisfies the builtin error interface
func (e LowStockProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLowStockProduct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LowStockProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LowStockProductValidationError{}

// Validate checks the field values on GetLowStockProductsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLowStockProductsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLowStockProductsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLowStockProductsResponseMultiError, or nil if none found.
func (m *GetLowStockProductsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLowStockProductsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProducts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetLowStockProductsResponseValidationError{
						field:  fmt.Sprintf("Products[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetLowStockProductsResponseValidationError{
						field:  fmt.Sprintf("Products[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetLowStockProductsResponseValidationError{
					field:  fmt.Sprintf("Products[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return GetLowStockProductsResponseMultiError(errors)
	}

	return nil
}

// GetLowStockProductsResponseMultiError is an error wrapping multiple
// validation errors returned by GetLowStockProductsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetLowStockProductsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLowStockProductsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLowStockProductsResponseMultiError) AllErrors() []error { return m }

// GetLowStockProductsResponseValidationError is the validation error returned
// by GetLowStockProductsResponse.Validate if the designated constraints
// aren't met.
type GetLowStockProductsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLowStockProductsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLowStockProductsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLowStockProductsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLowStockProductsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLowStockProductsResponseValidationError) ErrorName() string {
	return "GetLowStockProductsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetLowStockProductsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLowStockProductsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLowStockProductsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLowStockProductsResponseValidationError{}

// Validate checks the field values on RecordStockAdjustmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecordStockAdjustmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecordStockAdjustmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecordStockAdjustmentRequestMultiError, or nil if none found.
func (m *RecordStockAdjustmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RecordStockAdjustmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductId

	// no validation rules for MerchantId

	// no validation rules for Quantity

	// no validation rules for Reason

	// no validation rules for OperatorId

	if len(errors) > 0 {
		return RecordStockAdjustmentRequestMultiError(errors)
	}

	return nil
}

// RecordStockAdjustmentRequestMultiError is an error wrapping multiple
// validation errors returned by RecordStockAdjustmentRequest.ValidateAll() if
// the designated constraints aren't met.
type RecordStockAdjustmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordStockAdjustmentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordStockAdjustmentRequestMultiError) AllErrors() []error { return m }

// RecordStockAdjustmentRequestValidationError is the validation error returned
// by RecordStockAdjustmentRequest.Validate if the designated constraints
// aren't met.
type RecordStockAdjustmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordStockAdjustmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordStockAdjustmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordStockAdjustmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordStockAdjustmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordStockAdjustmentRequestValidationError) ErrorName() string {
	return "RecordStockAdjustmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RecordStockAdjustmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecordStockAdjustmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordStockAdjustmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordStockAdjustmentRequestValidationError{}

// Validate checks the field values on RecordStockAdjustmentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecordStockAdjustmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecordStockAdjustmentResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RecordStockAdjustmentResponseMultiError, or nil if none found.
func (m *RecordStockAdjustmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RecordStockAdjustmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	// no validation rules for AdjustmentId

	if len(errors) > 0 {
		return RecordStockAdjustmentResponseMultiError(errors)
	}

	return nil
}

// RecordStockAdjustmentResponseMultiError is an error wrapping multiple
// validation errors returned by RecordStockAdjustmentResponse.ValidateAll()
// if the designated constraints aren't met.
type RecordStockAdjustmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordStockAdjustmentResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordStockAdjustmentResponseMultiError) AllErrors() []error { return m }

// RecordStockAdjustmentResponseValidationError is the validation error
// returned by RecordStockAdjustmentResponse.Validate if the designated
// constraints aren't met.
type RecordStockAdjustmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordStockAdjustmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordStockAdjustmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordStockAdjustmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordStockAdjustmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordStockAdjustmentResponseValidationError) ErrorName() string {
	return "RecordStockAdjustmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RecordStockAdjustmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecordStockAdjustmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordStockAdjustmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordStockAdjustmentResponseValidationError{}

// Validate checks the field values on GetStockAdjustmentHistoryRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetStockAdjustmentHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStockAdjustmentHistoryRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetStockAdjustmentHistoryRequestMultiError, or nil if none found.
func (m *GetStockAdjustmentHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStockAdjustmentHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductId

	// no validation rules for MerchantId

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetStockAdjustmentHistoryRequestMultiError(errors)
	}

	return nil
}

// GetStockAdjustmentHistoryRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetStockAdjustmentHistoryRequest.ValidateAll() if the designated
// constraints aren't met.
type GetStockAdjustmentHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStockAdjustmentHistoryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStockAdjustmentHistoryRequestMultiError) AllErrors() []error { return m }

// GetStockAdjustmentHistoryRequestValidationError is the validation error
// returned by GetStockAdjustmentHistoryRequest.Validate if the designated
// constraints aren't met.
type GetStockAdjustmentHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStockAdjustmentHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStockAdjustmentHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStockAdjustmentHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStockAdjustmentHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStockAdjustmentHistoryRequestValidationError) ErrorName() string {
	return "GetStockAdjustmentHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStockAdjustmentHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStockAdjustmentHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStockAdjustmentHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStockAdjustmentHistoryRequestValidationError{}

// Validate checks the field values on StockAdjustment with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StockAdjustment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StockAdjustment with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StockAdjustmentMultiError, or nil if none found.
func (m *StockAdjustment) ValidateAll() error {
	return m.validate(true)
}

func (m *StockAdjustment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProductId

	// no validation rules for MerchantId

	// no validation rules for ProductName

	// no validation rules for Quantity

	// no validation rules for Reason

	// no validation rules for OperatorId

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StockAdjustmentValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StockAdjustmentValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StockAdjustmentValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StockAdjustmentMultiError(errors)
	}

	return nil
}

// StockAdjustmentMultiError is an error wrapping multiple validation errors
// returned by StockAdjustment.ValidateAll() if the designated constraints
// aren't met.
type StockAdjustmentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StockAdjustmentMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StockAdjustmentMultiError) AllErrors() []error { return m }

// StockAdjustmentValidationError is the validation error returned by
// StockAdjustment.Validate if the designated constraints aren't met.
type StockAdjustmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StockAdjustmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StockAdjustmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StockAdjustmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StockAdjustmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StockAdjustmentValidationError) ErrorName() string { return "StockAdjustmentValidationError" }

// Error satisfies the builtin error interface
func (e StockAdjustmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStockAdjustment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StockAdjustmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StockAdjustmentValidationError{}

// Validate checks the field values on GetStockAdjustmentHistoryResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetStockAdjustmentHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStockAdjustmentHistoryResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetStockAdjustmentHistoryResponseMultiError, or nil if none found.
func (m *GetStockAdjustmentHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStockAdjustmentHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAdjustments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetStockAdjustmentHistoryResponseValidationError{
						field:  fmt.Sprintf("Adjustments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetStockAdjustmentHistoryResponseValidationError{
						field:  fmt.Sprintf("Adjustments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetStockAdjustmentHistoryResponseValidationError{
					field:  fmt.Sprintf("Adjustments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return GetStockAdjustmentHistoryResponseMultiError(errors)
	}

	return nil
}

// GetStockAdjustmentHistoryResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetStockAdjustmentHistoryResponse.ValidateAll() if the designated
// constraints aren't met.
type GetStockAdjustmentHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStockAdjustmentHistoryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStockAdjustmentHistoryResponseMultiError) AllErrors() []error { return m }

// GetStockAdjustmentHistoryResponseValidationError is the validation error
// returned by GetStockAdjustmentHistoryResponse.Validate if the designated
// constraints aren't met.
type GetStockAdjustmentHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStockAdjustmentHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStockAdjustmentHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStockAdjustmentHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStockAdjustmentHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStockAdjustmentHistoryResponseValidationError) ErrorName() string {
	return "GetStockAdjustmentHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStockAdjustmentHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStockAdjustmentHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStockAdjustmentHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStockAdjustmentHistoryResponseValidationError{}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: inventory/v1/inventory.proto

package inventoryv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Inventory_SetStockAlert_FullMethodName             = "/ecommerce.merchant.v1.Inventory/SetStockAlert"
	Inventory_GetStockAlerts_FullMethodName            = "/ecommerce.merchant.v1.Inventory/GetStockAlerts"
	Inventory_GetLowStockProducts_FullMethodName       = "/ecommerce.merchant.v1.Inventory/GetLowStockProducts"
	Inventory_RecordStockAdjustment_FullMethodName     = "/ecommerce.merchant.v1.Inventory/RecordStockAdjustment"
	Inventory_GetStockAdjustmentHistory_FullMethodName = "/ecommerce.merchant.v1.Inventory/GetStockAdjustmentHistory"
	Inventory_GetProductStock_FullMethodName           = "/ecommerce.merchant.v1.Inventory/GetProductStock"
	Inventory_UpdateProductStock_FullMethodName        = "/ecommerce.merchant.v1.Inventory/UpdateProductStock"
)

// InventoryClient is the client API for Inventory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InventoryClient interface {
	// 设置库存警报阈值
	SetStockAlert(ctx context.Context, in *SetStockAlertRequest, opts ...grpc.CallOption) (*SetStockAlertResponse, error)
	// 获取库存警报配置
	GetStockAlerts(ctx context.Context, in *GetStockAlertsRequest, opts ...grpc.CallOption) (*GetStockAlertsResponse, error)
	// 获取低库存产品列表
	GetLowStockProducts(ctx context.Context, in *GetLowStockProductsRequest, opts ...grpc.CallOption) (*GetLowStockProductsResponse, error)
	// 记录库存调整
	RecordStockAdjustment(ctx context.Context, in *RecordStockAdjustmentRequest, opts ...grpc.CallOption) (*RecordStockAdjustmentResponse, error)
	// 获取产品库存调整历史
	GetStockAdjustmentHistory(ctx context.Context, in *GetStockAdjustmentHistoryRequest, opts ...grpc.CallOption) (*GetStockAdjustmentHistoryResponse, error)
	// 获取产品当前库存
	GetProductStock(ctx context.Context, in *GetProductStockRequest, opts ...grpc.CallOption) (*GetProductStockResponse, error)
	// 更新产品库存
	UpdateProductStock(ctx context.Context, in *UpdateProductStockRequest, opts ...grpc.CallOption) (*UpdateProductStockResponse, error)
}

type inventoryClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryClient(cc grpc.ClientConnInterface) InventoryClient {
	return &inventoryClient{cc}
}

func (c *inventoryClient) SetStockAlert(ctx context.Context, in *SetStockAlertRequest, opts ...grpc.CallOption) (*SetStockAlertResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetStockAlertResponse)
	err := c.cc.Invoke(ctx, Inventory_SetStockAlert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) GetStockAlerts(ctx context.Context, in *GetStockAlertsRequest, opts ...grpc.CallOption) (*GetStockAlertsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStockAlertsResponse)
	err := c.cc.Invoke(ctx, Inventory_GetStockAlerts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) GetLowStockProducts(ctx context.Context, in *GetLowStockProductsRequest, opts ...grpc.CallOption) (*GetLowStockProductsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLowStockProductsResponse)
	err := c.cc.Invoke(ctx, Inventory_GetLowStockProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) RecordStockAdjustment(ctx context.Context, in *RecordStockAdjustmentRequest, opts ...grpc.CallOption) (*RecordStockAdjustmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecordStockAdjustmentResponse)
	err := c.cc.Invoke(ctx, Inventory_RecordStockAdjustment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) GetStockAdjustmentHistory(ctx context.Context, in *GetStockAdjustmentHistoryRequest, opts ...grpc.CallOption) (*GetStockAdjustmentHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStockAdjustmentHistoryResponse)
	err := c.cc.Invoke(ctx, Inventory_GetStockAdjustmentHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) GetProductStock(ctx context.Context, in *GetProductStockRequest, opts ...grpc.CallOption) (*GetProductStockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProductStockResponse)
	err := c.cc.Invoke(ctx, Inventory_GetProductStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) UpdateProductStock(ctx context.Context, in *UpdateProductStockRequest, opts ...grpc.CallOption) (*UpdateProductStockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProductStockResponse)
	err := c.cc.Invoke(ctx, Inventory_UpdateProductStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryServer is the server API for Inventory service.
// All implementations must embed UnimplementedInventoryServer
// for forward compatibility.
type InventoryServer interface {
	// 设置库存警报阈值
	SetStockAlert(context.Context, *SetStockAlertRequest) (*SetStockAlertResponse, error)
	// 获取库存警报配置
	GetStockAlerts(context.Context, *GetStockAlertsRequest) (*GetStockAlertsResponse, error)
	// 获取低库存产品列表
	GetLowStockProducts(context.Context, *GetLowStockProductsRequest) (*GetLowStockProductsResponse, error)
	// 记录库存调整
	RecordStockAdjustment(context.Context, *RecordStockAdjustmentRequest) (*RecordStockAdjustmentResponse, error)
	// 获取产品库存调整历史
	GetStockAdjustmentHistory(context.Context, *GetStockAdjustmentHistoryRequest) (*GetStockAdjustmentHistoryResponse, error)
	// 获取产品当前库存
	GetProductStock(context.Context, *GetProductStockRequest) (*GetProductStockResponse, error)
	// 更新产品库存
	UpdateProductStock(context.Context, *UpdateProductStockRequest) (*UpdateProductStockResponse, error)
	mustEmbedUnimplementedInventoryServer()
}

// UnimplementedInventoryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInventoryServer struct{}

func (UnimplementedInventoryServer) SetStockAlert(context.Context, *SetStockAlertRequest) (*SetStockAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStockAlert not implemented")
}
func (UnimplementedInventoryServer) GetStockAlerts(context.Context, *GetStockAlertsRequest) (*GetStockAlertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStockAlerts not implemented")
}
func (UnimplementedInventoryServer) GetLowStockProducts(context.Context, *GetLowStockProductsRequest) (*GetLowStockProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLowStockProducts not implemented")
}
func (UnimplementedInventoryServer) RecordStockAdjustment(context.Context, *RecordStockAdjustmentRequest) (*RecordStockAdjustmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordStockAdjustment not implemented")
}
func (UnimplementedInventoryServer) GetStockAdjustmentHistory(context.Context, *GetStockAdjustmentHistoryRequest) (*GetStockAdjustmentHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStockAdjustmentHistory not implemented")
}
func (UnimplementedInventoryServer) GetProductStock(context.Context, *GetProductStockRequest) (*GetProductStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductStock not implemented")
}
func (UnimplementedInventoryServer) UpdateProductStock(context.Context, *UpdateProductStockRequest) (*UpdateProductStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductStock not implemented")
}
func (UnimplementedInventoryServer) mustEmbedUnimplementedInventoryServer() {}
func (UnimplementedInventoryServer) testEmbeddedByValue()                   {}

// UnsafeInventoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InventoryServer will
// result in compilation errors.
type UnsafeInventoryServer interface {
	mustEmbedUnimplementedInventoryServer()
}

func RegisterInventoryServer(s grpc.ServiceRegistrar, srv InventoryServer) {
	// If the following call pancis, it indicates UnimplementedInventoryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Inventory_ServiceDesc, srv)
}

func _Inventory_SetStockAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStockAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).SetStockAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Inventory_SetStockAlert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).SetStockAlert(ctx, req.(*SetStockAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_GetStockAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStockAlertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).GetStockAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Inventory_GetStockAlerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).GetStockAlerts(ctx, req.(*GetStockAlertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_GetLowStockProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLowStockProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).GetLowStockProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Inventory_GetLowStockProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).GetLowStockProducts(ctx, req.(*GetLowStockProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_RecordStockAdjustment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordStockAdjustmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).RecordStockAdjustment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Inventory_RecordStockAdjustment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).RecordStockAdjustment(ctx, req.(*RecordStockAdjustmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_GetStockAdjustmentHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStockAdjustmentHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).GetStockAdjustmentHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Inventory_GetStockAdjustmentHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).GetStockAdjustmentHistory(ctx, req.(*GetStockAdjustmentHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_GetProductStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).GetProductStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Inventory_GetProductStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).GetProductStock(ctx, req.(*GetProductStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_UpdateProductStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).UpdateProductStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Inventory_UpdateProductStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).UpdateProductStock(ctx, req.(*UpdateProductStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Inventory_ServiceDesc is the grpc.ServiceDesc for Inventory service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Inventory_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ecommerce.merchant.v1.Inventory",
	HandlerType: (*InventoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetStockAlert",
			Handler:    _Inventory_SetStockAlert_Handler,
		},
		{
			MethodName: "GetStockAlerts",
			Handler:    _Inventory_GetStockAlerts_Handler,
		},
		{
			MethodName: "GetLowStockProducts",
			Handler:    _Inventory_GetLowStockProducts_Handler,
		},
		{
			MethodName: "RecordStockAdjustment",
			Handler:    _Inventory_RecordStockAdjustment_Handler,
		},
		{
			MethodName: "GetStockAdjustmentHistory",
			Handler:    _Inventory_GetStockAdjustmentHistory_Handler,
		},
		{
			MethodName: "GetProductStock",
			Handler:    _Inventory_GetProductStock_Handler,
		},
		{
			MethodName: "UpdateProductStock",
			Handler:    _Inventory_UpdateProductStock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inventory/v1/inventory.proto",
}

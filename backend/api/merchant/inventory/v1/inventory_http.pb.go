// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.3
// - protoc             v5.29.3
// source: inventory/v1/inventory.proto

package inventoryv1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationInventoryGetLowStockProducts = "/ecommerce.merchant.v1.Inventory/GetLowStockProducts"
const OperationInventoryGetProductStock = "/ecommerce.merchant.v1.Inventory/GetProductStock"
const OperationInventoryGetStockAdjustmentHistory = "/ecommerce.merchant.v1.Inventory/GetStockAdjustmentHistory"
const OperationInventoryGetStockAlerts = "/ecommerce.merchant.v1.Inventory/GetStockAlerts"
const OperationInventoryRecordStockAdjustment = "/ecommerce.merchant.v1.Inventory/RecordStockAdjustment"
const OperationInventorySetStockAlert = "/ecommerce.merchant.v1.Inventory/SetStockAlert"
const OperationInventoryUpdateProductStock = "/ecommerce.merchant.v1.Inventory/UpdateProductStock"

type InventoryHTTPServer interface {
	// GetLowStockProducts 获取低库存产品列表
	GetLowStockProducts(context.Context, *GetLowStockProductsRequest) (*GetLowStockProductsResponse, error)
	// GetProductStock 获取产品当前库存
	GetProductStock(context.Context, *GetProductStockRequest) (*GetProductStockResponse, error)
	// GetStockAdjustmentHistory 获取产品库存调整历史
	GetStockAdjustmentHistory(context.Context, *GetStockAdjustmentHistoryRequest) (*GetStockAdjustmentHistoryResponse, error)
	// GetStockAlerts 获取库存警报配置
	GetStockAlerts(context.Context, *GetStockAlertsRequest) (*GetStockAlertsResponse, error)
	// RecordStockAdjustment 记录库存调整
	RecordStockAdjustment(context.Context, *RecordStockAdjustmentRequest) (*RecordStockAdjustmentResponse, error)
	// SetStockAlert 设置库存警报阈值
	SetStockAlert(context.Context, *SetStockAlertRequest) (*SetStockAlertResponse, error)
	// UpdateProductStock 更新产品库存
	UpdateProductStock(context.Context, *UpdateProductStockRequest) (*UpdateProductStockResponse, error)
}

func RegisterInventoryHTTPServer(s *http.Server, srv InventoryHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/merchants/inventory/alerts", _Inventory_SetStockAlert0_HTTP_Handler(srv))
	r.GET("/v1/merchants/inventory/alerts", _Inventory_GetStockAlerts0_HTTP_Handler(srv))
	r.GET("/v1/merchants/inventory/low-stock", _Inventory_GetLowStockProducts0_HTTP_Handler(srv))
	r.POST("/v1/merchants/inventory/adjustments", _Inventory_RecordStockAdjustment0_HTTP_Handler(srv))
	r.GET("/v1/merchants/inventory/adjustments", _Inventory_GetStockAdjustmentHistory0_HTTP_Handler(srv))
	r.GET("/v1/merchants/inventory/{product_id}", _Inventory_GetProductStock0_HTTP_Handler(srv))
	r.PUT("/v1/merchants/inventory/{product_id}", _Inventory_UpdateProductStock0_HTTP_Handler(srv))
}

func _Inventory_SetStockAlert0_HTTP_Handler(srv InventoryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetStockAlertRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInventorySetStockAlert)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetStockAlert(ctx, req.(*SetStockAlertRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetStockAlertResponse)
		return ctx.Result(200, reply)
	}
}

func _Inventory_GetStockAlerts0_HTTP_Handler(srv InventoryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetStockAlertsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInventoryGetStockAlerts)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetStockAlerts(ctx, req.(*GetStockAlertsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetStockAlertsResponse)
		return ctx.Result(200, reply)
	}
}

func _Inventory_GetLowStockProducts0_HTTP_Handler(srv InventoryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetLowStockProductsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInventoryGetLowStockProducts)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetLowStockProducts(ctx, req.(*GetLowStockProductsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetLowStockProductsResponse)
		return ctx.Result(200, reply)
	}
}

func _Inventory_RecordStockAdjustment0_HTTP_Handler(srv InventoryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RecordStockAdjustmentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInventoryRecordStockAdjustment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RecordStockAdjustment(ctx, req.(*RecordStockAdjustmentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RecordStockAdjustmentResponse)
		return ctx.Result(200, reply)
	}
}

func _Inventory_GetStockAdjustmentHistory0_HTTP_Handler(srv InventoryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetStockAdjustmentHistoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInventoryGetStockAdjustmentHistory)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetStockAdjustmentHistory(ctx, req.(*GetStockAdjustmentHistoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetStockAdjustmentHistoryResponse)
		return ctx.Result(200, reply)
	}
}

func _Inventory_GetProductStock0_HTTP_Handler(srv InventoryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetProductStockRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInventoryGetProductStock)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProductStock(ctx, req.(*GetProductStockRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetProductStockResponse)
		return ctx.Result(200, reply)
	}
}

func _Inventory_UpdateProductStock0_HTTP_Handler(srv InventoryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateProductStockRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInventoryUpdateProductStock)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateProductStock(ctx, req.(*UpdateProductStockRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateProductStockResponse)
		return ctx.Result(200, reply)
	}
}

type InventoryHTTPClient interface {
	GetLowStockProducts(ctx context.Context, req *GetLowStockProductsRequest, opts ...http.CallOption) (rsp *GetLowStockProductsResponse, err error)
	GetProductStock(ctx context.Context, req *GetProductStockRequest, opts ...http.CallOption) (rsp *GetProductStockResponse, err error)
	GetStockAdjustmentHistory(ctx context.Context, req *GetStockAdjustmentHistoryRequest, opts ...http.CallOption) (rsp *GetStockAdjustmentHistoryResponse, err error)
	GetStockAlerts(ctx context.Context, req *GetStockAlertsRequest, opts ...http.CallOption) (rsp *GetStockAlertsResponse, err error)
	RecordStockAdjustment(ctx context.Context, req *RecordStockAdjustmentRequest, opts ...http.CallOption) (rsp *RecordStockAdjustmentResponse, err error)
	SetStockAlert(ctx context.Context, req *SetStockAlertRequest, opts ...http.CallOption) (rsp *SetStockAlertResponse, err error)
	UpdateProductStock(ctx context.Context, req *UpdateProductStockRequest, opts ...http.CallOption) (rsp *UpdateProductStockResponse, err error)
}

type InventoryHTTPClientImpl struct {
	cc *http.Client
}

func NewInventoryHTTPClient(client *http.Client) InventoryHTTPClient {
	return &InventoryHTTPClientImpl{client}
}

func (c *InventoryHTTPClientImpl) GetLowStockProducts(ctx context.Context, in *GetLowStockProductsRequest, opts ...http.CallOption) (*GetLowStockProductsResponse, error) {
	var out GetLowStockProductsResponse
	pattern := "/v1/merchants/inventory/low-stock"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInventoryGetLowStockProducts))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *InventoryHTTPClientImpl) GetProductStock(ctx context.Context, in *GetProductStockRequest, opts ...http.CallOption) (*GetProductStockResponse, error) {
	var out GetProductStockResponse
	pattern := "/v1/merchants/inventory/{product_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInventoryGetProductStock))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *InventoryHTTPClientImpl) GetStockAdjustmentHistory(ctx context.Context, in *GetStockAdjustmentHistoryRequest, opts ...http.CallOption) (*GetStockAdjustmentHistoryResponse, error) {
	var out GetStockAdjustmentHistoryResponse
	pattern := "/v1/merchants/inventory/adjustments"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInventoryGetStockAdjustmentHistory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *InventoryHTTPClientImpl) GetStockAlerts(ctx context.Context, in *GetStockAlertsRequest, opts ...http.CallOption) (*GetStockAlertsResponse, error) {
	var out GetStockAlertsResponse
	pattern := "/v1/merchants/inventory/alerts"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInventoryGetStockAlerts))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *InventoryHTTPClientImpl) RecordStockAdjustment(ctx context.Context, in *RecordStockAdjustmentRequest, opts ...http.CallOption) (*RecordStockAdjustmentResponse, error) {
	var out RecordStockAdjustmentResponse
	pattern := "/v1/merchants/inventory/adjustments"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationInventoryRecordStockAdjustment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *InventoryHTTPClientImpl) SetStockAlert(ctx context.Context, in *SetStockAlertRequest, opts ...http.CallOption) (*SetStockAlertResponse, error) {
	var out SetStockAlertResponse
	pattern := "/v1/merchants/inventory/alerts"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationInventorySetStockAlert))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *InventoryHTTPClientImpl) UpdateProductStock(ctx context.Context, in *UpdateProductStockRequest, opts ...http.CallOption) (*UpdateProductStockResponse, error) {
	var out UpdateProductStockResponse
	pattern := "/v1/merchants/inventory/{product_id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationInventoryUpdateProductStock))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: comment/v1/comment.proto

package admincommentv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SetSensitiveWordsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetSensitiveWordsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetSensitiveWordsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetSensitiveWordsReqMultiError, or nil if none found.
func (m *SetSensitiveWordsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetSensitiveWordsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetSensitiveWordsReqMultiError(errors)
	}

	return nil
}

// SetSensitiveWordsReqMultiError is an error wrapping multiple validation
// errors returned by SetSensitiveWordsReq.ValidateAll() if the designated
// constraints aren't met.
type SetSensitiveWordsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetSensitiveWordsReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetSensitiveWordsReqMultiError) AllErrors() []error { return m }

// SetSensitiveWordsReqValidationError is the validation error returned by
// SetSensitiveWordsReq.Validate if the designated constraints aren't met.
type SetSensitiveWordsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetSensitiveWordsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetSensitiveWordsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetSensitiveWordsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetSensitiveWordsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetSensitiveWordsReqValidationError) ErrorName() string {
	return "SetSensitiveWordsReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetSensitiveWordsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetSensitiveWordsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetSensitiveWordsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetSensitiveWordsReqValidationError{}

// Validate checks the field values on SetSensitiveWordsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetSensitiveWordsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetSensitiveWordsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetSensitiveWordsReplyMultiError, or nil if none found.
func (m *SetSensitiveWordsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SetSensitiveWordsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetSensitiveWordsReplyMultiError(errors)
	}

	return nil
}

// SetSensitiveWordsReplyMultiError is an error wrapping multiple validation
// errors returned by SetSensitiveWordsReply.ValidateAll() if the designated
// constraints aren't met.
type SetSensitiveWordsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetSensitiveWordsReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetSensitiveWordsReplyMultiError) AllErrors() []error { return m }

// SetSensitiveWordsReplyValidationError is the validation error returned by
// SetSensitiveWordsReply.Validate if the designated constraints aren't met.
type SetSensitiveWordsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetSensitiveWordsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetSensitiveWordsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetSensitiveWordsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetSensitiveWordsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetSensitiveWordsReplyValidationError) ErrorName() string {
	return "SetSensitiveWordsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SetSensitiveWordsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetSensitiveWordsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetSensitiveWordsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetSensitiveWordsReplyValidationError{}

// Validate checks the field values on GetSensitiveWordsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSensitiveWordsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSensitiveWordsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSensitiveWordsReqMultiError, or nil if none found.
func (m *GetSensitiveWordsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSensitiveWordsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetSensitiveWordsReqMultiError(errors)
	}

	return nil
}

// GetSensitiveWordsReqMultiError is an error wrapping multiple validation
// errors returned by GetSensitiveWordsReq.ValidateAll() if the designated
// constraints aren't met.
type GetSensitiveWordsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSensitiveWordsReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSensitiveWordsReqMultiError) AllErrors() []error { return m }

// GetSensitiveWordsReqValidationError is the validation error returned by
// GetSensitiveWordsReq.Validate if the designated constraints aren't met.
type GetSensitiveWordsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSensitiveWordsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSensitiveWordsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSensitiveWordsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSensitiveWordsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSensitiveWordsReqValidationError) ErrorName() string {
	return "GetSensitiveWordsReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetSensitiveWordsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSensitiveWordsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSensitiveWordsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSensitiveWordsReqValidationError{}

// Validate checks the field values on GetSensitiveWordsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSensitiveWordsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSensitiveWordsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSensitiveWordsReplyMultiError, or nil if none found.
func (m *GetSensitiveWordsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSensitiveWordsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetSensitiveWordsReplyMultiError(errors)
	}

	return nil
}

// GetSensitiveWordsReplyMultiError is an error wrapping multiple validation
// errors returned by GetSensitiveWordsReply.ValidateAll() if the designated
// constraints aren't met.
type GetSensitiveWordsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSensitiveWordsReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSensitiveWordsReplyMultiError) AllErrors() []error { return m }

// GetSensitiveWordsReplyValidationError is the validation error returned by
// GetSensitiveWordsReply.Validate if the designated constraints aren't met.
type GetSensitiveWordsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSensitiveWordsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSensitiveWordsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSensitiveWordsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSensitiveWordsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSensitiveWordsReplyValidationError) ErrorName() string {
	return "GetSensitiveWordsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetSensitiveWordsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSensitiveWordsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSensitiveWordsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSensitiveWordsReplyValidationError{}

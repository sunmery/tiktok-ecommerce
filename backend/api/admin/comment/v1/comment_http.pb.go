// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: comment/v1/comment.proto

package admincommentv1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAdminCommentGetSensitiveWords = "/admin.admincomment.v1.AdminComment/GetSensitiveWords"
const OperationAdminCommentSetSensitiveWords = "/admin.admincomment.v1.AdminComment/SetSensitiveWords"

type AdminCommentHTTPServer interface {
	// GetSensitiveWords 查询评论敏感词
	GetSensitiveWords(context.Context, *GetSensitiveWordsReq) (*GetSensitiveWordsReply, error)
	// SetSensitiveWords 设置评论敏感词
	SetSensitiveWords(context.Context, *SetSensitiveWordsReq) (*SetSensitiveWordsReply, error)
}

func RegisterAdminCommentHTTPServer(s *http.Server, srv AdminCommentHTTPServer) {
	r := s.Route("/")
	r.PUT("/v1/admin/comments/sensitive-words", _AdminComment_SetSensitiveWords0_HTTP_Handler(srv))
	r.GET("/v1/admin/comments/sensitive-words", _AdminComment_GetSensitiveWords0_HTTP_Handler(srv))
}

func _AdminComment_SetSensitiveWords0_HTTP_Handler(srv AdminCommentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetSensitiveWordsReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminCommentSetSensitiveWords)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetSensitiveWords(ctx, req.(*SetSensitiveWordsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetSensitiveWordsReply)
		return ctx.Result(200, reply)
	}
}

func _AdminComment_GetSensitiveWords0_HTTP_Handler(srv AdminCommentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSensitiveWordsReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminCommentGetSensitiveWords)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSensitiveWords(ctx, req.(*GetSensitiveWordsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSensitiveWordsReply)
		return ctx.Result(200, reply)
	}
}

type AdminCommentHTTPClient interface {
	GetSensitiveWords(ctx context.Context, req *GetSensitiveWordsReq, opts ...http.CallOption) (rsp *GetSensitiveWordsReply, err error)
	SetSensitiveWords(ctx context.Context, req *SetSensitiveWordsReq, opts ...http.CallOption) (rsp *SetSensitiveWordsReply, err error)
}

type AdminCommentHTTPClientImpl struct {
	cc *http.Client
}

func NewAdminCommentHTTPClient(client *http.Client) AdminCommentHTTPClient {
	return &AdminCommentHTTPClientImpl{client}
}

func (c *AdminCommentHTTPClientImpl) GetSensitiveWords(ctx context.Context, in *GetSensitiveWordsReq, opts ...http.CallOption) (*GetSensitiveWordsReply, error) {
	var out GetSensitiveWordsReply
	pattern := "/v1/admin/comments/sensitive-words"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminCommentGetSensitiveWords))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminCommentHTTPClientImpl) SetSensitiveWords(ctx context.Context, in *SetSensitiveWordsReq, opts ...http.CallOption) (*SetSensitiveWordsReply, error) {
	var out SetSensitiveWordsReply
	pattern := "/v1/admin/comments/sensitive-words"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminCommentSetSensitiveWords))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: comment/v1/comment.proto

package admincommentv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AdminComment_SetSensitiveWords_FullMethodName = "/admin.admincomment.v1.AdminComment/SetSensitiveWords"
	AdminComment_GetSensitiveWords_FullMethodName = "/admin.admincomment.v1.AdminComment/GetSensitiveWords"
)

// AdminCommentClient is the client API for AdminComment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminCommentClient interface {
	// 设置评论敏感词
	SetSensitiveWords(ctx context.Context, in *SetSensitiveWordsReq, opts ...grpc.CallOption) (*SetSensitiveWordsReply, error)
	// 查询评论敏感词
	GetSensitiveWords(ctx context.Context, in *GetSensitiveWordsReq, opts ...grpc.CallOption) (*GetSensitiveWordsReply, error)
}

type adminCommentClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminCommentClient(cc grpc.ClientConnInterface) AdminCommentClient {
	return &adminCommentClient{cc}
}

func (c *adminCommentClient) SetSensitiveWords(ctx context.Context, in *SetSensitiveWordsReq, opts ...grpc.CallOption) (*SetSensitiveWordsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetSensitiveWordsReply)
	err := c.cc.Invoke(ctx, AdminComment_SetSensitiveWords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCommentClient) GetSensitiveWords(ctx context.Context, in *GetSensitiveWordsReq, opts ...grpc.CallOption) (*GetSensitiveWordsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSensitiveWordsReply)
	err := c.cc.Invoke(ctx, AdminComment_GetSensitiveWords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminCommentServer is the server API for AdminComment service.
// All implementations must embed UnimplementedAdminCommentServer
// for forward compatibility.
type AdminCommentServer interface {
	// 设置评论敏感词
	SetSensitiveWords(context.Context, *SetSensitiveWordsReq) (*SetSensitiveWordsReply, error)
	// 查询评论敏感词
	GetSensitiveWords(context.Context, *GetSensitiveWordsReq) (*GetSensitiveWordsReply, error)
	mustEmbedUnimplementedAdminCommentServer()
}

// UnimplementedAdminCommentServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdminCommentServer struct{}

func (UnimplementedAdminCommentServer) SetSensitiveWords(context.Context, *SetSensitiveWordsReq) (*SetSensitiveWordsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSensitiveWords not implemented")
}
func (UnimplementedAdminCommentServer) GetSensitiveWords(context.Context, *GetSensitiveWordsReq) (*GetSensitiveWordsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSensitiveWords not implemented")
}
func (UnimplementedAdminCommentServer) mustEmbedUnimplementedAdminCommentServer() {}
func (UnimplementedAdminCommentServer) testEmbeddedByValue()                      {}

// UnsafeAdminCommentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminCommentServer will
// result in compilation errors.
type UnsafeAdminCommentServer interface {
	mustEmbedUnimplementedAdminCommentServer()
}

func RegisterAdminCommentServer(s grpc.ServiceRegistrar, srv AdminCommentServer) {
	// If the following call pancis, it indicates UnimplementedAdminCommentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AdminComment_ServiceDesc, srv)
}

func _AdminComment_SetSensitiveWords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSensitiveWordsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCommentServer).SetSensitiveWords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminComment_SetSensitiveWords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCommentServer).SetSensitiveWords(ctx, req.(*SetSensitiveWordsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminComment_GetSensitiveWords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSensitiveWordsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCommentServer).GetSensitiveWords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminComment_GetSensitiveWords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCommentServer).GetSensitiveWords(ctx, req.(*GetSensitiveWordsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminComment_ServiceDesc is the grpc.ServiceDesc for AdminComment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminComment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin.admincomment.v1.AdminComment",
	HandlerType: (*AdminCommentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetSensitiveWords",
			Handler:    _AdminComment_SetSensitiveWords_Handler,
		},
		{
			MethodName: "GetSensitiveWords",
			Handler:    _AdminComment_GetSensitiveWords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comment/v1/comment.proto",
}

// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: order/v1/order.proto

package adminorderv1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAdminOrderGetAllOrders = "/ecommerce.adminorder.v1.AdminOrder/GetAllOrders"

type AdminOrderHTTPServer interface {
	// GetAllOrders 查询全部订单列表
	GetAllOrders(context.Context, *GetAllOrdersReq) (*AdminOrderReply, error)
}

func RegisterAdminOrderHTTPServer(s *http.Server, srv AdminOrderHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/admin/orders", _AdminOrder_GetAllOrders0_HTTP_Handler(srv))
}

func _AdminOrder_GetAllOrders0_HTTP_Handler(srv AdminOrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAllOrdersReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminOrderGetAllOrders)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAllOrders(ctx, req.(*GetAllOrdersReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminOrderReply)
		return ctx.Result(200, reply)
	}
}

type AdminOrderHTTPClient interface {
	GetAllOrders(ctx context.Context, req *GetAllOrdersReq, opts ...http.CallOption) (rsp *AdminOrderReply, err error)
}

type AdminOrderHTTPClientImpl struct {
	cc *http.Client
}

func NewAdminOrderHTTPClient(client *http.Client) AdminOrderHTTPClient {
	return &AdminOrderHTTPClientImpl{client}
}

func (c *AdminOrderHTTPClientImpl) GetAllOrders(ctx context.Context, in *GetAllOrdersReq, opts ...http.CallOption) (*AdminOrderReply, error) {
	var out AdminOrderReply
	pattern := "/v1/admin/orders"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminOrderGetAllOrders))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

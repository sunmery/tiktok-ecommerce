// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/cart.proto

package cartv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListCartsReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListCartsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCartsReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListCartsReqMultiError, or
// nil if none found.
func (m *ListCartsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCartsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListCartsReqMultiError(errors)
	}

	return nil
}

// ListCartsReqMultiError is an error wrapping multiple validation errors
// returned by ListCartsReq.ValidateAll() if the designated constraints aren't met.
type ListCartsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCartsReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCartsReqMultiError) AllErrors() []error { return m }

// ListCartsReqValidationError is the validation error returned by
// ListCartsReq.Validate if the designated constraints aren't met.
type ListCartsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCartsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCartsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCartsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCartsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCartsReqValidationError) ErrorName() string { return "ListCartsReqValidationError" }

// Error satisfies the builtin error interface
func (e ListCartsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCartsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCartsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCartsReqValidationError{}

// Validate checks the field values on ListCartsResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListCartsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCartsResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListCartsRespMultiError, or
// nil if none found.
func (m *ListCartsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCartsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCarts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCartsRespValidationError{
						field:  fmt.Sprintf("Carts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCartsRespValidationError{
						field:  fmt.Sprintf("Carts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCartsRespValidationError{
					field:  fmt.Sprintf("Carts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCartsRespMultiError(errors)
	}

	return nil
}

// ListCartsRespMultiError is an error wrapping multiple validation errors
// returned by ListCartsResp.ValidateAll() if the designated constraints
// aren't met.
type ListCartsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCartsRespMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCartsRespMultiError) AllErrors() []error { return m }

// ListCartsRespValidationError is the validation error returned by
// ListCartsResp.Validate if the designated constraints aren't met.
type ListCartsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCartsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCartsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCartsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCartsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCartsRespValidationError) ErrorName() string { return "ListCartsRespValidationError" }

// Error satisfies the builtin error interface
func (e ListCartsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCartsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCartsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCartsRespValidationError{}

// Validate checks the field values on CartSummary with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CartSummary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CartSummary with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CartSummaryMultiError, or
// nil if none found.
func (m *CartSummary) ValidateAll() error {
	return m.validate(true)
}

func (m *CartSummary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CartId

	// no validation rules for CartName

	if len(errors) > 0 {
		return CartSummaryMultiError(errors)
	}

	return nil
}

// CartSummaryMultiError is an error wrapping multiple validation errors
// returned by CartSummary.ValidateAll() if the designated constraints aren't met.
type CartSummaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CartSummaryMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CartSummaryMultiError) AllErrors() []error { return m }

// CartSummaryValidationError is the validation error returned by
// CartSummary.Validate if the designated constraints aren't met.
type CartSummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CartSummaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CartSummaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CartSummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CartSummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CartSummaryValidationError) ErrorName() string { return "CartSummaryValidationError" }

// Error satisfies the builtin error interface
func (e CartSummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCartSummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CartSummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CartSummaryValidationError{}

// Validate checks the field values on CreateOrderResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateOrderResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrderResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrderRespMultiError, or nil if none found.
func (m *CreateOrderResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateOrderRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateOrderRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateOrderRespValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateOrderRespMultiError(errors)
	}

	return nil
}

// CreateOrderRespMultiError is an error wrapping multiple validation errors
// returned by CreateOrderResp.ValidateAll() if the designated constraints
// aren't met.
type CreateOrderRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderRespMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderRespMultiError) AllErrors() []error { return m }

// CreateOrderRespValidationError is the validation error returned by
// CreateOrderResp.Validate if the designated constraints aren't met.
type CreateOrderRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderRespValidationError) ErrorName() string { return "CreateOrderRespValidationError" }

// Error satisfies the builtin error interface
func (e CreateOrderRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderRespValidationError{}

// Validate checks the field values on CartItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CartItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CartItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CartItemMultiError, or nil
// if none found.
func (m *CartItem) ValidateAll() error {
	return m.validate(true)
}

func (m *CartItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MerchantId

	// no validation rules for ProductId

	// no validation rules for Quantity

	// no validation rules for Price

	if len(errors) > 0 {
		return CartItemMultiError(errors)
	}

	return nil
}

// CartItemMultiError is an error wrapping multiple validation errors returned
// by CartItem.ValidateAll() if the designated constraints aren't met.
type CartItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CartItemMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CartItemMultiError) AllErrors() []error { return m }

// CartItemValidationError is the validation error returned by
// CartItem.Validate if the designated constraints aren't met.
type CartItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CartItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CartItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CartItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CartItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CartItemValidationError) ErrorName() string { return "CartItemValidationError" }

// Error satisfies the builtin error interface
func (e CartItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCartItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CartItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CartItemValidationError{}

// Validate checks the field values on UpsertItemReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpsertItemReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertItemReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpsertItemReqMultiError, or
// nil if none found.
func (m *UpsertItemReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertItemReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpsertItemReqValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpsertItemReqValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertItemReqValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpsertItemReqMultiError(errors)
	}

	return nil
}

// UpsertItemReqMultiError is an error wrapping multiple validation errors
// returned by UpsertItemReq.ValidateAll() if the designated constraints
// aren't met.
type UpsertItemReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertItemReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertItemReqMultiError) AllErrors() []error { return m }

// UpsertItemReqValidationError is the validation error returned by
// UpsertItemReq.Validate if the designated constraints aren't met.
type UpsertItemReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertItemReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertItemReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertItemReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertItemReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertItemReqValidationError) ErrorName() string { return "UpsertItemReqValidationError" }

// Error satisfies the builtin error interface
func (e UpsertItemReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertItemReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertItemReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertItemReqValidationError{}

// Validate checks the field values on UpsertItemResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpsertItemResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertItemResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpsertItemRespMultiError,
// or nil if none found.
func (m *UpsertItemResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertItemResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UpsertItemRespMultiError(errors)
	}

	return nil
}

// UpsertItemRespMultiError is an error wrapping multiple validation errors
// returned by UpsertItemResp.ValidateAll() if the designated constraints
// aren't met.
type UpsertItemRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertItemRespMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertItemRespMultiError) AllErrors() []error { return m }

// UpsertItemRespValidationError is the validation error returned by
// UpsertItemResp.Validate if the designated constraints aren't met.
type UpsertItemRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertItemRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertItemRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertItemRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertItemRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertItemRespValidationError) ErrorName() string { return "UpsertItemRespValidationError" }

// Error satisfies the builtin error interface
func (e UpsertItemRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertItemResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertItemRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertItemRespValidationError{}

// Validate checks the field values on EmptyCartReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EmptyCartReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmptyCartReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EmptyCartReqMultiError, or
// nil if none found.
func (m *EmptyCartReq) ValidateAll() error {
	return m.validate(true)
}

func (m *EmptyCartReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EmptyCartReqMultiError(errors)
	}

	return nil
}

// EmptyCartReqMultiError is an error wrapping multiple validation errors
// returned by EmptyCartReq.ValidateAll() if the designated constraints aren't met.
type EmptyCartReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmptyCartReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmptyCartReqMultiError) AllErrors() []error { return m }

// EmptyCartReqValidationError is the validation error returned by
// EmptyCartReq.Validate if the designated constraints aren't met.
type EmptyCartReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyCartReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyCartReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyCartReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyCartReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyCartReqValidationError) ErrorName() string { return "EmptyCartReqValidationError" }

// Error satisfies the builtin error interface
func (e EmptyCartReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmptyCartReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyCartReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyCartReqValidationError{}

// Validate checks the field values on EmptyCartResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EmptyCartResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmptyCartResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EmptyCartRespMultiError, or
// nil if none found.
func (m *EmptyCartResp) ValidateAll() error {
	return m.validate(true)
}

func (m *EmptyCartResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return EmptyCartRespMultiError(errors)
	}

	return nil
}

// EmptyCartRespMultiError is an error wrapping multiple validation errors
// returned by EmptyCartResp.ValidateAll() if the designated constraints
// aren't met.
type EmptyCartRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmptyCartRespMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmptyCartRespMultiError) AllErrors() []error { return m }

// EmptyCartRespValidationError is the validation error returned by
// EmptyCartResp.Validate if the designated constraints aren't met.
type EmptyCartRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyCartRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyCartRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyCartRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyCartRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyCartRespValidationError) ErrorName() string { return "EmptyCartRespValidationError" }

// Error satisfies the builtin error interface
func (e EmptyCartRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmptyCartResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyCartRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyCartRespValidationError{}

// Validate checks the field values on GetCartReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetCartReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCartReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetCartReqMultiError, or
// nil if none found.
func (m *GetCartReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCartReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCartReqMultiError(errors)
	}

	return nil
}

// GetCartReqMultiError is an error wrapping multiple validation errors
// returned by GetCartReq.ValidateAll() if the designated constraints aren't met.
type GetCartReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCartReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCartReqMultiError) AllErrors() []error { return m }

// GetCartReqValidationError is the validation error returned by
// GetCartReq.Validate if the designated constraints aren't met.
type GetCartReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCartReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCartReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCartReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCartReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCartReqValidationError) ErrorName() string { return "GetCartReqValidationError" }

// Error satisfies the builtin error interface
func (e GetCartReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCartReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCartReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCartReqValidationError{}

// Validate checks the field values on GetCartResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetCartResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCartResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetCartRespMultiError, or
// nil if none found.
func (m *GetCartResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCartResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCart()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCartRespValidationError{
					field:  "Cart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCartRespValidationError{
					field:  "Cart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCartRespValidationError{
				field:  "Cart",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCartRespMultiError(errors)
	}

	return nil
}

// GetCartRespMultiError is an error wrapping multiple validation errors
// returned by GetCartResp.ValidateAll() if the designated constraints aren't met.
type GetCartRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCartRespMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCartRespMultiError) AllErrors() []error { return m }

// GetCartRespValidationError is the validation error returned by
// GetCartResp.Validate if the designated constraints aren't met.
type GetCartRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCartRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCartRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCartRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCartRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCartRespValidationError) ErrorName() string { return "GetCartRespValidationError" }

// Error satisfies the builtin error interface
func (e GetCartRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCartResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCartRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCartRespValidationError{}

// Validate checks the field values on Cart with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Cart) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Cart with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CartMultiError, or nil if none found.
func (m *Cart) ValidateAll() error {
	return m.validate(true)
}

func (m *Cart) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CartValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CartValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CartValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CartMultiError(errors)
	}

	return nil
}

// CartMultiError is an error wrapping multiple validation errors returned by
// Cart.ValidateAll() if the designated constraints aren't met.
type CartMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CartMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CartMultiError) AllErrors() []error { return m }

// CartValidationError is the validation error returned by Cart.Validate if the
// designated constraints aren't met.
type CartValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CartValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CartValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CartValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CartValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CartValidationError) ErrorName() string { return "CartValidationError" }

// Error satisfies the builtin error interface
func (e CartValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCart.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CartValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CartValidationError{}

// Validate checks the field values on RemoveCartItemReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RemoveCartItemReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveCartItemReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveCartItemReqMultiError, or nil if none found.
func (m *RemoveCartItemReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveCartItemReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MerchantId

	// no validation rules for ProductId

	if len(errors) > 0 {
		return RemoveCartItemReqMultiError(errors)
	}

	return nil
}

// RemoveCartItemReqMultiError is an error wrapping multiple validation errors
// returned by RemoveCartItemReq.ValidateAll() if the designated constraints
// aren't met.
type RemoveCartItemReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveCartItemReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveCartItemReqMultiError) AllErrors() []error { return m }

// RemoveCartItemReqValidationError is the validation error returned by
// RemoveCartItemReq.Validate if the designated constraints aren't met.
type RemoveCartItemReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveCartItemReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveCartItemReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveCartItemReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveCartItemReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveCartItemReqValidationError) ErrorName() string {
	return "RemoveCartItemReqValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveCartItemReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveCartItemReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveCartItemReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveCartItemReqValidationError{}

// Validate checks the field values on RemoveCartItemResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveCartItemResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveCartItemResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveCartItemRespMultiError, or nil if none found.
func (m *RemoveCartItemResp) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveCartItemResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return RemoveCartItemRespMultiError(errors)
	}

	return nil
}

// RemoveCartItemRespMultiError is an error wrapping multiple validation errors
// returned by RemoveCartItemResp.ValidateAll() if the designated constraints
// aren't met.
type RemoveCartItemRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveCartItemRespMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveCartItemRespMultiError) AllErrors() []error { return m }

// RemoveCartItemRespValidationError is the validation error returned by
// RemoveCartItemResp.Validate if the designated constraints aren't met.
type RemoveCartItemRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveCartItemRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveCartItemRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveCartItemRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveCartItemRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveCartItemRespValidationError) ErrorName() string {
	return "RemoveCartItemRespValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveCartItemRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveCartItemResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveCartItemRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveCartItemRespValidationError{}

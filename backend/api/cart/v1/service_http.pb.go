// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.3
// - protoc             v3.21.0
// source: service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCartServiceEmptyCart = "/api.cart.v1.CartService/EmptyCart"
const OperationCartServiceGetCart = "/api.cart.v1.CartService/GetCart"
const OperationCartServiceRemoveCartItem = "/api.cart.v1.CartService/RemoveCartItem"
const OperationCartServiceUpsertItem = "/api.cart.v1.CartService/UpsertItem"

type CartServiceHTTPServer interface {
	// EmptyCart清空购物车
	EmptyCart(context.Context, *EmptyCartReq) (*EmptyCartResp, error)
	// GetCart获取购物车信息
	GetCart(context.Context, *GetCartReq) (*GetCartResp, error)
	// RemoveCartItem删除购物车商品
	RemoveCartItem(context.Context, *RemoveCartItemReq) (*RemoveCartItemResp, error)
	// UpsertItem新增购物车商品
	UpsertItem(context.Context, *UpsertItemReq) (*UpsertItemResp, error)
}

func RegisterCartServiceHTTPServer(s *http.Server, srv CartServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/cart", _CartService_UpsertItem0_HTTP_Handler(srv))
	r.GET("/v1/cart", _CartService_GetCart0_HTTP_Handler(srv))
	r.DELETE("/v1/cart", _CartService_EmptyCart0_HTTP_Handler(srv))
	r.DELETE("/v1/cart/item/{product_id}", _CartService_RemoveCartItem0_HTTP_Handler(srv))
}

func _CartService_UpsertItem0_HTTP_Handler(srv CartServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpsertItemReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCartServiceUpsertItem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpsertItem(ctx, req.(*UpsertItemReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpsertItemResp)
		return ctx.Result(200, reply)
	}
}

func _CartService_GetCart0_HTTP_Handler(srv CartServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCartReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCartServiceGetCart)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCart(ctx, req.(*GetCartReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCartResp)
		return ctx.Result(200, reply)
	}
}

func _CartService_EmptyCart0_HTTP_Handler(srv CartServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EmptyCartReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCartServiceEmptyCart)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.EmptyCart(ctx, req.(*EmptyCartReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EmptyCartResp)
		return ctx.Result(200, reply)
	}
}

func _CartService_RemoveCartItem0_HTTP_Handler(srv CartServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RemoveCartItemReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCartServiceRemoveCartItem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RemoveCartItem(ctx, req.(*RemoveCartItemReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RemoveCartItemResp)
		return ctx.Result(200, reply)
	}
}

type CartServiceHTTPClient interface {
	EmptyCart(ctx context.Context, req *EmptyCartReq, opts ...http.CallOption) (rsp *EmptyCartResp, err error)
	GetCart(ctx context.Context, req *GetCartReq, opts ...http.CallOption) (rsp *GetCartResp, err error)
	RemoveCartItem(ctx context.Context, req *RemoveCartItemReq, opts ...http.CallOption) (rsp *RemoveCartItemResp, err error)
	UpsertItem(ctx context.Context, req *UpsertItemReq, opts ...http.CallOption) (rsp *UpsertItemResp, err error)
}

type CartServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewCartServiceHTTPClient(client *http.Client) CartServiceHTTPClient {
	return &CartServiceHTTPClientImpl{client}
}

func (c *CartServiceHTTPClientImpl) EmptyCart(ctx context.Context, in *EmptyCartReq, opts ...http.CallOption) (*EmptyCartResp, error) {
	var out EmptyCartResp
	pattern := "/v1/cart"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCartServiceEmptyCart))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CartServiceHTTPClientImpl) GetCart(ctx context.Context, in *GetCartReq, opts ...http.CallOption) (*GetCartResp, error) {
	var out GetCartResp
	pattern := "/v1/cart"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCartServiceGetCart))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CartServiceHTTPClientImpl) RemoveCartItem(ctx context.Context, in *RemoveCartItemReq, opts ...http.CallOption) (*RemoveCartItemResp, error) {
	var out RemoveCartItemResp
	pattern := "/v1/cart/item/{product_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCartServiceRemoveCartItem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CartServiceHTTPClientImpl) UpsertItem(ctx context.Context, in *UpsertItemReq, opts ...http.CallOption) (*UpsertItemResp, error) {
	var out UpsertItemResp
	pattern := "/v1/cart"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCartServiceUpsertItem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

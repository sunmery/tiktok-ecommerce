{
  "swagger": "2.0",
  "info": {
    "title": "v1/user.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "UserService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/users/address": {
      "get": {
        "operationId": "UserService_GetAddresses",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetAddressesReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "owner",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      },
      "delete": {
        "operationId": "UserService_DeleteAddresses",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteAddressesReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "addresses_id",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "name",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "owner",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      },
      "post": {
        "operationId": "UserService_CreateAddresses",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Address"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1Address"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      },
      "patch": {
        "operationId": "UserService_UpdateAddresses",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Address"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1Address"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v1/users/credit_cards": {
      "post": {
        "operationId": "UserService_CreateCreditCard",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CardsReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreditCards"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      },
      "patch": {
        "operationId": "UserService_UpdateCreditCard",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CardsReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreditCards"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v1/users/credit_cards/all": {
      "get": {
        "operationId": "UserService_ListCreditCards",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListCreditCardsReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "owner",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v1/users/credit_cards/{id}": {
      "delete": {
        "operationId": "UserService_DeleteCreditCard",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CardsReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v1/users/credit_cards/{number}": {
      "get": {
        "operationId": "UserService_GetCreditCard",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetCreditCardsReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "owner",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v1/users/profile": {
      "get": {
        "operationId": "UserService_GetUserProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetProfileResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "authorization",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    }
  },
  "definitions": {
    "UserInfoProperties": {
      "type": "object",
      "properties": {
        "no": {
          "type": "string"
        },
        "oauthGoogleAvatarUrl": {
          "type": "string"
        },
        "oauthGoogleDisplayName": {
          "type": "string"
        },
        "oauthGoogleEmail": {
          "type": "string"
        },
        "oauthGoogleId": {
          "type": "string"
        },
        "oauthGoogleUsername": {
          "type": "string"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1Address": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "userId": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "zipCode": {
          "type": "string"
        },
        "streetAddress": {
          "type": "string"
        }
      },
      "required": [
        "userId",
        "city",
        "state",
        "country",
        "zipCode",
        "streetAddress"
      ]
    },
    "v1CardsReply": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1CreditCards": {
      "type": "object",
      "properties": {
        "number": {
          "type": "string"
        },
        "cvv": {
          "type": "string"
        },
        "expiration_year": {
          "type": "string"
        },
        "expiration_month": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "v1DeleteAddressesReply": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        }
      },
      "required": [
        "message",
        "id",
        "code"
      ]
    },
    "v1GetAddressesReply": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Address"
          }
        }
      },
      "required": [
        "addresses"
      ]
    },
    "v1GetCreditCardsReply": {
      "type": "object",
      "properties": {
        "credit_cards": {
          "$ref": "#/definitions/v1CreditCards"
        }
      }
    },
    "v1GetProfileResponse": {
      "type": "object",
      "properties": {
        "state": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/v1UserInfo"
        }
      }
    },
    "v1ListCreditCardsReply": {
      "type": "object",
      "properties": {
        "credit_cards": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CreditCards"
          }
        }
      }
    },
    "v1UserInfo": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "createdTime": {
          "type": "string",
          "format": "date-time"
        },
        "updatedTime": {
          "type": "string",
          "format": "date-time"
        },
        "deletedTime": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "passwordSalt": {
          "type": "string"
        },
        "passwordType": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "avatar": {
          "type": "string"
        },
        "avatarType": {
          "type": "string"
        },
        "permanentAvatar": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "emailVerified": {
          "type": "boolean"
        },
        "phone": {
          "type": "string"
        },
        "countryCode": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "address": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "affiliation": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "idCardType": {
          "type": "string"
        },
        "idCard": {
          "type": "string"
        },
        "homepage": {
          "type": "string"
        },
        "bio": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        },
        "language": {
          "type": "string"
        },
        "gender": {
          "type": "string"
        },
        "birthday": {
          "type": "string"
        },
        "education": {
          "type": "string"
        },
        "score": {
          "type": "integer",
          "format": "int64"
        },
        "karma": {
          "type": "integer",
          "format": "int64"
        },
        "ranking": {
          "type": "integer",
          "format": "int64"
        },
        "balance": {
          "type": "integer",
          "format": "int64"
        },
        "currency": {
          "type": "string"
        },
        "isDefaultAvatar": {
          "type": "boolean"
        },
        "isOnline": {
          "type": "boolean"
        },
        "isAdmin": {
          "type": "boolean"
        },
        "isForbidden": {
          "type": "boolean"
        },
        "isDeleted": {
          "type": "boolean"
        },
        "signupApplication": {
          "type": "string"
        },
        "hash": {
          "type": "string"
        },
        "preHash": {
          "type": "string"
        },
        "accessKey": {
          "type": "string"
        },
        "accessSecret": {
          "type": "string"
        },
        "accessToken": {
          "type": "string"
        },
        "createdIp": {
          "type": "string"
        },
        "lastSigninTime": {
          "type": "string"
        },
        "lastSigninIp": {
          "type": "string"
        },
        "github": {
          "type": "string"
        },
        "google": {
          "type": "string"
        },
        "qq": {
          "type": "string"
        },
        "wechat": {
          "type": "string"
        },
        "facebook": {
          "type": "string"
        },
        "dingtalk": {
          "type": "string"
        },
        "weibo": {
          "type": "string"
        },
        "gitee": {
          "type": "string"
        },
        "linkedin": {
          "type": "string"
        },
        "wecom": {
          "type": "string"
        },
        "lark": {
          "type": "string"
        },
        "gitlab": {
          "type": "string"
        },
        "adfs": {
          "type": "string"
        },
        "baidu": {
          "type": "string"
        },
        "alipay": {
          "type": "string"
        },
        "casdoor": {
          "type": "string"
        },
        "infoflow": {
          "type": "string"
        },
        "apple": {
          "type": "string"
        },
        "azuread": {
          "type": "string"
        },
        "azureadb2c": {
          "type": "string"
        },
        "slack": {
          "type": "string"
        },
        "steam": {
          "type": "string"
        },
        "bilibili": {
          "type": "string"
        },
        "okta": {
          "type": "string"
        },
        "douyin": {
          "type": "string"
        },
        "line": {
          "type": "string"
        },
        "amazon": {
          "type": "string"
        },
        "auth0": {
          "type": "string"
        },
        "battlenet": {
          "type": "string"
        },
        "bitbucket": {
          "type": "string"
        },
        "box": {
          "type": "string"
        },
        "cloudfoundry": {
          "type": "string"
        },
        "dailymotion": {
          "type": "string"
        },
        "deezer": {
          "type": "string"
        },
        "digitalocean": {
          "type": "string"
        },
        "discord": {
          "type": "string"
        },
        "dropbox": {
          "type": "string"
        },
        "eveonline": {
          "type": "string"
        },
        "fitbit": {
          "type": "string"
        },
        "gitea": {
          "type": "string"
        },
        "heroku": {
          "type": "string"
        },
        "influxcloud": {
          "type": "string"
        },
        "instagram": {
          "type": "string"
        },
        "intercom": {
          "type": "string"
        },
        "kakao": {
          "type": "string"
        },
        "lastfm": {
          "type": "string"
        },
        "mailru": {
          "type": "string"
        },
        "meetup": {
          "type": "string"
        },
        "microsoftonline": {
          "type": "string"
        },
        "naver": {
          "type": "string"
        },
        "nextcloud": {
          "type": "string"
        },
        "onedrive": {
          "type": "string"
        },
        "oura": {
          "type": "string"
        },
        "patreon": {
          "type": "string"
        },
        "paypal": {
          "type": "string"
        },
        "salesforce": {
          "type": "string"
        },
        "shopify": {
          "type": "string"
        },
        "soundcloud": {
          "type": "string"
        },
        "spotify": {
          "type": "string"
        },
        "strava": {
          "type": "string"
        },
        "stripe": {
          "type": "string"
        },
        "tiktok": {
          "type": "string"
        },
        "tumblr": {
          "type": "string"
        },
        "twitch": {
          "type": "string"
        },
        "twitter": {
          "type": "string"
        },
        "typetalk": {
          "type": "string"
        },
        "uber": {
          "type": "string"
        },
        "vk": {
          "type": "string"
        },
        "wepay": {
          "type": "string"
        },
        "xero": {
          "type": "string"
        },
        "yahoo": {
          "type": "string"
        },
        "yammer": {
          "type": "string"
        },
        "yandex": {
          "type": "string"
        },
        "zoom": {
          "type": "string"
        },
        "metamask": {
          "type": "string"
        },
        "web3onboard": {
          "type": "string"
        },
        "custom": {
          "type": "string"
        },
        "webauthnCredentials": {
          "$ref": "#/definitions/protobufAny"
        },
        "preferredMfaType": {
          "type": "string"
        },
        "recoveryCodes": {
          "$ref": "#/definitions/protobufAny"
        },
        "totpSecret": {
          "type": "string"
        },
        "mfaPhoneEnabled": {
          "type": "boolean"
        },
        "mfaEmailEnabled": {
          "type": "boolean"
        },
        "invitation": {
          "type": "string"
        },
        "invitationCode": {
          "type": "string"
        },
        "faceIds": {
          "$ref": "#/definitions/protobufAny"
        },
        "ldap": {
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/UserInfoProperties"
        },
        "roles": {
          "$ref": "#/definitions/protobufAny"
        },
        "permissions": {
          "$ref": "#/definitions/protobufAny"
        },
        "groups": {
          "$ref": "#/definitions/protobufAny"
        },
        "lastSigninWrongTime": {
          "type": "string"
        },
        "signinWrongTimes": {
          "type": "integer",
          "format": "int64"
        },
        "managedAccounts": {
          "$ref": "#/definitions/protobufAny"
        }
      }
    }
  }
}

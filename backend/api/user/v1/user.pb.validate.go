// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/user.proto

package userv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _user_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on GetFavoritesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFavoritesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFavoritesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFavoritesRequestMultiError, or nil if none found.
func (m *GetFavoritesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFavoritesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetFavoritesRequestMultiError(errors)
	}

	return nil
}

// GetFavoritesRequestMultiError is an error wrapping multiple validation
// errors returned by GetFavoritesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetFavoritesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFavoritesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFavoritesRequestMultiError) AllErrors() []error { return m }

// GetFavoritesRequestValidationError is the validation error returned by
// GetFavoritesRequest.Validate if the designated constraints aren't met.
type GetFavoritesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFavoritesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFavoritesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFavoritesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFavoritesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFavoritesRequestValidationError) ErrorName() string {
	return "GetFavoritesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFavoritesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFavoritesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFavoritesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFavoritesRequestValidationError{}

// Validate checks the field values on UpdateFavoritesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateFavoritesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFavoritesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFavoritesRequestMultiError, or nil if none found.
func (m *UpdateFavoritesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFavoritesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductId

	// no validation rules for MerchantId

	if len(errors) > 0 {
		return UpdateFavoritesRequestMultiError(errors)
	}

	return nil
}

// UpdateFavoritesRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateFavoritesRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateFavoritesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFavoritesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFavoritesRequestMultiError) AllErrors() []error { return m }

// UpdateFavoritesRequestValidationError is the validation error returned by
// UpdateFavoritesRequest.Validate if the designated constraints aren't met.
type UpdateFavoritesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFavoritesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFavoritesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFavoritesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFavoritesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFavoritesRequestValidationError) ErrorName() string {
	return "UpdateFavoritesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFavoritesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFavoritesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFavoritesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFavoritesRequestValidationError{}

// Validate checks the field values on Favorites with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Favorites) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Favorites with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FavoritesMultiError, or nil
// if none found.
func (m *Favorites) ValidateAll() error {
	return m.validate(true)
}

func (m *Favorites) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FavoritesValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FavoritesValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FavoritesValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FavoritesMultiError(errors)
	}

	return nil
}

// FavoritesMultiError is an error wrapping multiple validation errors returned
// by Favorites.ValidateAll() if the designated constraints aren't met.
type FavoritesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FavoritesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FavoritesMultiError) AllErrors() []error { return m }

// FavoritesValidationError is the validation error returned by
// Favorites.Validate if the designated constraints aren't met.
type FavoritesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FavoritesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FavoritesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FavoritesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FavoritesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FavoritesValidationError) ErrorName() string { return "FavoritesValidationError" }

// Error satisfies the builtin error interface
func (e FavoritesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFavorites.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FavoritesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FavoritesValidationError{}

// Validate checks the field values on UpdateFavoritesResply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateFavoritesResply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFavoritesResply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFavoritesResplyMultiError, or nil if none found.
func (m *UpdateFavoritesResply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFavoritesResply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	// no validation rules for Code

	if len(errors) > 0 {
		return UpdateFavoritesResplyMultiError(errors)
	}

	return nil
}

// UpdateFavoritesResplyMultiError is an error wrapping multiple validation
// errors returned by UpdateFavoritesResply.ValidateAll() if the designated
// constraints aren't met.
type UpdateFavoritesResplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFavoritesResplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFavoritesResplyMultiError) AllErrors() []error { return m }

// UpdateFavoritesResplyValidationError is the validation error returned by
// UpdateFavoritesResply.Validate if the designated constraints aren't met.
type UpdateFavoritesResplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFavoritesResplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFavoritesResplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFavoritesResplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFavoritesResplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFavoritesResplyValidationError) ErrorName() string {
	return "UpdateFavoritesResplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFavoritesResplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFavoritesResply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFavoritesResplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFavoritesResplyValidationError{}

// Validate checks the field values on CreditCard with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreditCard) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreditCard with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreditCardMultiError, or
// nil if none found.
func (m *CreditCard) ValidateAll() error {
	return m.validate(true)
}

func (m *CreditCard) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetCurrency()) != 3 {
		err := CreditCardValidationError{
			field:  "Currency",
			reason: "value length must be 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if l := utf8.RuneCountInString(m.GetNumber()); l < 16 || l > 20 {
		err := CreditCardValidationError{
			field:  "Number",
			reason: "value length must be between 16 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Cvv

	if utf8.RuneCountInString(m.GetExpYear()) != 4 {
		err := CreditCardValidationError{
			field:  "ExpYear",
			reason: "value length must be 4 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if utf8.RuneCountInString(m.GetExpMonth()) != 2 {
		err := CreditCardValidationError{
			field:  "ExpMonth",
			reason: "value length must be 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if utf8.RuneCountInString(m.GetOwner()) < 2 {
		err := CreditCardValidationError{
			field:  "Owner",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for Brand

	// no validation rules for Country

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreditCardValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreditCardValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreditCardValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreditCardMultiError(errors)
	}

	return nil
}

// CreditCardMultiError is an error wrapping multiple validation errors
// returned by CreditCard.ValidateAll() if the designated constraints aren't met.
type CreditCardMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreditCardMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreditCardMultiError) AllErrors() []error { return m }

// CreditCardValidationError is the validation error returned by
// CreditCard.Validate if the designated constraints aren't met.
type CreditCardValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreditCardValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreditCardValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreditCardValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreditCardValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreditCardValidationError) ErrorName() string { return "CreditCardValidationError" }

// Error satisfies the builtin error interface
func (e CreditCardValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreditCard.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreditCardValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreditCardValidationError{}

// Validate checks the field values on CreditCards with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreditCards) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreditCards with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreditCardsMultiError, or
// nil if none found.
func (m *CreditCards) ValidateAll() error {
	return m.validate(true)
}

func (m *CreditCards) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCreditCards() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreditCardsValidationError{
						field:  fmt.Sprintf("CreditCards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreditCardsValidationError{
						field:  fmt.Sprintf("CreditCards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreditCardsValidationError{
					field:  fmt.Sprintf("CreditCards[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreditCardsMultiError(errors)
	}

	return nil
}

// CreditCardsMultiError is an error wrapping multiple validation errors
// returned by CreditCards.ValidateAll() if the designated constraints aren't met.
type CreditCardsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreditCardsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreditCardsMultiError) AllErrors() []error { return m }

// CreditCardsValidationError is the validation error returned by
// CreditCards.Validate if the designated constraints aren't met.
type CreditCardsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreditCardsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreditCardsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreditCardsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreditCardsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreditCardsValidationError) ErrorName() string { return "CreditCardsValidationError" }

// Error satisfies the builtin error interface
func (e CreditCardsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreditCards.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreditCardsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreditCardsValidationError{}

// Validate checks the field values on GetCreditCardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCreditCardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCreditCardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCreditCardRequestMultiError, or nil if none found.
func (m *GetCreditCardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCreditCardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetUserId()) != 36 {
		err := GetCreditCardRequestValidationError{
			field:  "UserId",
			reason: "value length must be 36 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = GetCreditCardRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCreditCardRequestMultiError(errors)
	}

	return nil
}

func (m *GetCreditCardRequest) _validateUuid(uuid string) error {
	if matched := _user_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetCreditCardRequestMultiError is an error wrapping multiple validation
// errors returned by GetCreditCardRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCreditCardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCreditCardRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCreditCardRequestMultiError) AllErrors() []error { return m }

// GetCreditCardRequestValidationError is the validation error returned by
// GetCreditCardRequest.Validate if the designated constraints aren't met.
type GetCreditCardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCreditCardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCreditCardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCreditCardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCreditCardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCreditCardRequestValidationError) ErrorName() string {
	return "GetCreditCardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCreditCardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCreditCardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCreditCardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCreditCardRequestValidationError{}

// Validate checks the field values on CardsReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CardsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CardsReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CardsReplyMultiError, or
// nil if none found.
func (m *CardsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CardsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	// no validation rules for Code

	if len(errors) > 0 {
		return CardsReplyMultiError(errors)
	}

	return nil
}

// CardsReplyMultiError is an error wrapping multiple validation errors
// returned by CardsReply.ValidateAll() if the designated constraints aren't met.
type CardsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CardsReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CardsReplyMultiError) AllErrors() []error { return m }

// CardsReplyValidationError is the validation error returned by
// CardsReply.Validate if the designated constraints aren't met.
type CardsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CardsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CardsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CardsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CardsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CardsReplyValidationError) ErrorName() string { return "CardsReplyValidationError" }

// Error satisfies the builtin error interface
func (e CardsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCardsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CardsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CardsReplyValidationError{}

// Validate checks the field values on DeleteCreditCardsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCreditCardsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCreditCardsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCreditCardsRequestMultiError, or nil if none found.
func (m *DeleteCreditCardsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCreditCardsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteCreditCardsRequestMultiError(errors)
	}

	return nil
}

// DeleteCreditCardsRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCreditCardsRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCreditCardsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCreditCardsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCreditCardsRequestMultiError) AllErrors() []error { return m }

// DeleteCreditCardsRequestValidationError is the validation error returned by
// DeleteCreditCardsRequest.Validate if the designated constraints aren't met.
type DeleteCreditCardsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCreditCardsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCreditCardsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCreditCardsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCreditCardsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCreditCardsRequestValidationError) ErrorName() string {
	return "DeleteCreditCardsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCreditCardsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCreditCardsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCreditCardsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCreditCardsRequestValidationError{}

// Validate checks the field values on ListCreditCardsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCreditCardsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCreditCardsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCreditCardsReplyMultiError, or nil if none found.
func (m *ListCreditCardsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCreditCardsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCreditCards() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCreditCardsReplyValidationError{
						field:  fmt.Sprintf("CreditCards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCreditCardsReplyValidationError{
						field:  fmt.Sprintf("CreditCards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCreditCardsReplyValidationError{
					field:  fmt.Sprintf("CreditCards[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCreditCardsReplyMultiError(errors)
	}

	return nil
}

// ListCreditCardsReplyMultiError is an error wrapping multiple validation
// errors returned by ListCreditCardsReply.ValidateAll() if the designated
// constraints aren't met.
type ListCreditCardsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCreditCardsReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCreditCardsReplyMultiError) AllErrors() []error { return m }

// ListCreditCardsReplyValidationError is the validation error returned by
// ListCreditCardsReply.Validate if the designated constraints aren't met.
type ListCreditCardsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCreditCardsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCreditCardsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCreditCardsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCreditCardsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCreditCardsReplyValidationError) ErrorName() string {
	return "ListCreditCardsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListCreditCardsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCreditCardsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCreditCardsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCreditCardsReplyValidationError{}

// Validate checks the field values on ConsumerAddress with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ConsumerAddress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConsumerAddress with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConsumerAddressMultiError, or nil if none found.
func (m *ConsumerAddress) ValidateAll() error {
	return m.validate(true)
}

func (m *ConsumerAddress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for City

	// no validation rules for State

	// no validation rules for Country

	// no validation rules for ZipCode

	// no validation rules for StreetAddress

	if len(errors) > 0 {
		return ConsumerAddressMultiError(errors)
	}

	return nil
}

// ConsumerAddressMultiError is an error wrapping multiple validation errors
// returned by ConsumerAddress.ValidateAll() if the designated constraints
// aren't met.
type ConsumerAddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConsumerAddressMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConsumerAddressMultiError) AllErrors() []error { return m }

// ConsumerAddressValidationError is the validation error returned by
// ConsumerAddress.Validate if the designated constraints aren't met.
type ConsumerAddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConsumerAddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConsumerAddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConsumerAddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConsumerAddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConsumerAddressValidationError) ErrorName() string { return "ConsumerAddressValidationError" }

// Error satisfies the builtin error interface
func (e ConsumerAddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConsumerAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConsumerAddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConsumerAddressValidationError{}

// Validate checks the field values on UpdateConsumerAddressesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateConsumerAddressesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateConsumerAddressesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateConsumerAddressesRequestMultiError, or nil if none found.
func (m *UpdateConsumerAddressesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateConsumerAddressesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAddresses()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateConsumerAddressesRequestValidationError{
					field:  "Addresses",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateConsumerAddressesRequestValidationError{
					field:  "Addresses",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddresses()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateConsumerAddressesRequestValidationError{
				field:  "Addresses",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateConsumerAddressesRequestMultiError(errors)
	}

	return nil
}

// UpdateConsumerAddressesRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateConsumerAddressesRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateConsumerAddressesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateConsumerAddressesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateConsumerAddressesRequestMultiError) AllErrors() []error { return m }

// UpdateConsumerAddressesRequestValidationError is the validation error
// returned by UpdateConsumerAddressesRequest.Validate if the designated
// constraints aren't met.
type UpdateConsumerAddressesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateConsumerAddressesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateConsumerAddressesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateConsumerAddressesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateConsumerAddressesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateConsumerAddressesRequestValidationError) ErrorName() string {
	return "UpdateConsumerAddressesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateConsumerAddressesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateConsumerAddressesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateConsumerAddressesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateConsumerAddressesRequestValidationError{}

// Validate checks the field values on DeleteConsumerAddressesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteConsumerAddressesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteConsumerAddressesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteConsumerAddressesRequestMultiError, or nil if none found.
func (m *DeleteConsumerAddressesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteConsumerAddressesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AddressesId

	if utf8.RuneCountInString(m.GetUserId()) != 36 {
		err := DeleteConsumerAddressesRequestValidationError{
			field:  "UserId",
			reason: "value length must be 36 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = DeleteConsumerAddressesRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteConsumerAddressesRequestMultiError(errors)
	}

	return nil
}

func (m *DeleteConsumerAddressesRequest) _validateUuid(uuid string) error {
	if matched := _user_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteConsumerAddressesRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteConsumerAddressesRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteConsumerAddressesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteConsumerAddressesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteConsumerAddressesRequestMultiError) AllErrors() []error { return m }

// DeleteConsumerAddressesRequestValidationError is the validation error
// returned by DeleteConsumerAddressesRequest.Validate if the designated
// constraints aren't met.
type DeleteConsumerAddressesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteConsumerAddressesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteConsumerAddressesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteConsumerAddressesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteConsumerAddressesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteConsumerAddressesRequestValidationError) ErrorName() string {
	return "DeleteConsumerAddressesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteConsumerAddressesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteConsumerAddressesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteConsumerAddressesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteConsumerAddressesRequestValidationError{}

// Validate checks the field values on ConsumerAddressReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConsumerAddressReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConsumerAddressReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConsumerAddressReplyMultiError, or nil if none found.
func (m *ConsumerAddressReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ConsumerAddressReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConsumerAddressReplyValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConsumerAddressReplyValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConsumerAddressReplyValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConsumerAddressReplyMultiError(errors)
	}

	return nil
}

// ConsumerAddressReplyMultiError is an error wrapping multiple validation
// errors returned by ConsumerAddressReply.ValidateAll() if the designated
// constraints aren't met.
type ConsumerAddressReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConsumerAddressReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConsumerAddressReplyMultiError) AllErrors() []error { return m }

// ConsumerAddressReplyValidationError is the validation error returned by
// ConsumerAddressReply.Validate if the designated constraints aren't met.
type ConsumerAddressReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConsumerAddressReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConsumerAddressReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConsumerAddressReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConsumerAddressReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConsumerAddressReplyValidationError) ErrorName() string {
	return "ConsumerAddressReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ConsumerAddressReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConsumerAddressReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConsumerAddressReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConsumerAddressReplyValidationError{}

// Validate checks the field values on GetConsumerAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConsumerAddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConsumerAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConsumerAddressRequestMultiError, or nil if none found.
func (m *GetConsumerAddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConsumerAddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AddressId

	if utf8.RuneCountInString(m.GetUserId()) != 36 {
		err := GetConsumerAddressRequestValidationError{
			field:  "UserId",
			reason: "value length must be 36 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = GetConsumerAddressRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetConsumerAddressRequestMultiError(errors)
	}

	return nil
}

func (m *GetConsumerAddressRequest) _validateUuid(uuid string) error {
	if matched := _user_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetConsumerAddressRequestMultiError is an error wrapping multiple validation
// errors returned by GetConsumerAddressRequest.ValidateAll() if the
// designated constraints aren't met.
type GetConsumerAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConsumerAddressRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConsumerAddressRequestMultiError) AllErrors() []error { return m }

// GetConsumerAddressRequestValidationError is the validation error returned by
// GetConsumerAddressRequest.Validate if the designated constraints aren't met.
type GetConsumerAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConsumerAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConsumerAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConsumerAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConsumerAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConsumerAddressRequestValidationError) ErrorName() string {
	return "GetConsumerAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetConsumerAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConsumerAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConsumerAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConsumerAddressRequestValidationError{}

// Validate checks the field values on GetConsumerAddressesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConsumerAddressesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConsumerAddressesReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConsumerAddressesReplyMultiError, or nil if none found.
func (m *GetConsumerAddressesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConsumerAddressesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAddresses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetConsumerAddressesReplyValidationError{
						field:  fmt.Sprintf("Addresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetConsumerAddressesReplyValidationError{
						field:  fmt.Sprintf("Addresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetConsumerAddressesReplyValidationError{
					field:  fmt.Sprintf("Addresses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetConsumerAddressesReplyMultiError(errors)
	}

	return nil
}

// GetConsumerAddressesReplyMultiError is an error wrapping multiple validation
// errors returned by GetConsumerAddressesReply.ValidateAll() if the
// designated constraints aren't met.
type GetConsumerAddressesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConsumerAddressesReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConsumerAddressesReplyMultiError) AllErrors() []error { return m }

// GetConsumerAddressesReplyValidationError is the validation error returned by
// GetConsumerAddressesReply.Validate if the designated constraints aren't met.
type GetConsumerAddressesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConsumerAddressesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConsumerAddressesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConsumerAddressesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConsumerAddressesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConsumerAddressesReplyValidationError) ErrorName() string {
	return "GetConsumerAddressesReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetConsumerAddressesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConsumerAddressesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConsumerAddressesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConsumerAddressesReplyValidationError{}

// Validate checks the field values on DeleteConsumerAddressesReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteConsumerAddressesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteConsumerAddressesReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteConsumerAddressesReplyMultiError, or nil if none found.
func (m *DeleteConsumerAddressesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteConsumerAddressesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	// no validation rules for Id

	// no validation rules for Code

	if len(errors) > 0 {
		return DeleteConsumerAddressesReplyMultiError(errors)
	}

	return nil
}

// DeleteConsumerAddressesReplyMultiError is an error wrapping multiple
// validation errors returned by DeleteConsumerAddressesReply.ValidateAll() if
// the designated constraints aren't met.
type DeleteConsumerAddressesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteConsumerAddressesReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteConsumerAddressesReplyMultiError) AllErrors() []error { return m }

// DeleteConsumerAddressesReplyValidationError is the validation error returned
// by DeleteConsumerAddressesReply.Validate if the designated constraints
// aren't met.
type DeleteConsumerAddressesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteConsumerAddressesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteConsumerAddressesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteConsumerAddressesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteConsumerAddressesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteConsumerAddressesReplyValidationError) ErrorName() string {
	return "DeleteConsumerAddressesReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteConsumerAddressesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteConsumerAddressesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteConsumerAddressesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteConsumerAddressesReplyValidationError{}

// Validate checks the field values on GetProfileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProfileRequestMultiError, or nil if none found.
func (m *GetProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetProfileRequestMultiError(errors)
	}

	return nil
}

// GetProfileRequestMultiError is an error wrapping multiple validation errors
// returned by GetProfileRequest.ValidateAll() if the designated constraints
// aren't met.
type GetProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProfileRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProfileRequestMultiError) AllErrors() []error { return m }

// GetProfileRequestValidationError is the validation error returned by
// GetProfileRequest.Validate if the designated constraints aren't met.
type GetProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProfileRequestValidationError) ErrorName() string {
	return "GetProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProfileRequestValidationError{}

// Validate checks the field values on GetProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProfileResponseMultiError, or nil if none found.
func (m *GetProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Owner

	// no validation rules for Name

	// no validation rules for Avatar

	// no validation rules for Email

	// no validation rules for Id

	// no validation rules for Role

	// no validation rules for CreatedTime

	// no validation rules for UpdatedTime

	// no validation rules for DisplayName

	// no validation rules for IsDeleted

	// no validation rules for SignupApplication

	if len(errors) > 0 {
		return GetProfileResponseMultiError(errors)
	}

	return nil
}

// GetProfileResponseMultiError is an error wrapping multiple validation errors
// returned by GetProfileResponse.ValidateAll() if the designated constraints
// aren't met.
type GetProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProfileResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProfileResponseMultiError) AllErrors() []error { return m }

// GetProfileResponseValidationError is the validation error returned by
// GetProfileResponse.Validate if the designated constraints aren't met.
type GetProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProfileResponseValidationError) ErrorName() string {
	return "GetProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProfileResponseValidationError{}

// Validate checks the field values on GetUsersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUsersRequestMultiError, or nil if none found.
func (m *GetUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUsersRequestMultiError(errors)
	}

	return nil
}

// GetUsersRequestMultiError is an error wrapping multiple validation errors
// returned by GetUsersRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsersRequestMultiError) AllErrors() []error { return m }

// GetUsersRequestValidationError is the validation error returned by
// GetUsersRequest.Validate if the designated constraints aren't met.
type GetUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersRequestValidationError) ErrorName() string { return "GetUsersRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersRequestValidationError{}

// Validate checks the field values on GetUsersResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUsersResponseMultiError, or nil if none found.
func (m *GetUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUsersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUsersResponseMultiError(errors)
	}

	return nil
}

// GetUsersResponseMultiError is an error wrapping multiple validation errors
// returned by GetUsersResponse.ValidateAll() if the designated constraints
// aren't met.
type GetUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsersResponseMultiError) AllErrors() []error { return m }

// GetUsersResponseValidationError is the validation error returned by
// GetUsersResponse.Validate if the designated constraints aren't met.
type GetUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersResponseValidationError) ErrorName() string { return "GetUsersResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersResponseValidationError{}

// Validate checks the field values on DeleteUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserRequestMultiError, or nil if none found.
func (m *DeleteUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Owner

	// no validation rules for Name

	if len(errors) > 0 {
		return DeleteUserRequestMultiError(errors)
	}

	return nil
}

// DeleteUserRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteUserRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserRequestMultiError) AllErrors() []error { return m }

// DeleteUserRequestValidationError is the validation error returned by
// DeleteUserRequest.Validate if the designated constraints aren't met.
type DeleteUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserRequestValidationError) ErrorName() string {
	return "DeleteUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserRequestValidationError{}

// Validate checks the field values on DeleteUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserResponseMultiError, or nil if none found.
func (m *DeleteUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Code

	if len(errors) > 0 {
		return DeleteUserResponseMultiError(errors)
	}

	return nil
}

// DeleteUserResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteUserResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserResponseMultiError) AllErrors() []error { return m }

// DeleteUserResponseValidationError is the validation error returned by
// DeleteUserResponse.Validate if the designated constraints aren't met.
type DeleteUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserResponseValidationError) ErrorName() string {
	return "DeleteUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserResponseValidationError{}

// Validate checks the field values on UpdateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserRequestMultiError, or nil if none found.
func (m *UpdateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Owner

	// no validation rules for Name

	// no validation rules for Avatar

	// no validation rules for Email

	// no validation rules for DisplayName

	// no validation rules for SignupApplication

	if len(errors) > 0 {
		return UpdateUserRequestMultiError(errors)
	}

	return nil
}

// UpdateUserRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserRequestMultiError) AllErrors() []error { return m }

// UpdateUserRequestValidationError is the validation error returned by
// UpdateUserRequest.Validate if the designated constraints aren't met.
type UpdateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRequestValidationError) ErrorName() string {
	return "UpdateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRequestValidationError{}

// Validate checks the field values on UpdateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserResponseMultiError, or nil if none found.
func (m *UpdateUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Code

	if len(errors) > 0 {
		return UpdateUserResponseMultiError(errors)
	}

	return nil
}

// UpdateUserResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateUserResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserResponseMultiError) AllErrors() []error { return m }

// UpdateUserResponseValidationError is the validation error returned by
// UpdateUserResponse.Validate if the designated constraints aren't met.
type UpdateUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserResponseValidationError) ErrorName() string {
	return "UpdateUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserResponseValidationError{}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: v1/user.proto

package userv1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreditCards struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Number          string                 `protobuf:"bytes,1,opt,name=number,proto3" json:"number,omitempty"`
	Cvv             string                 `protobuf:"bytes,2,opt,name=cvv,proto3" json:"cvv,omitempty"`
	ExpirationYear  string                 `protobuf:"bytes,3,opt,name=expiration_year,proto3" json:"expiration_year,omitempty"`
	ExpirationMonth string                 `protobuf:"bytes,4,opt,name=expiration_month,proto3" json:"expiration_month,omitempty"`
	Owner           string                 `protobuf:"bytes,5,opt,name=owner,proto3" json:"owner,omitempty"`
	Name            string                 `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Id              uint32                 `protobuf:"varint,7,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CreditCards) Reset() {
	*x = CreditCards{}
	mi := &file_v1_user_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreditCards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditCards) ProtoMessage() {}

func (x *CreditCards) ProtoReflect() protoreflect.Message {
	mi := &file_v1_user_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditCards.ProtoReflect.Descriptor instead.
func (*CreditCards) Descriptor() ([]byte, []int) {
	return file_v1_user_proto_rawDescGZIP(), []int{0}
}

func (x *CreditCards) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *CreditCards) GetCvv() string {
	if x != nil {
		return x.Cvv
	}
	return ""
}

func (x *CreditCards) GetExpirationYear() string {
	if x != nil {
		return x.ExpirationYear
	}
	return ""
}

func (x *CreditCards) GetExpirationMonth() string {
	if x != nil {
		return x.ExpirationMonth
	}
	return ""
}

func (x *CreditCards) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *CreditCards) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreditCards) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CardsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Code          int32                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CardsReply) Reset() {
	*x = CardsReply{}
	mi := &file_v1_user_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CardsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardsReply) ProtoMessage() {}

func (x *CardsReply) ProtoReflect() protoreflect.Message {
	mi := &file_v1_user_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardsReply.ProtoReflect.Descriptor instead.
func (*CardsReply) Descriptor() ([]byte, []int) {
	return file_v1_user_proto_rawDescGZIP(), []int{1}
}

func (x *CardsReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CardsReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type DeleteCreditCardsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCreditCardsRequest) Reset() {
	*x = DeleteCreditCardsRequest{}
	mi := &file_v1_user_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCreditCardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCreditCardsRequest) ProtoMessage() {}

func (x *DeleteCreditCardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_user_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCreditCardsRequest.ProtoReflect.Descriptor instead.
func (*DeleteCreditCardsRequest) Descriptor() ([]byte, []int) {
	return file_v1_user_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteCreditCardsRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetCreditCardsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Owner         string                 `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Number        string                 `protobuf:"bytes,3,opt,name=number,proto3" json:"number,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCreditCardsRequest) Reset() {
	*x = GetCreditCardsRequest{}
	mi := &file_v1_user_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCreditCardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCreditCardsRequest) ProtoMessage() {}

func (x *GetCreditCardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_user_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCreditCardsRequest.ProtoReflect.Descriptor instead.
func (*GetCreditCardsRequest) Descriptor() ([]byte, []int) {
	return file_v1_user_proto_rawDescGZIP(), []int{3}
}

func (x *GetCreditCardsRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *GetCreditCardsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetCreditCardsRequest) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

type GetCreditCardsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CreditCards   *CreditCards           `protobuf:"bytes,1,opt,name=credit_cards,proto3" json:"credit_cards,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCreditCardsReply) Reset() {
	*x = GetCreditCardsReply{}
	mi := &file_v1_user_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCreditCardsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCreditCardsReply) ProtoMessage() {}

func (x *GetCreditCardsReply) ProtoReflect() protoreflect.Message {
	mi := &file_v1_user_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCreditCardsReply.ProtoReflect.Descriptor instead.
func (*GetCreditCardsReply) Descriptor() ([]byte, []int) {
	return file_v1_user_proto_rawDescGZIP(), []int{4}
}

func (x *GetCreditCardsReply) GetCreditCards() *CreditCards {
	if x != nil {
		return x.CreditCards
	}
	return nil
}

type SearchCreditCardsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CreditCards   []*CreditCards         `protobuf:"bytes,1,rep,name=credit_cards,proto3" json:"credit_cards,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchCreditCardsReply) Reset() {
	*x = SearchCreditCardsReply{}
	mi := &file_v1_user_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchCreditCardsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCreditCardsReply) ProtoMessage() {}

func (x *SearchCreditCardsReply) ProtoReflect() protoreflect.Message {
	mi := &file_v1_user_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCreditCardsReply.ProtoReflect.Descriptor instead.
func (*SearchCreditCardsReply) Descriptor() ([]byte, []int) {
	return file_v1_user_proto_rawDescGZIP(), []int{5}
}

func (x *SearchCreditCardsReply) GetCreditCards() []*CreditCards {
	if x != nil {
		return x.CreditCards
	}
	return nil
}

type ListCreditCardsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Owner         string                 `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCreditCardsRequest) Reset() {
	*x = ListCreditCardsRequest{}
	mi := &file_v1_user_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCreditCardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCreditCardsRequest) ProtoMessage() {}

func (x *ListCreditCardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_user_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCreditCardsRequest.ProtoReflect.Descriptor instead.
func (*ListCreditCardsRequest) Descriptor() ([]byte, []int) {
	return file_v1_user_proto_rawDescGZIP(), []int{6}
}

func (x *ListCreditCardsRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *ListCreditCardsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListCreditCardsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CreditCards   []*CreditCards         `protobuf:"bytes,1,rep,name=credit_cards,proto3" json:"credit_cards,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCreditCardsReply) Reset() {
	*x = ListCreditCardsReply{}
	mi := &file_v1_user_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCreditCardsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCreditCardsReply) ProtoMessage() {}

func (x *ListCreditCardsReply) ProtoReflect() protoreflect.Message {
	mi := &file_v1_user_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCreditCardsReply.ProtoReflect.Descriptor instead.
func (*ListCreditCardsReply) Descriptor() ([]byte, []int) {
	return file_v1_user_proto_rawDescGZIP(), []int{7}
}

func (x *ListCreditCardsReply) GetCreditCards() []*CreditCards {
	if x != nil {
		return x.CreditCards
	}
	return nil
}

type Address struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	City          string                 `protobuf:"bytes,4,opt,name=city,proto3" json:"city,omitempty"`
	State         string                 `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	Country       string                 `protobuf:"bytes,6,opt,name=country,proto3" json:"country,omitempty"`
	ZipCode       string                 `protobuf:"bytes,7,opt,name=zip_code,json=zipCode,proto3" json:"zip_code,omitempty"`
	StreetAddress string                 `protobuf:"bytes,8,opt,name=street_address,json=streetAddress,proto3" json:"street_address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Address) Reset() {
	*x = Address{}
	mi := &file_v1_user_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_v1_user_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_v1_user_proto_rawDescGZIP(), []int{8}
}

func (x *Address) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Address) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Address) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Address) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Address) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Address) GetZipCode() string {
	if x != nil {
		return x.ZipCode
	}
	return ""
}

func (x *Address) GetStreetAddress() string {
	if x != nil {
		return x.StreetAddress
	}
	return ""
}

type UpdateAddressesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Addresses     *Address               `protobuf:"bytes,1,opt,name=addresses,proto3" json:"addresses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAddressesRequest) Reset() {
	*x = UpdateAddressesRequest{}
	mi := &file_v1_user_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAddressesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAddressesRequest) ProtoMessage() {}

func (x *UpdateAddressesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_user_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAddressesRequest.ProtoReflect.Descriptor instead.
func (*UpdateAddressesRequest) Descriptor() ([]byte, []int) {
	return file_v1_user_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateAddressesRequest) GetAddresses() *Address {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type DeleteAddressesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AddressesId   int32                  `protobuf:"varint,1,opt,name=addresses_id,proto3" json:"addresses_id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Owner         string                 `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteAddressesRequest) Reset() {
	*x = DeleteAddressesRequest{}
	mi := &file_v1_user_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAddressesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAddressesRequest) ProtoMessage() {}

func (x *DeleteAddressesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_user_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAddressesRequest.ProtoReflect.Descriptor instead.
func (*DeleteAddressesRequest) Descriptor() ([]byte, []int) {
	return file_v1_user_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteAddressesRequest) GetAddressesId() int32 {
	if x != nil {
		return x.AddressesId
	}
	return 0
}

func (x *DeleteAddressesRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteAddressesRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

type GetAddressesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Owner         string                 `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAddressesRequest) Reset() {
	*x = GetAddressesRequest{}
	mi := &file_v1_user_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAddressesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressesRequest) ProtoMessage() {}

func (x *GetAddressesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_user_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressesRequest.ProtoReflect.Descriptor instead.
func (*GetAddressesRequest) Descriptor() ([]byte, []int) {
	return file_v1_user_proto_rawDescGZIP(), []int{11}
}

func (x *GetAddressesRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetAddressesRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

type AddressReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Address       *Address               `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddressReply) Reset() {
	*x = AddressReply{}
	mi := &file_v1_user_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddressReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressReply) ProtoMessage() {}

func (x *AddressReply) ProtoReflect() protoreflect.Message {
	mi := &file_v1_user_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressReply.ProtoReflect.Descriptor instead.
func (*AddressReply) Descriptor() ([]byte, []int) {
	return file_v1_user_proto_rawDescGZIP(), []int{12}
}

func (x *AddressReply) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddressReply) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

type GetAddressesReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Addresses     []*Address             `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAddressesReply) Reset() {
	*x = GetAddressesReply{}
	mi := &file_v1_user_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAddressesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressesReply) ProtoMessage() {}

func (x *GetAddressesReply) ProtoReflect() protoreflect.Message {
	mi := &file_v1_user_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressesReply.ProtoReflect.Descriptor instead.
func (*GetAddressesReply) Descriptor() ([]byte, []int) {
	return file_v1_user_proto_rawDescGZIP(), []int{13}
}

func (x *GetAddressesReply) GetAddresses() []*Address {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type DeleteAddressesReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Id            uint32                 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Code          uint32                 `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteAddressesReply) Reset() {
	*x = DeleteAddressesReply{}
	mi := &file_v1_user_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAddressesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAddressesReply) ProtoMessage() {}

func (x *DeleteAddressesReply) ProtoReflect() protoreflect.Message {
	mi := &file_v1_user_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAddressesReply.ProtoReflect.Descriptor instead.
func (*DeleteAddressesReply) Descriptor() ([]byte, []int) {
	return file_v1_user_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteAddressesReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteAddressesReply) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteAddressesReply) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type GetProfileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Authorization string                 `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProfileRequest) Reset() {
	*x = GetProfileRequest{}
	mi := &file_v1_user_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProfileRequest) ProtoMessage() {}

func (x *GetProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_user_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProfileRequest.ProtoReflect.Descriptor instead.
func (*GetProfileRequest) Descriptor() ([]byte, []int) {
	return file_v1_user_proto_rawDescGZIP(), []int{15}
}

func (x *GetProfileRequest) GetAuthorization() string {
	if x != nil {
		return x.Authorization
	}
	return ""
}

type GetProfileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	State         string                 `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Data          *UserInfo              `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProfileResponse) Reset() {
	*x = GetProfileResponse{}
	mi := &file_v1_user_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProfileResponse) ProtoMessage() {}

func (x *GetProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_user_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProfileResponse.ProtoReflect.Descriptor instead.
func (*GetProfileResponse) Descriptor() ([]byte, []int) {
	return file_v1_user_proto_rawDescGZIP(), []int{16}
}

func (x *GetProfileResponse) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *GetProfileResponse) GetData() *UserInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserInfo struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Owner               string                 `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Name                string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CreatedTime         *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=createdTime,proto3" json:"createdTime,omitempty"`
	UpdatedTime         *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updatedTime,proto3" json:"updatedTime,omitempty"`
	DeletedTime         string                 `protobuf:"bytes,5,opt,name=deletedTime,proto3" json:"deletedTime,omitempty"`
	Id                  string                 `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
	ExternalId          string                 `protobuf:"bytes,7,opt,name=externalId,proto3" json:"externalId,omitempty"`
	Type                string                 `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	Password            string                 `protobuf:"bytes,9,opt,name=password,proto3" json:"password,omitempty"`
	PasswordSalt        string                 `protobuf:"bytes,10,opt,name=passwordSalt,proto3" json:"passwordSalt,omitempty"`
	PasswordType        string                 `protobuf:"bytes,11,opt,name=passwordType,proto3" json:"passwordType,omitempty"`
	DisplayName         string                 `protobuf:"bytes,12,opt,name=displayName,proto3" json:"displayName,omitempty"`
	FirstName           string                 `protobuf:"bytes,13,opt,name=firstName,proto3" json:"firstName,omitempty"`
	LastName            string                 `protobuf:"bytes,14,opt,name=lastName,proto3" json:"lastName,omitempty"`
	Avatar              string                 `protobuf:"bytes,15,opt,name=avatar,proto3" json:"avatar,omitempty"`
	AvatarType          string                 `protobuf:"bytes,16,opt,name=avatarType,proto3" json:"avatarType,omitempty"`
	PermanentAvatar     string                 `protobuf:"bytes,17,opt,name=permanentAvatar,proto3" json:"permanentAvatar,omitempty"`
	Email               string                 `protobuf:"bytes,18,opt,name=email,proto3" json:"email,omitempty"`
	EmailVerified       bool                   `protobuf:"varint,19,opt,name=emailVerified,proto3" json:"emailVerified,omitempty"`
	Phone               string                 `protobuf:"bytes,20,opt,name=phone,proto3" json:"phone,omitempty"`
	CountryCode         string                 `protobuf:"bytes,21,opt,name=countryCode,proto3" json:"countryCode,omitempty"`
	Region              string                 `protobuf:"bytes,22,opt,name=region,proto3" json:"region,omitempty"`
	Location            string                 `protobuf:"bytes,23,opt,name=location,proto3" json:"location,omitempty"`
	Address             []string               `protobuf:"bytes,24,rep,name=address,proto3" json:"address,omitempty"`
	Affiliation         string                 `protobuf:"bytes,25,opt,name=affiliation,proto3" json:"affiliation,omitempty"`
	Title               string                 `protobuf:"bytes,26,opt,name=title,proto3" json:"title,omitempty"`
	IdCardType          string                 `protobuf:"bytes,27,opt,name=idCardType,proto3" json:"idCardType,omitempty"`
	IdCard              string                 `protobuf:"bytes,28,opt,name=idCard,proto3" json:"idCard,omitempty"`
	Homepage            string                 `protobuf:"bytes,29,opt,name=homepage,proto3" json:"homepage,omitempty"`
	Bio                 string                 `protobuf:"bytes,30,opt,name=bio,proto3" json:"bio,omitempty"`
	Tag                 string                 `protobuf:"bytes,31,opt,name=tag,proto3" json:"tag,omitempty"`
	Language            string                 `protobuf:"bytes,32,opt,name=language,proto3" json:"language,omitempty"`
	Gender              string                 `protobuf:"bytes,33,opt,name=gender,proto3" json:"gender,omitempty"`
	Birthday            string                 `protobuf:"bytes,34,opt,name=birthday,proto3" json:"birthday,omitempty"`
	Education           string                 `protobuf:"bytes,35,opt,name=education,proto3" json:"education,omitempty"`
	Score               uint32                 `protobuf:"varint,36,opt,name=score,proto3" json:"score,omitempty"`
	Karma               uint32                 `protobuf:"varint,37,opt,name=karma,proto3" json:"karma,omitempty"`
	Ranking             uint32                 `protobuf:"varint,38,opt,name=ranking,proto3" json:"ranking,omitempty"`
	Balance             uint32                 `protobuf:"varint,39,opt,name=balance,proto3" json:"balance,omitempty"`
	Currency            string                 `protobuf:"bytes,40,opt,name=currency,proto3" json:"currency,omitempty"`
	IsDefaultAvatar     bool                   `protobuf:"varint,41,opt,name=isDefaultAvatar,proto3" json:"isDefaultAvatar,omitempty"`
	IsOnline            bool                   `protobuf:"varint,42,opt,name=isOnline,proto3" json:"isOnline,omitempty"`
	IsAdmin             bool                   `protobuf:"varint,43,opt,name=isAdmin,proto3" json:"isAdmin,omitempty"`
	IsForbidden         bool                   `protobuf:"varint,44,opt,name=isForbidden,proto3" json:"isForbidden,omitempty"`
	IsDeleted           bool                   `protobuf:"varint,45,opt,name=isDeleted,proto3" json:"isDeleted,omitempty"`
	SignupApplication   string                 `protobuf:"bytes,46,opt,name=signupApplication,proto3" json:"signupApplication,omitempty"`
	Hash                string                 `protobuf:"bytes,47,opt,name=hash,proto3" json:"hash,omitempty"`
	PreHash             string                 `protobuf:"bytes,48,opt,name=preHash,proto3" json:"preHash,omitempty"`
	AccessKey           string                 `protobuf:"bytes,49,opt,name=accessKey,proto3" json:"accessKey,omitempty"`
	AccessSecret        string                 `protobuf:"bytes,50,opt,name=accessSecret,proto3" json:"accessSecret,omitempty"`
	AccessToken         string                 `protobuf:"bytes,51,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	CreatedIp           string                 `protobuf:"bytes,52,opt,name=createdIp,proto3" json:"createdIp,omitempty"`
	LastSigninTime      string                 `protobuf:"bytes,53,opt,name=lastSigninTime,proto3" json:"lastSigninTime,omitempty"`
	LastSigninIp        string                 `protobuf:"bytes,54,opt,name=lastSigninIp,proto3" json:"lastSigninIp,omitempty"`
	Github              string                 `protobuf:"bytes,55,opt,name=github,proto3" json:"github,omitempty"`
	Google              string                 `protobuf:"bytes,56,opt,name=google,proto3" json:"google,omitempty"`
	Qq                  string                 `protobuf:"bytes,57,opt,name=qq,proto3" json:"qq,omitempty"`
	Wechat              string                 `protobuf:"bytes,58,opt,name=wechat,proto3" json:"wechat,omitempty"`
	Facebook            string                 `protobuf:"bytes,59,opt,name=facebook,proto3" json:"facebook,omitempty"`
	Dingtalk            string                 `protobuf:"bytes,60,opt,name=dingtalk,proto3" json:"dingtalk,omitempty"`
	Weibo               string                 `protobuf:"bytes,61,opt,name=weibo,proto3" json:"weibo,omitempty"`
	Gitee               string                 `protobuf:"bytes,62,opt,name=gitee,proto3" json:"gitee,omitempty"`
	Linkedin            string                 `protobuf:"bytes,63,opt,name=linkedin,proto3" json:"linkedin,omitempty"`
	Wecom               string                 `protobuf:"bytes,64,opt,name=wecom,proto3" json:"wecom,omitempty"`
	Lark                string                 `protobuf:"bytes,65,opt,name=lark,proto3" json:"lark,omitempty"`
	Gitlab              string                 `protobuf:"bytes,66,opt,name=gitlab,proto3" json:"gitlab,omitempty"`
	Adfs                string                 `protobuf:"bytes,67,opt,name=adfs,proto3" json:"adfs,omitempty"`
	Baidu               string                 `protobuf:"bytes,68,opt,name=baidu,proto3" json:"baidu,omitempty"`
	Alipay              string                 `protobuf:"bytes,69,opt,name=alipay,proto3" json:"alipay,omitempty"`
	Casdoor             string                 `protobuf:"bytes,70,opt,name=casdoor,proto3" json:"casdoor,omitempty"`
	Infoflow            string                 `protobuf:"bytes,71,opt,name=infoflow,proto3" json:"infoflow,omitempty"`
	Apple               string                 `protobuf:"bytes,72,opt,name=apple,proto3" json:"apple,omitempty"`
	Azuread             string                 `protobuf:"bytes,73,opt,name=azuread,proto3" json:"azuread,omitempty"`
	Azureadb2C          string                 `protobuf:"bytes,74,opt,name=azureadb2c,proto3" json:"azureadb2c,omitempty"`
	Slack               string                 `protobuf:"bytes,75,opt,name=slack,proto3" json:"slack,omitempty"`
	Steam               string                 `protobuf:"bytes,76,opt,name=steam,proto3" json:"steam,omitempty"`
	Bilibili            string                 `protobuf:"bytes,77,opt,name=bilibili,proto3" json:"bilibili,omitempty"`
	Okta                string                 `protobuf:"bytes,78,opt,name=okta,proto3" json:"okta,omitempty"`
	Douyin              string                 `protobuf:"bytes,79,opt,name=douyin,proto3" json:"douyin,omitempty"`
	Line                string                 `protobuf:"bytes,80,opt,name=line,proto3" json:"line,omitempty"`
	Amazon              string                 `protobuf:"bytes,81,opt,name=amazon,proto3" json:"amazon,omitempty"`
	Auth0               string                 `protobuf:"bytes,82,opt,name=auth0,proto3" json:"auth0,omitempty"`
	Battlenet           string                 `protobuf:"bytes,83,opt,name=battlenet,proto3" json:"battlenet,omitempty"`
	Bitbucket           string                 `protobuf:"bytes,84,opt,name=bitbucket,proto3" json:"bitbucket,omitempty"`
	Box                 string                 `protobuf:"bytes,85,opt,name=box,proto3" json:"box,omitempty"`
	Cloudfoundry        string                 `protobuf:"bytes,86,opt,name=cloudfoundry,proto3" json:"cloudfoundry,omitempty"`
	Dailymotion         string                 `protobuf:"bytes,87,opt,name=dailymotion,proto3" json:"dailymotion,omitempty"`
	Deezer              string                 `protobuf:"bytes,88,opt,name=deezer,proto3" json:"deezer,omitempty"`
	Digitalocean        string                 `protobuf:"bytes,89,opt,name=digitalocean,proto3" json:"digitalocean,omitempty"`
	Discord             string                 `protobuf:"bytes,90,opt,name=discord,proto3" json:"discord,omitempty"`
	Dropbox             string                 `protobuf:"bytes,91,opt,name=dropbox,proto3" json:"dropbox,omitempty"`
	Eveonline           string                 `protobuf:"bytes,92,opt,name=eveonline,proto3" json:"eveonline,omitempty"`
	Fitbit              string                 `protobuf:"bytes,93,opt,name=fitbit,proto3" json:"fitbit,omitempty"`
	Gitea               string                 `protobuf:"bytes,94,opt,name=gitea,proto3" json:"gitea,omitempty"`
	Heroku              string                 `protobuf:"bytes,95,opt,name=heroku,proto3" json:"heroku,omitempty"`
	Influxcloud         string                 `protobuf:"bytes,96,opt,name=influxcloud,proto3" json:"influxcloud,omitempty"`
	Instagram           string                 `protobuf:"bytes,97,opt,name=instagram,proto3" json:"instagram,omitempty"`
	Intercom            string                 `protobuf:"bytes,98,opt,name=intercom,proto3" json:"intercom,omitempty"`
	Kakao               string                 `protobuf:"bytes,99,opt,name=kakao,proto3" json:"kakao,omitempty"`
	Lastfm              string                 `protobuf:"bytes,100,opt,name=lastfm,proto3" json:"lastfm,omitempty"`
	Mailru              string                 `protobuf:"bytes,101,opt,name=mailru,proto3" json:"mailru,omitempty"`
	Meetup              string                 `protobuf:"bytes,102,opt,name=meetup,proto3" json:"meetup,omitempty"`
	Microsoftonline     string                 `protobuf:"bytes,103,opt,name=microsoftonline,proto3" json:"microsoftonline,omitempty"`
	Naver               string                 `protobuf:"bytes,104,opt,name=naver,proto3" json:"naver,omitempty"`
	Nextcloud           string                 `protobuf:"bytes,105,opt,name=nextcloud,proto3" json:"nextcloud,omitempty"`
	Onedrive            string                 `protobuf:"bytes,106,opt,name=onedrive,proto3" json:"onedrive,omitempty"`
	Oura                string                 `protobuf:"bytes,107,opt,name=oura,proto3" json:"oura,omitempty"`
	Patreon             string                 `protobuf:"bytes,108,opt,name=patreon,proto3" json:"patreon,omitempty"`
	Paypal              string                 `protobuf:"bytes,109,opt,name=paypal,proto3" json:"paypal,omitempty"`
	Salesforce          string                 `protobuf:"bytes,110,opt,name=salesforce,proto3" json:"salesforce,omitempty"`
	Shopify             string                 `protobuf:"bytes,111,opt,name=shopify,proto3" json:"shopify,omitempty"`
	Soundcloud          string                 `protobuf:"bytes,112,opt,name=soundcloud,proto3" json:"soundcloud,omitempty"`
	Spotify             string                 `protobuf:"bytes,113,opt,name=spotify,proto3" json:"spotify,omitempty"`
	Strava              string                 `protobuf:"bytes,114,opt,name=strava,proto3" json:"strava,omitempty"`
	Stripe              string                 `protobuf:"bytes,115,opt,name=stripe,proto3" json:"stripe,omitempty"`
	Tiktok              string                 `protobuf:"bytes,116,opt,name=tiktok,proto3" json:"tiktok,omitempty"`
	Tumblr              string                 `protobuf:"bytes,117,opt,name=tumblr,proto3" json:"tumblr,omitempty"`
	Twitch              string                 `protobuf:"bytes,118,opt,name=twitch,proto3" json:"twitch,omitempty"`
	Twitter             string                 `protobuf:"bytes,119,opt,name=twitter,proto3" json:"twitter,omitempty"`
	Typetalk            string                 `protobuf:"bytes,120,opt,name=typetalk,proto3" json:"typetalk,omitempty"`
	Uber                string                 `protobuf:"bytes,121,opt,name=uber,proto3" json:"uber,omitempty"`
	Vk                  string                 `protobuf:"bytes,122,opt,name=vk,proto3" json:"vk,omitempty"`
	Wepay               string                 `protobuf:"bytes,123,opt,name=wepay,proto3" json:"wepay,omitempty"`
	Xero                string                 `protobuf:"bytes,124,opt,name=xero,proto3" json:"xero,omitempty"`
	Yahoo               string                 `protobuf:"bytes,125,opt,name=yahoo,proto3" json:"yahoo,omitempty"`
	Yammer              string                 `protobuf:"bytes,126,opt,name=yammer,proto3" json:"yammer,omitempty"`
	Yandex              string                 `protobuf:"bytes,127,opt,name=yandex,proto3" json:"yandex,omitempty"`
	Zoom                string                 `protobuf:"bytes,128,opt,name=zoom,proto3" json:"zoom,omitempty"`
	Metamask            string                 `protobuf:"bytes,129,opt,name=metamask,proto3" json:"metamask,omitempty"`
	Web3Onboard         string                 `protobuf:"bytes,130,opt,name=web3onboard,proto3" json:"web3onboard,omitempty"`
	Custom              string                 `protobuf:"bytes,131,opt,name=custom,proto3" json:"custom,omitempty"`
	WebauthnCredentials *anypb.Any             `protobuf:"bytes,132,opt,name=webauthnCredentials,proto3" json:"webauthnCredentials,omitempty"`
	PreferredMfaType    string                 `protobuf:"bytes,133,opt,name=preferredMfaType,proto3" json:"preferredMfaType,omitempty"`
	RecoveryCodes       *anypb.Any             `protobuf:"bytes,134,opt,name=recoveryCodes,proto3" json:"recoveryCodes,omitempty"`
	TotpSecret          string                 `protobuf:"bytes,135,opt,name=totpSecret,proto3" json:"totpSecret,omitempty"`
	MfaPhoneEnabled     bool                   `protobuf:"varint,136,opt,name=mfaPhoneEnabled,proto3" json:"mfaPhoneEnabled,omitempty"`
	MfaEmailEnabled     bool                   `protobuf:"varint,137,opt,name=mfaEmailEnabled,proto3" json:"mfaEmailEnabled,omitempty"`
	Invitation          string                 `protobuf:"bytes,138,opt,name=invitation,proto3" json:"invitation,omitempty"`
	InvitationCode      string                 `protobuf:"bytes,139,opt,name=invitationCode,proto3" json:"invitationCode,omitempty"`
	FaceIds             *anypb.Any             `protobuf:"bytes,140,opt,name=faceIds,proto3" json:"faceIds,omitempty"`
	Ldap                string                 `protobuf:"bytes,141,opt,name=ldap,proto3" json:"ldap,omitempty"`
	Properties          *UserInfo_Properties   `protobuf:"bytes,142,opt,name=properties,proto3" json:"properties,omitempty"`
	Roles               *anypb.Any             `protobuf:"bytes,143,opt,name=roles,proto3" json:"roles,omitempty"`
	Permissions         *anypb.Any             `protobuf:"bytes,144,opt,name=permissions,proto3" json:"permissions,omitempty"`
	Groups              *anypb.Any             `protobuf:"bytes,145,opt,name=groups,proto3" json:"groups,omitempty"`
	LastSigninWrongTime string                 `protobuf:"bytes,146,opt,name=lastSigninWrongTime,proto3" json:"lastSigninWrongTime,omitempty"`
	SigninWrongTimes    uint32                 `protobuf:"varint,147,opt,name=signinWrongTimes,proto3" json:"signinWrongTimes,omitempty"`
	ManagedAccounts     *anypb.Any             `protobuf:"bytes,148,opt,name=managedAccounts,proto3" json:"managedAccounts,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	mi := &file_v1_user_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_v1_user_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_v1_user_proto_rawDescGZIP(), []int{17}
}

func (x *UserInfo) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *UserInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserInfo) GetCreatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTime
	}
	return nil
}

func (x *UserInfo) GetUpdatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedTime
	}
	return nil
}

func (x *UserInfo) GetDeletedTime() string {
	if x != nil {
		return x.DeletedTime
	}
	return ""
}

func (x *UserInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserInfo) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *UserInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UserInfo) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UserInfo) GetPasswordSalt() string {
	if x != nil {
		return x.PasswordSalt
	}
	return ""
}

func (x *UserInfo) GetPasswordType() string {
	if x != nil {
		return x.PasswordType
	}
	return ""
}

func (x *UserInfo) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *UserInfo) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *UserInfo) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *UserInfo) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UserInfo) GetAvatarType() string {
	if x != nil {
		return x.AvatarType
	}
	return ""
}

func (x *UserInfo) GetPermanentAvatar() string {
	if x != nil {
		return x.PermanentAvatar
	}
	return ""
}

func (x *UserInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserInfo) GetEmailVerified() bool {
	if x != nil {
		return x.EmailVerified
	}
	return false
}

func (x *UserInfo) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *UserInfo) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *UserInfo) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *UserInfo) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *UserInfo) GetAddress() []string {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *UserInfo) GetAffiliation() string {
	if x != nil {
		return x.Affiliation
	}
	return ""
}

func (x *UserInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UserInfo) GetIdCardType() string {
	if x != nil {
		return x.IdCardType
	}
	return ""
}

func (x *UserInfo) GetIdCard() string {
	if x != nil {
		return x.IdCard
	}
	return ""
}

func (x *UserInfo) GetHomepage() string {
	if x != nil {
		return x.Homepage
	}
	return ""
}

func (x *UserInfo) GetBio() string {
	if x != nil {
		return x.Bio
	}
	return ""
}

func (x *UserInfo) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *UserInfo) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *UserInfo) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *UserInfo) GetBirthday() string {
	if x != nil {
		return x.Birthday
	}
	return ""
}

func (x *UserInfo) GetEducation() string {
	if x != nil {
		return x.Education
	}
	return ""
}

func (x *UserInfo) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *UserInfo) GetKarma() uint32 {
	if x != nil {
		return x.Karma
	}
	return 0
}

func (x *UserInfo) GetRanking() uint32 {
	if x != nil {
		return x.Ranking
	}
	return 0
}

func (x *UserInfo) GetBalance() uint32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *UserInfo) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *UserInfo) GetIsDefaultAvatar() bool {
	if x != nil {
		return x.IsDefaultAvatar
	}
	return false
}

func (x *UserInfo) GetIsOnline() bool {
	if x != nil {
		return x.IsOnline
	}
	return false
}

func (x *UserInfo) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

func (x *UserInfo) GetIsForbidden() bool {
	if x != nil {
		return x.IsForbidden
	}
	return false
}

func (x *UserInfo) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *UserInfo) GetSignupApplication() string {
	if x != nil {
		return x.SignupApplication
	}
	return ""
}

func (x *UserInfo) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *UserInfo) GetPreHash() string {
	if x != nil {
		return x.PreHash
	}
	return ""
}

func (x *UserInfo) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *UserInfo) GetAccessSecret() string {
	if x != nil {
		return x.AccessSecret
	}
	return ""
}

func (x *UserInfo) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *UserInfo) GetCreatedIp() string {
	if x != nil {
		return x.CreatedIp
	}
	return ""
}

func (x *UserInfo) GetLastSigninTime() string {
	if x != nil {
		return x.LastSigninTime
	}
	return ""
}

func (x *UserInfo) GetLastSigninIp() string {
	if x != nil {
		return x.LastSigninIp
	}
	return ""
}

func (x *UserInfo) GetGithub() string {
	if x != nil {
		return x.Github
	}
	return ""
}

func (x *UserInfo) GetGoogle() string {
	if x != nil {
		return x.Google
	}
	return ""
}

func (x *UserInfo) GetQq() string {
	if x != nil {
		return x.Qq
	}
	return ""
}

func (x *UserInfo) GetWechat() string {
	if x != nil {
		return x.Wechat
	}
	return ""
}

func (x *UserInfo) GetFacebook() string {
	if x != nil {
		return x.Facebook
	}
	return ""
}

func (x *UserInfo) GetDingtalk() string {
	if x != nil {
		return x.Dingtalk
	}
	return ""
}

func (x *UserInfo) GetWeibo() string {
	if x != nil {
		return x.Weibo
	}
	return ""
}

func (x *UserInfo) GetGitee() string {
	if x != nil {
		return x.Gitee
	}
	return ""
}

func (x *UserInfo) GetLinkedin() string {
	if x != nil {
		return x.Linkedin
	}
	return ""
}

func (x *UserInfo) GetWecom() string {
	if x != nil {
		return x.Wecom
	}
	return ""
}

func (x *UserInfo) GetLark() string {
	if x != nil {
		return x.Lark
	}
	return ""
}

func (x *UserInfo) GetGitlab() string {
	if x != nil {
		return x.Gitlab
	}
	return ""
}

func (x *UserInfo) GetAdfs() string {
	if x != nil {
		return x.Adfs
	}
	return ""
}

func (x *UserInfo) GetBaidu() string {
	if x != nil {
		return x.Baidu
	}
	return ""
}

func (x *UserInfo) GetAlipay() string {
	if x != nil {
		return x.Alipay
	}
	return ""
}

func (x *UserInfo) GetCasdoor() string {
	if x != nil {
		return x.Casdoor
	}
	return ""
}

func (x *UserInfo) GetInfoflow() string {
	if x != nil {
		return x.Infoflow
	}
	return ""
}

func (x *UserInfo) GetApple() string {
	if x != nil {
		return x.Apple
	}
	return ""
}

func (x *UserInfo) GetAzuread() string {
	if x != nil {
		return x.Azuread
	}
	return ""
}

func (x *UserInfo) GetAzureadb2C() string {
	if x != nil {
		return x.Azureadb2C
	}
	return ""
}

func (x *UserInfo) GetSlack() string {
	if x != nil {
		return x.Slack
	}
	return ""
}

func (x *UserInfo) GetSteam() string {
	if x != nil {
		return x.Steam
	}
	return ""
}

func (x *UserInfo) GetBilibili() string {
	if x != nil {
		return x.Bilibili
	}
	return ""
}

func (x *UserInfo) GetOkta() string {
	if x != nil {
		return x.Okta
	}
	return ""
}

func (x *UserInfo) GetDouyin() string {
	if x != nil {
		return x.Douyin
	}
	return ""
}

func (x *UserInfo) GetLine() string {
	if x != nil {
		return x.Line
	}
	return ""
}

func (x *UserInfo) GetAmazon() string {
	if x != nil {
		return x.Amazon
	}
	return ""
}

func (x *UserInfo) GetAuth0() string {
	if x != nil {
		return x.Auth0
	}
	return ""
}

func (x *UserInfo) GetBattlenet() string {
	if x != nil {
		return x.Battlenet
	}
	return ""
}

func (x *UserInfo) GetBitbucket() string {
	if x != nil {
		return x.Bitbucket
	}
	return ""
}

func (x *UserInfo) GetBox() string {
	if x != nil {
		return x.Box
	}
	return ""
}

func (x *UserInfo) GetCloudfoundry() string {
	if x != nil {
		return x.Cloudfoundry
	}
	return ""
}

func (x *UserInfo) GetDailymotion() string {
	if x != nil {
		return x.Dailymotion
	}
	return ""
}

func (x *UserInfo) GetDeezer() string {
	if x != nil {
		return x.Deezer
	}
	return ""
}

func (x *UserInfo) GetDigitalocean() string {
	if x != nil {
		return x.Digitalocean
	}
	return ""
}

func (x *UserInfo) GetDiscord() string {
	if x != nil {
		return x.Discord
	}
	return ""
}

func (x *UserInfo) GetDropbox() string {
	if x != nil {
		return x.Dropbox
	}
	return ""
}

func (x *UserInfo) GetEveonline() string {
	if x != nil {
		return x.Eveonline
	}
	return ""
}

func (x *UserInfo) GetFitbit() string {
	if x != nil {
		return x.Fitbit
	}
	return ""
}

func (x *UserInfo) GetGitea() string {
	if x != nil {
		return x.Gitea
	}
	return ""
}

func (x *UserInfo) GetHeroku() string {
	if x != nil {
		return x.Heroku
	}
	return ""
}

func (x *UserInfo) GetInfluxcloud() string {
	if x != nil {
		return x.Influxcloud
	}
	return ""
}

func (x *UserInfo) GetInstagram() string {
	if x != nil {
		return x.Instagram
	}
	return ""
}

func (x *UserInfo) GetIntercom() string {
	if x != nil {
		return x.Intercom
	}
	return ""
}

func (x *UserInfo) GetKakao() string {
	if x != nil {
		return x.Kakao
	}
	return ""
}

func (x *UserInfo) GetLastfm() string {
	if x != nil {
		return x.Lastfm
	}
	return ""
}

func (x *UserInfo) GetMailru() string {
	if x != nil {
		return x.Mailru
	}
	return ""
}

func (x *UserInfo) GetMeetup() string {
	if x != nil {
		return x.Meetup
	}
	return ""
}

func (x *UserInfo) GetMicrosoftonline() string {
	if x != nil {
		return x.Microsoftonline
	}
	return ""
}

func (x *UserInfo) GetNaver() string {
	if x != nil {
		return x.Naver
	}
	return ""
}

func (x *UserInfo) GetNextcloud() string {
	if x != nil {
		return x.Nextcloud
	}
	return ""
}

func (x *UserInfo) GetOnedrive() string {
	if x != nil {
		return x.Onedrive
	}
	return ""
}

func (x *UserInfo) GetOura() string {
	if x != nil {
		return x.Oura
	}
	return ""
}

func (x *UserInfo) GetPatreon() string {
	if x != nil {
		return x.Patreon
	}
	return ""
}

func (x *UserInfo) GetPaypal() string {
	if x != nil {
		return x.Paypal
	}
	return ""
}

func (x *UserInfo) GetSalesforce() string {
	if x != nil {
		return x.Salesforce
	}
	return ""
}

func (x *UserInfo) GetShopify() string {
	if x != nil {
		return x.Shopify
	}
	return ""
}

func (x *UserInfo) GetSoundcloud() string {
	if x != nil {
		return x.Soundcloud
	}
	return ""
}

func (x *UserInfo) GetSpotify() string {
	if x != nil {
		return x.Spotify
	}
	return ""
}

func (x *UserInfo) GetStrava() string {
	if x != nil {
		return x.Strava
	}
	return ""
}

func (x *UserInfo) GetStripe() string {
	if x != nil {
		return x.Stripe
	}
	return ""
}

func (x *UserInfo) GetTiktok() string {
	if x != nil {
		return x.Tiktok
	}
	return ""
}

func (x *UserInfo) GetTumblr() string {
	if x != nil {
		return x.Tumblr
	}
	return ""
}

func (x *UserInfo) GetTwitch() string {
	if x != nil {
		return x.Twitch
	}
	return ""
}

func (x *UserInfo) GetTwitter() string {
	if x != nil {
		return x.Twitter
	}
	return ""
}

func (x *UserInfo) GetTypetalk() string {
	if x != nil {
		return x.Typetalk
	}
	return ""
}

func (x *UserInfo) GetUber() string {
	if x != nil {
		return x.Uber
	}
	return ""
}

func (x *UserInfo) GetVk() string {
	if x != nil {
		return x.Vk
	}
	return ""
}

func (x *UserInfo) GetWepay() string {
	if x != nil {
		return x.Wepay
	}
	return ""
}

func (x *UserInfo) GetXero() string {
	if x != nil {
		return x.Xero
	}
	return ""
}

func (x *UserInfo) GetYahoo() string {
	if x != nil {
		return x.Yahoo
	}
	return ""
}

func (x *UserInfo) GetYammer() string {
	if x != nil {
		return x.Yammer
	}
	return ""
}

func (x *UserInfo) GetYandex() string {
	if x != nil {
		return x.Yandex
	}
	return ""
}

func (x *UserInfo) GetZoom() string {
	if x != nil {
		return x.Zoom
	}
	return ""
}

func (x *UserInfo) GetMetamask() string {
	if x != nil {
		return x.Metamask
	}
	return ""
}

func (x *UserInfo) GetWeb3Onboard() string {
	if x != nil {
		return x.Web3Onboard
	}
	return ""
}

func (x *UserInfo) GetCustom() string {
	if x != nil {
		return x.Custom
	}
	return ""
}

func (x *UserInfo) GetWebauthnCredentials() *anypb.Any {
	if x != nil {
		return x.WebauthnCredentials
	}
	return nil
}

func (x *UserInfo) GetPreferredMfaType() string {
	if x != nil {
		return x.PreferredMfaType
	}
	return ""
}

func (x *UserInfo) GetRecoveryCodes() *anypb.Any {
	if x != nil {
		return x.RecoveryCodes
	}
	return nil
}

func (x *UserInfo) GetTotpSecret() string {
	if x != nil {
		return x.TotpSecret
	}
	return ""
}

func (x *UserInfo) GetMfaPhoneEnabled() bool {
	if x != nil {
		return x.MfaPhoneEnabled
	}
	return false
}

func (x *UserInfo) GetMfaEmailEnabled() bool {
	if x != nil {
		return x.MfaEmailEnabled
	}
	return false
}

func (x *UserInfo) GetInvitation() string {
	if x != nil {
		return x.Invitation
	}
	return ""
}

func (x *UserInfo) GetInvitationCode() string {
	if x != nil {
		return x.InvitationCode
	}
	return ""
}

func (x *UserInfo) GetFaceIds() *anypb.Any {
	if x != nil {
		return x.FaceIds
	}
	return nil
}

func (x *UserInfo) GetLdap() string {
	if x != nil {
		return x.Ldap
	}
	return ""
}

func (x *UserInfo) GetProperties() *UserInfo_Properties {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *UserInfo) GetRoles() *anypb.Any {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *UserInfo) GetPermissions() *anypb.Any {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *UserInfo) GetGroups() *anypb.Any {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *UserInfo) GetLastSigninWrongTime() string {
	if x != nil {
		return x.LastSigninWrongTime
	}
	return ""
}

func (x *UserInfo) GetSigninWrongTimes() uint32 {
	if x != nil {
		return x.SigninWrongTimes
	}
	return 0
}

func (x *UserInfo) GetManagedAccounts() *anypb.Any {
	if x != nil {
		return x.ManagedAccounts
	}
	return nil
}

type UserInfo_Properties struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	No                      string                 `protobuf:"bytes,1,opt,name=no,proto3" json:"no,omitempty"`
	Oauth_GoogleAvatarUrl   string                 `protobuf:"bytes,2,opt,name=oauth_Google_avatarUrl,json=oauthGoogleAvatarUrl,proto3" json:"oauth_Google_avatarUrl,omitempty"`
	Oauth_GoogleDisplayName string                 `protobuf:"bytes,3,opt,name=oauth_Google_displayName,json=oauthGoogleDisplayName,proto3" json:"oauth_Google_displayName,omitempty"`
	Oauth_GoogleEmail       string                 `protobuf:"bytes,4,opt,name=oauth_Google_email,json=oauthGoogleEmail,proto3" json:"oauth_Google_email,omitempty"`
	Oauth_GoogleId          string                 `protobuf:"bytes,5,opt,name=oauth_Google_id,json=oauthGoogleId,proto3" json:"oauth_Google_id,omitempty"`
	Oauth_GoogleUsername    string                 `protobuf:"bytes,6,opt,name=oauth_Google_username,json=oauthGoogleUsername,proto3" json:"oauth_Google_username,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *UserInfo_Properties) Reset() {
	*x = UserInfo_Properties{}
	mi := &file_v1_user_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserInfo_Properties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo_Properties) ProtoMessage() {}

func (x *UserInfo_Properties) ProtoReflect() protoreflect.Message {
	mi := &file_v1_user_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo_Properties.ProtoReflect.Descriptor instead.
func (*UserInfo_Properties) Descriptor() ([]byte, []int) {
	return file_v1_user_proto_rawDescGZIP(), []int{17, 0}
}

func (x *UserInfo_Properties) GetNo() string {
	if x != nil {
		return x.No
	}
	return ""
}

func (x *UserInfo_Properties) GetOauth_GoogleAvatarUrl() string {
	if x != nil {
		return x.Oauth_GoogleAvatarUrl
	}
	return ""
}

func (x *UserInfo_Properties) GetOauth_GoogleDisplayName() string {
	if x != nil {
		return x.Oauth_GoogleDisplayName
	}
	return ""
}

func (x *UserInfo_Properties) GetOauth_GoogleEmail() string {
	if x != nil {
		return x.Oauth_GoogleEmail
	}
	return ""
}

func (x *UserInfo_Properties) GetOauth_GoogleId() string {
	if x != nil {
		return x.Oauth_GoogleId
	}
	return ""
}

func (x *UserInfo_Properties) GetOauth_GoogleUsername() string {
	if x != nil {
		return x.Oauth_GoogleUsername
	}
	return ""
}

var File_v1_user_proto protoreflect.FileDescriptor

var file_v1_user_proto_rawDesc = string([]byte{
	0x0a, 0x0d, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x11, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc7, 0x01, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x63, 0x76, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x76, 0x76,
	0x12, 0x28, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x79,
	0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x3a, 0x0a, 0x0a, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x2a, 0x0a, 0x18,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x59, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0x59, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x42, 0x0a, 0x0c, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x52, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x22, 0x5c,
	0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x42, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x0c,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x22, 0x42, 0x0a, 0x16,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x5a, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x42, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x0c,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x22, 0xe7, 0x01, 0x0a,
	0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0x41, 0x01, 0x02, 0xfa,
	0x42, 0x08, 0x72, 0x06, 0x98, 0x01, 0x24, 0xb0, 0x01, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01,
	0x02, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x08, 0x7a, 0x69, 0x70, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02,
	0x52, 0x07, 0x7a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x0e, 0x73, 0x74, 0x72,
	0x65, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x58, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3e, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x22, 0x78, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0c, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x5f, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2,
	0x41, 0x01, 0x02, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x4b, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02,
	0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x60, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x53, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3e,
	0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x04, 0xe2,
	0x41, 0x01, 0x02, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x66,
	0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x39, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x5b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xce,
	0x24, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53,
	0x61, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x53, 0x61, 0x6c, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x24, 0x0a, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x18, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61,
	0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x6f, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x69, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6b, 0x61, 0x72, 0x6d, 0x61, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6b, 0x61, 0x72, 0x6d, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x29, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x62, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x46, 0x6f,
	0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x2f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x31,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12,
	0x22, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x49, 0x70, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x49, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6c,
	0x61, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x49, 0x70, 0x18, 0x36, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x49, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x71, 0x71, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x71, 0x71, 0x12,
	0x16, 0x0a, 0x06, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x63, 0x65, 0x62,
	0x6f, 0x6f, 0x6b, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x61, 0x63, 0x65, 0x62,
	0x6f, 0x6f, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x12,
	0x14, 0x0a, 0x05, 0x77, 0x65, 0x69, 0x62, 0x6f, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x77, 0x65, 0x69, 0x62, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x69, 0x74, 0x65, 0x65, 0x18, 0x3e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x69, 0x74, 0x65, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x69, 0x6e, 0x6b, 0x65, 0x64, 0x69, 0x6e, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x69, 0x6e, 0x6b, 0x65, 0x64, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x65, 0x63, 0x6f, 0x6d,
	0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x77, 0x65, 0x63, 0x6f, 0x6d, 0x12, 0x12, 0x0a,
	0x04, 0x6c, 0x61, 0x72, 0x6b, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x72,
	0x6b, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x18, 0x42, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x66,
	0x73, 0x18, 0x43, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x66, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x61, 0x69, 0x64, 0x75, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x61,
	0x69, 0x64, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x18, 0x45, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x61, 0x73, 0x64, 0x6f, 0x6f, 0x72, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61,
	0x73, 0x64, 0x6f, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x66, 0x6c, 0x6f,
	0x77, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x66, 0x6c, 0x6f,
	0x77, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x7a, 0x75, 0x72, 0x65,
	0x61, 0x64, 0x18, 0x49, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x61,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x61, 0x64, 0x62, 0x32, 0x63, 0x18,
	0x4a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x61, 0x64, 0x62, 0x32,
	0x63, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x18, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x1a, 0x0a,
	0x08, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x6b, 0x74,
	0x61, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x6b, 0x74, 0x61, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x6f, 0x75, 0x79, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x50, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x61,
	0x7a, 0x6f, 0x6e, 0x18, 0x51, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x61, 0x7a, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x75, 0x74, 0x68, 0x30, 0x18, 0x52, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x75, 0x74, 0x68, 0x30, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x6e, 0x65, 0x74, 0x18, 0x53, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x6e, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x18, 0x54, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x69, 0x74, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x6f, 0x78, 0x18, 0x55, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x62, 0x6f, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x72, 0x79, 0x18, 0x56, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x61, 0x69,
	0x6c, 0x79, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x57, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x61, 0x69, 0x6c, 0x79, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x65, 0x65, 0x7a, 0x65, 0x72, 0x18, 0x58, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x65,
	0x7a, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x6f, 0x63,
	0x65, 0x61, 0x6e, 0x18, 0x59, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x72, 0x64, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x72, 0x6f, 0x70, 0x62, 0x6f, 0x78, 0x18, 0x5b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x64, 0x72, 0x6f, 0x70, 0x62, 0x6f, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x76, 0x65, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x76, 0x65, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x74,
	0x62, 0x69, 0x74, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x74, 0x62, 0x69,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x69, 0x74, 0x65, 0x61, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x67, 0x69, 0x74, 0x65, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x6b,
	0x75, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x6b, 0x75, 0x12,
	0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x60,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x61,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x18, 0x62, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6b,
	0x61, 0x6b, 0x61, 0x6f, 0x18, 0x63, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x61, 0x6b, 0x61,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x66, 0x6d, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x66, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x69,
	0x6c, 0x72, 0x75, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x69, 0x6c, 0x72,
	0x75, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x65, 0x74, 0x75, 0x70, 0x18, 0x66, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x65, 0x65, 0x74, 0x75, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x67, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x76, 0x65, 0x72, 0x18, 0x68, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x76, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x78,
	0x74, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x69, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65,
	0x78, 0x74, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x6e, 0x65, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6e, 0x65, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x75, 0x72, 0x61, 0x18, 0x6b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6f, 0x75, 0x72, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x72, 0x65,
	0x6f, 0x6e, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x72, 0x65, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x79, 0x70, 0x61, 0x6c, 0x18, 0x6d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x61, 0x79, 0x70, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x61, 0x6c,
	0x65, 0x73, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x61, 0x6c, 0x65, 0x73, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x6f,
	0x70, 0x69, 0x66, 0x79, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x68, 0x6f, 0x70,
	0x69, 0x66, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x18, 0x70, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x71,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x72, 0x61, 0x76, 0x61, 0x18, 0x72, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x72, 0x61, 0x76, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x18,
	0x73, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x18, 0x74, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x75, 0x6d, 0x62, 0x6c, 0x72, 0x18,
	0x75, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x75, 0x6d, 0x62, 0x6c, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x76, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x18, 0x77, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x18, 0x78, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x62, 0x65, 0x72, 0x18, 0x79, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x62, 0x65, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x76, 0x6b, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x76, 0x6b, 0x12,
	0x14, 0x0a, 0x05, 0x77, 0x65, 0x70, 0x61, 0x79, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x77, 0x65, 0x70, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x78, 0x65, 0x72, 0x6f, 0x18, 0x7c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x78, 0x65, 0x72, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x79, 0x61, 0x68,
	0x6f, 0x6f, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x79, 0x61, 0x68, 0x6f, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x79, 0x61, 0x6d, 0x6d, 0x65, 0x72, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x79, 0x61, 0x6d, 0x6d, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x13, 0x0a, 0x04, 0x7a, 0x6f, 0x6f, 0x6d, 0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x7a, 0x6f, 0x6f, 0x6d, 0x12, 0x1b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x81, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x6d, 0x61, 0x73,
	0x6b, 0x12, 0x21, 0x0a, 0x0b, 0x77, 0x65, 0x62, 0x33, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x65, 0x62, 0x33, 0x6f, 0x6e, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x12, 0x17, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x83,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x47, 0x0a,
	0x13, 0x77, 0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x13, 0x77, 0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x2b, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x4d, 0x66, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4d, 0x66, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x1f, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x87,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0x29, 0x0a, 0x0f, 0x6d, 0x66, 0x61, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6d, 0x66, 0x61,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x0f,
	0x6d, 0x66, 0x61, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x89, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6d, 0x66, 0x61, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x8b, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x2f, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x73, 0x18, 0x8c, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x73, 0x12, 0x13, 0x0a, 0x04, 0x6c, 0x64, 0x61, 0x70, 0x18, 0x8d, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6c, 0x64, 0x61, 0x70, 0x12, 0x47, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x2b, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x37, 0x0a,
	0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x90, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x18, 0x91, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x31, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x57, 0x72, 0x6f, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x92, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x57,
	0x72, 0x6f, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x10, 0x73, 0x69, 0x67, 0x6e,
	0x69, 0x6e, 0x57, 0x72, 0x6f, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x93, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x57, 0x72, 0x6f, 0x6e, 0x67,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x94, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0x96, 0x02, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x6e, 0x6f, 0x12, 0x34, 0x0a, 0x16, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x38, 0x0a, 0x18, 0x6f,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6f,
	0x61, 0x75, 0x74, 0x68, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x61,
	0x75, 0x74, 0x68, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x6f,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6f, 0x61, 0x75, 0x74,
	0x68, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x32,
	0xe0, 0x09, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x78, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x24, 0x2e, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x72, 0x63, 0x65, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x67, 0x0a, 0x0f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1a, 0x2e, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x1a, 0x2e, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x72, 0x63, 0x65, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a, 0x22,
	0x11, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x67, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1a, 0x2e, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63,
	0x65, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x1a, 0x1a, 0x2e, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x1c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a, 0x32, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x0f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x29, 0x2e, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x2a, 0x11, 0x2f, 0x76, 0x31,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x77,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x26,
	0x2e, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72,
	0x63, 0x65, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x19, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x29, 0x2e, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72,
	0x63, 0x65, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2f,
	0x61, 0x6c, 0x6c, 0x12, 0x74, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1e, 0x2e, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x72, 0x63, 0x65, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x1a, 0x1d, 0x2e, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x72, 0x63, 0x65, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01,
	0x2a, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x74, 0x0a, 0x10, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1e, 0x2e,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x1a, 0x1d, 0x2e,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x21, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x32, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x83, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x43, 0x61, 0x72, 0x64, 0x12, 0x2b, 0x2e, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x2a, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x8a, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x28, 0x2e, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x72, 0x63, 0x65, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x21, 0x12, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x7b, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x7d, 0x42, 0x1c, 0x5a, 0x1a, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x75, 0x73, 0x65, 0x72, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_v1_user_proto_rawDescOnce sync.Once
	file_v1_user_proto_rawDescData []byte
)

func file_v1_user_proto_rawDescGZIP() []byte {
	file_v1_user_proto_rawDescOnce.Do(func() {
		file_v1_user_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_v1_user_proto_rawDesc), len(file_v1_user_proto_rawDesc)))
	})
	return file_v1_user_proto_rawDescData
}

var file_v1_user_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_v1_user_proto_goTypes = []any{
	(*CreditCards)(nil),              // 0: ecommerce.user.v1.CreditCards
	(*CardsReply)(nil),               // 1: ecommerce.user.v1.CardsReply
	(*DeleteCreditCardsRequest)(nil), // 2: ecommerce.user.v1.DeleteCreditCardsRequest
	(*GetCreditCardsRequest)(nil),    // 3: ecommerce.user.v1.GetCreditCardsRequest
	(*GetCreditCardsReply)(nil),      // 4: ecommerce.user.v1.GetCreditCardsReply
	(*SearchCreditCardsReply)(nil),   // 5: ecommerce.user.v1.SearchCreditCardsReply
	(*ListCreditCardsRequest)(nil),   // 6: ecommerce.user.v1.ListCreditCardsRequest
	(*ListCreditCardsReply)(nil),     // 7: ecommerce.user.v1.ListCreditCardsReply
	(*Address)(nil),                  // 8: ecommerce.user.v1.Address
	(*UpdateAddressesRequest)(nil),   // 9: ecommerce.user.v1.UpdateAddressesRequest
	(*DeleteAddressesRequest)(nil),   // 10: ecommerce.user.v1.DeleteAddressesRequest
	(*GetAddressesRequest)(nil),      // 11: ecommerce.user.v1.GetAddressesRequest
	(*AddressReply)(nil),             // 12: ecommerce.user.v1.AddressReply
	(*GetAddressesReply)(nil),        // 13: ecommerce.user.v1.GetAddressesReply
	(*DeleteAddressesReply)(nil),     // 14: ecommerce.user.v1.DeleteAddressesReply
	(*GetProfileRequest)(nil),        // 15: ecommerce.user.v1.GetProfileRequest
	(*GetProfileResponse)(nil),       // 16: ecommerce.user.v1.GetProfileResponse
	(*UserInfo)(nil),                 // 17: ecommerce.user.v1.UserInfo
	(*UserInfo_Properties)(nil),      // 18: ecommerce.user.v1.UserInfo.Properties
	(*timestamppb.Timestamp)(nil),    // 19: google.protobuf.Timestamp
	(*anypb.Any)(nil),                // 20: google.protobuf.Any
}
var file_v1_user_proto_depIdxs = []int32{
	0,  // 0: ecommerce.user.v1.GetCreditCardsReply.credit_cards:type_name -> ecommerce.user.v1.CreditCards
	0,  // 1: ecommerce.user.v1.SearchCreditCardsReply.credit_cards:type_name -> ecommerce.user.v1.CreditCards
	0,  // 2: ecommerce.user.v1.ListCreditCardsReply.credit_cards:type_name -> ecommerce.user.v1.CreditCards
	8,  // 3: ecommerce.user.v1.UpdateAddressesRequest.addresses:type_name -> ecommerce.user.v1.Address
	8,  // 4: ecommerce.user.v1.AddressReply.address:type_name -> ecommerce.user.v1.Address
	8,  // 5: ecommerce.user.v1.GetAddressesReply.addresses:type_name -> ecommerce.user.v1.Address
	17, // 6: ecommerce.user.v1.GetProfileResponse.data:type_name -> ecommerce.user.v1.UserInfo
	19, // 7: ecommerce.user.v1.UserInfo.createdTime:type_name -> google.protobuf.Timestamp
	19, // 8: ecommerce.user.v1.UserInfo.updatedTime:type_name -> google.protobuf.Timestamp
	20, // 9: ecommerce.user.v1.UserInfo.webauthnCredentials:type_name -> google.protobuf.Any
	20, // 10: ecommerce.user.v1.UserInfo.recoveryCodes:type_name -> google.protobuf.Any
	20, // 11: ecommerce.user.v1.UserInfo.faceIds:type_name -> google.protobuf.Any
	18, // 12: ecommerce.user.v1.UserInfo.properties:type_name -> ecommerce.user.v1.UserInfo.Properties
	20, // 13: ecommerce.user.v1.UserInfo.roles:type_name -> google.protobuf.Any
	20, // 14: ecommerce.user.v1.UserInfo.permissions:type_name -> google.protobuf.Any
	20, // 15: ecommerce.user.v1.UserInfo.groups:type_name -> google.protobuf.Any
	20, // 16: ecommerce.user.v1.UserInfo.managedAccounts:type_name -> google.protobuf.Any
	15, // 17: ecommerce.user.v1.UserService.GetUserProfile:input_type -> ecommerce.user.v1.GetProfileRequest
	8,  // 18: ecommerce.user.v1.UserService.CreateAddresses:input_type -> ecommerce.user.v1.Address
	8,  // 19: ecommerce.user.v1.UserService.UpdateAddresses:input_type -> ecommerce.user.v1.Address
	10, // 20: ecommerce.user.v1.UserService.DeleteAddresses:input_type -> ecommerce.user.v1.DeleteAddressesRequest
	11, // 21: ecommerce.user.v1.UserService.GetAddresses:input_type -> ecommerce.user.v1.GetAddressesRequest
	6,  // 22: ecommerce.user.v1.UserService.ListCreditCards:input_type -> ecommerce.user.v1.ListCreditCardsRequest
	0,  // 23: ecommerce.user.v1.UserService.CreateCreditCard:input_type -> ecommerce.user.v1.CreditCards
	0,  // 24: ecommerce.user.v1.UserService.UpdateCreditCard:input_type -> ecommerce.user.v1.CreditCards
	2,  // 25: ecommerce.user.v1.UserService.DeleteCreditCard:input_type -> ecommerce.user.v1.DeleteCreditCardsRequest
	3,  // 26: ecommerce.user.v1.UserService.GetCreditCard:input_type -> ecommerce.user.v1.GetCreditCardsRequest
	16, // 27: ecommerce.user.v1.UserService.GetUserProfile:output_type -> ecommerce.user.v1.GetProfileResponse
	8,  // 28: ecommerce.user.v1.UserService.CreateAddresses:output_type -> ecommerce.user.v1.Address
	8,  // 29: ecommerce.user.v1.UserService.UpdateAddresses:output_type -> ecommerce.user.v1.Address
	14, // 30: ecommerce.user.v1.UserService.DeleteAddresses:output_type -> ecommerce.user.v1.DeleteAddressesReply
	13, // 31: ecommerce.user.v1.UserService.GetAddresses:output_type -> ecommerce.user.v1.GetAddressesReply
	7,  // 32: ecommerce.user.v1.UserService.ListCreditCards:output_type -> ecommerce.user.v1.ListCreditCardsReply
	1,  // 33: ecommerce.user.v1.UserService.CreateCreditCard:output_type -> ecommerce.user.v1.CardsReply
	1,  // 34: ecommerce.user.v1.UserService.UpdateCreditCard:output_type -> ecommerce.user.v1.CardsReply
	1,  // 35: ecommerce.user.v1.UserService.DeleteCreditCard:output_type -> ecommerce.user.v1.CardsReply
	4,  // 36: ecommerce.user.v1.UserService.GetCreditCard:output_type -> ecommerce.user.v1.GetCreditCardsReply
	27, // [27:37] is the sub-list for method output_type
	17, // [17:27] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_v1_user_proto_init() }
func file_v1_user_proto_init() {
	if File_v1_user_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_v1_user_proto_rawDesc), len(file_v1_user_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_user_proto_goTypes,
		DependencyIndexes: file_v1_user_proto_depIdxs,
		MessageInfos:      file_v1_user_proto_msgTypes,
	}.Build()
	File_v1_user_proto = out.File
	file_v1_user_proto_goTypes = nil
	file_v1_user_proto_depIdxs = nil
}

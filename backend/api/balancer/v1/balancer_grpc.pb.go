// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: v1/balancer.proto

package balancerv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Balance_GetUserBalance_FullMethodName     = "/ecommerce.balancer.v1.Balance/GetUserBalance"
	Balance_FreezeBalance_FullMethodName      = "/ecommerce.balancer.v1.Balance/FreezeBalance"
	Balance_ConfirmTransfer_FullMethodName    = "/ecommerce.balancer.v1.Balance/ConfirmTransfer"
	Balance_CancelFreeze_FullMethodName       = "/ecommerce.balancer.v1.Balance/CancelFreeze"
	Balance_GetMerchantBalance_FullMethodName = "/ecommerce.balancer.v1.Balance/GetMerchantBalance"
	Balance_RechargeBalance_FullMethodName    = "/ecommerce.balancer.v1.Balance/RechargeBalance"
	Balance_WithdrawBalance_FullMethodName    = "/ecommerce.balancer.v1.Balance/WithdrawBalance"
)

// BalanceClient is the client API for Balance service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Balance Service 定义
type BalanceClient interface {
	// 获取用户余额
	GetUserBalance(ctx context.Context, in *GetUserBalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error)
	// 冻结用户余额
	FreezeBalance(ctx context.Context, in *FreezeBalanceRequest, opts ...grpc.CallOption) (*FreezeBalanceResponse, error)
	// 确认转账（解冻并转给商家）
	ConfirmTransfer(ctx context.Context, in *ConfirmTransferRequest, opts ...grpc.CallOption) (*ConfirmTransferResponse, error)
	// 取消冻结
	CancelFreeze(ctx context.Context, in *CancelFreezeRequest, opts ...grpc.CallOption) (*CancelFreezeResponse, error)
	// 获取商家余额
	GetMerchantBalance(ctx context.Context, in *GetMerchantBalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error)
	// 用户充值
	RechargeBalance(ctx context.Context, in *RechargeBalanceRequest, opts ...grpc.CallOption) (*RechargeBalanceResponse, error)
	// 用户提现
	WithdrawBalance(ctx context.Context, in *WithdrawBalanceRequest, opts ...grpc.CallOption) (*WithdrawBalanceResponse, error)
}

type balanceClient struct {
	cc grpc.ClientConnInterface
}

func NewBalanceClient(cc grpc.ClientConnInterface) BalanceClient {
	return &balanceClient{cc}
}

func (c *balanceClient) GetUserBalance(ctx context.Context, in *GetUserBalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BalanceResponse)
	err := c.cc.Invoke(ctx, Balance_GetUserBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *balanceClient) FreezeBalance(ctx context.Context, in *FreezeBalanceRequest, opts ...grpc.CallOption) (*FreezeBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FreezeBalanceResponse)
	err := c.cc.Invoke(ctx, Balance_FreezeBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *balanceClient) ConfirmTransfer(ctx context.Context, in *ConfirmTransferRequest, opts ...grpc.CallOption) (*ConfirmTransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfirmTransferResponse)
	err := c.cc.Invoke(ctx, Balance_ConfirmTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *balanceClient) CancelFreeze(ctx context.Context, in *CancelFreezeRequest, opts ...grpc.CallOption) (*CancelFreezeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelFreezeResponse)
	err := c.cc.Invoke(ctx, Balance_CancelFreeze_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *balanceClient) GetMerchantBalance(ctx context.Context, in *GetMerchantBalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BalanceResponse)
	err := c.cc.Invoke(ctx, Balance_GetMerchantBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *balanceClient) RechargeBalance(ctx context.Context, in *RechargeBalanceRequest, opts ...grpc.CallOption) (*RechargeBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RechargeBalanceResponse)
	err := c.cc.Invoke(ctx, Balance_RechargeBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *balanceClient) WithdrawBalance(ctx context.Context, in *WithdrawBalanceRequest, opts ...grpc.CallOption) (*WithdrawBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawBalanceResponse)
	err := c.cc.Invoke(ctx, Balance_WithdrawBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BalanceServer is the server API for Balance service.
// All implementations must embed UnimplementedBalanceServer
// for forward compatibility.
//
// Balance Service 定义
type BalanceServer interface {
	// 获取用户余额
	GetUserBalance(context.Context, *GetUserBalanceRequest) (*BalanceResponse, error)
	// 冻结用户余额
	FreezeBalance(context.Context, *FreezeBalanceRequest) (*FreezeBalanceResponse, error)
	// 确认转账（解冻并转给商家）
	ConfirmTransfer(context.Context, *ConfirmTransferRequest) (*ConfirmTransferResponse, error)
	// 取消冻结
	CancelFreeze(context.Context, *CancelFreezeRequest) (*CancelFreezeResponse, error)
	// 获取商家余额
	GetMerchantBalance(context.Context, *GetMerchantBalanceRequest) (*BalanceResponse, error)
	// 用户充值
	RechargeBalance(context.Context, *RechargeBalanceRequest) (*RechargeBalanceResponse, error)
	// 用户提现
	WithdrawBalance(context.Context, *WithdrawBalanceRequest) (*WithdrawBalanceResponse, error)
	mustEmbedUnimplementedBalanceServer()
}

// UnimplementedBalanceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBalanceServer struct{}

func (UnimplementedBalanceServer) GetUserBalance(context.Context, *GetUserBalanceRequest) (*BalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBalance not implemented")
}
func (UnimplementedBalanceServer) FreezeBalance(context.Context, *FreezeBalanceRequest) (*FreezeBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FreezeBalance not implemented")
}
func (UnimplementedBalanceServer) ConfirmTransfer(context.Context, *ConfirmTransferRequest) (*ConfirmTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmTransfer not implemented")
}
func (UnimplementedBalanceServer) CancelFreeze(context.Context, *CancelFreezeRequest) (*CancelFreezeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelFreeze not implemented")
}
func (UnimplementedBalanceServer) GetMerchantBalance(context.Context, *GetMerchantBalanceRequest) (*BalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchantBalance not implemented")
}
func (UnimplementedBalanceServer) RechargeBalance(context.Context, *RechargeBalanceRequest) (*RechargeBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RechargeBalance not implemented")
}
func (UnimplementedBalanceServer) WithdrawBalance(context.Context, *WithdrawBalanceRequest) (*WithdrawBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawBalance not implemented")
}
func (UnimplementedBalanceServer) mustEmbedUnimplementedBalanceServer() {}
func (UnimplementedBalanceServer) testEmbeddedByValue()                 {}

// UnsafeBalanceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BalanceServer will
// result in compilation errors.
type UnsafeBalanceServer interface {
	mustEmbedUnimplementedBalanceServer()
}

func RegisterBalanceServer(s grpc.ServiceRegistrar, srv BalanceServer) {
	// If the following call pancis, it indicates UnimplementedBalanceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Balance_ServiceDesc, srv)
}

func _Balance_GetUserBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalanceServer).GetUserBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Balance_GetUserBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalanceServer).GetUserBalance(ctx, req.(*GetUserBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Balance_FreezeBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreezeBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalanceServer).FreezeBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Balance_FreezeBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalanceServer).FreezeBalance(ctx, req.(*FreezeBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Balance_ConfirmTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalanceServer).ConfirmTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Balance_ConfirmTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalanceServer).ConfirmTransfer(ctx, req.(*ConfirmTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Balance_CancelFreeze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelFreezeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalanceServer).CancelFreeze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Balance_CancelFreeze_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalanceServer).CancelFreeze(ctx, req.(*CancelFreezeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Balance_GetMerchantBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMerchantBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalanceServer).GetMerchantBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Balance_GetMerchantBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalanceServer).GetMerchantBalance(ctx, req.(*GetMerchantBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Balance_RechargeBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RechargeBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalanceServer).RechargeBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Balance_RechargeBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalanceServer).RechargeBalance(ctx, req.(*RechargeBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Balance_WithdrawBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalanceServer).WithdrawBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Balance_WithdrawBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalanceServer).WithdrawBalance(ctx, req.(*WithdrawBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Balance_ServiceDesc is the grpc.ServiceDesc for Balance service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Balance_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ecommerce.balancer.v1.Balance",
	HandlerType: (*BalanceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserBalance",
			Handler:    _Balance_GetUserBalance_Handler,
		},
		{
			MethodName: "FreezeBalance",
			Handler:    _Balance_FreezeBalance_Handler,
		},
		{
			MethodName: "ConfirmTransfer",
			Handler:    _Balance_ConfirmTransfer_Handler,
		},
		{
			MethodName: "CancelFreeze",
			Handler:    _Balance_CancelFreeze_Handler,
		},
		{
			MethodName: "GetMerchantBalance",
			Handler:    _Balance_GetMerchantBalance_Handler,
		},
		{
			MethodName: "RechargeBalance",
			Handler:    _Balance_RechargeBalance_Handler,
		},
		{
			MethodName: "WithdrawBalance",
			Handler:    _Balance_WithdrawBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/balancer.proto",
}

// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/balancer.proto

package balancerv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateMerchantBalanceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMerchantBalanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMerchantBalanceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMerchantBalanceRequestMultiError, or nil if none found.
func (m *CreateMerchantBalanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMerchantBalanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MerchantId

	// no validation rules for Currency

	// no validation rules for InitialBalance

	// no validation rules for BalancerType

	// no validation rules for IsDefault

	if all {
		switch v := interface{}(m.GetAccountDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMerchantBalanceRequestValidationError{
					field:  "AccountDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMerchantBalanceRequestValidationError{
					field:  "AccountDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccountDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMerchantBalanceRequestValidationError{
				field:  "AccountDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateMerchantBalanceRequestMultiError(errors)
	}

	return nil
}

// CreateMerchantBalanceRequestMultiError is an error wrapping multiple
// validation errors returned by CreateMerchantBalanceRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateMerchantBalanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMerchantBalanceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMerchantBalanceRequestMultiError) AllErrors() []error { return m }

// CreateMerchantBalanceRequestValidationError is the validation error returned
// by CreateMerchantBalanceRequest.Validate if the designated constraints
// aren't met.
type CreateMerchantBalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMerchantBalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMerchantBalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMerchantBalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMerchantBalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMerchantBalanceRequestValidationError) ErrorName() string {
	return "CreateMerchantBalanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMerchantBalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMerchantBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMerchantBalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMerchantBalanceRequestValidationError{}

// Validate checks the field values on CreateMerchantBalanceReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMerchantBalanceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMerchantBalanceReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMerchantBalanceReplyMultiError, or nil if none found.
func (m *CreateMerchantBalanceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMerchantBalanceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Currency

	// no validation rules for Available

	if len(errors) > 0 {
		return CreateMerchantBalanceReplyMultiError(errors)
	}

	return nil
}

// CreateMerchantBalanceReplyMultiError is an error wrapping multiple
// validation errors returned by CreateMerchantBalanceReply.ValidateAll() if
// the designated constraints aren't met.
type CreateMerchantBalanceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMerchantBalanceReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMerchantBalanceReplyMultiError) AllErrors() []error { return m }

// CreateMerchantBalanceReplyValidationError is the validation error returned
// by CreateMerchantBalanceReply.Validate if the designated constraints aren't met.
type CreateMerchantBalanceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMerchantBalanceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMerchantBalanceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMerchantBalanceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMerchantBalanceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMerchantBalanceReplyValidationError) ErrorName() string {
	return "CreateMerchantBalanceReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMerchantBalanceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMerchantBalanceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMerchantBalanceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMerchantBalanceReplyValidationError{}

// Validate checks the field values on CreateConsumerBalanceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateConsumerBalanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateConsumerBalanceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateConsumerBalanceRequestMultiError, or nil if none found.
func (m *CreateConsumerBalanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateConsumerBalanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Currency

	// no validation rules for InitialBalance

	// no validation rules for BalancerType

	// no validation rules for IsDefault

	if all {
		switch v := interface{}(m.GetAccountDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateConsumerBalanceRequestValidationError{
					field:  "AccountDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateConsumerBalanceRequestValidationError{
					field:  "AccountDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccountDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateConsumerBalanceRequestValidationError{
				field:  "AccountDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateConsumerBalanceRequestMultiError(errors)
	}

	return nil
}

// CreateConsumerBalanceRequestMultiError is an error wrapping multiple
// validation errors returned by CreateConsumerBalanceRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateConsumerBalanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateConsumerBalanceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateConsumerBalanceRequestMultiError) AllErrors() []error { return m }

// CreateConsumerBalanceRequestValidationError is the validation error returned
// by CreateConsumerBalanceRequest.Validate if the designated constraints
// aren't met.
type CreateConsumerBalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateConsumerBalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateConsumerBalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateConsumerBalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateConsumerBalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateConsumerBalanceRequestValidationError) ErrorName() string {
	return "CreateConsumerBalanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateConsumerBalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateConsumerBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateConsumerBalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateConsumerBalanceRequestValidationError{}

// Validate checks the field values on CreateConsumerBalanceReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateConsumerBalanceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateConsumerBalanceReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateConsumerBalanceReplyMultiError, or nil if none found.
func (m *CreateConsumerBalanceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateConsumerBalanceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Currency

	// no validation rules for Available

	if len(errors) > 0 {
		return CreateConsumerBalanceReplyMultiError(errors)
	}

	return nil
}

// CreateConsumerBalanceReplyMultiError is an error wrapping multiple
// validation errors returned by CreateConsumerBalanceReply.ValidateAll() if
// the designated constraints aren't met.
type CreateConsumerBalanceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateConsumerBalanceReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateConsumerBalanceReplyMultiError) AllErrors() []error { return m }

// CreateConsumerBalanceReplyValidationError is the validation error returned
// by CreateConsumerBalanceReply.Validate if the designated constraints aren't met.
type CreateConsumerBalanceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateConsumerBalanceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateConsumerBalanceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateConsumerBalanceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateConsumerBalanceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateConsumerBalanceReplyValidationError) ErrorName() string {
	return "CreateConsumerBalanceReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateConsumerBalanceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateConsumerBalanceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateConsumerBalanceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateConsumerBalanceReplyValidationError{}

// Validate checks the field values on GetUserBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserBalanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserBalanceRequestMultiError, or nil if none found.
func (m *GetUserBalanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserBalanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Currency

	if len(errors) > 0 {
		return GetUserBalanceRequestMultiError(errors)
	}

	return nil
}

// GetUserBalanceRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserBalanceRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserBalanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserBalanceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserBalanceRequestMultiError) AllErrors() []error { return m }

// GetUserBalanceRequestValidationError is the validation error returned by
// GetUserBalanceRequest.Validate if the designated constraints aren't met.
type GetUserBalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserBalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserBalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserBalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserBalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserBalanceRequestValidationError) ErrorName() string {
	return "GetUserBalanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserBalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserBalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserBalanceRequestValidationError{}

// Validate checks the field values on GetMerchantBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMerchantBalanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMerchantBalanceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMerchantBalanceRequestMultiError, or nil if none found.
func (m *GetMerchantBalanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMerchantBalanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MerchantId

	// no validation rules for Currency

	if len(errors) > 0 {
		return GetMerchantBalanceRequestMultiError(errors)
	}

	return nil
}

// GetMerchantBalanceRequestMultiError is an error wrapping multiple validation
// errors returned by GetMerchantBalanceRequest.ValidateAll() if the
// designated constraints aren't met.
type GetMerchantBalanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMerchantBalanceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMerchantBalanceRequestMultiError) AllErrors() []error { return m }

// GetMerchantBalanceRequestValidationError is the validation error returned by
// GetMerchantBalanceRequest.Validate if the designated constraints aren't met.
type GetMerchantBalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMerchantBalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMerchantBalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMerchantBalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMerchantBalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMerchantBalanceRequestValidationError) ErrorName() string {
	return "GetMerchantBalanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMerchantBalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMerchantBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMerchantBalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMerchantBalanceRequestValidationError{}

// Validate checks the field values on BalanceReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BalanceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BalanceReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BalanceReplyMultiError, or
// nil if none found.
func (m *BalanceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *BalanceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Available

	// no validation rules for Frozen

	// no validation rules for Currency

	// no validation rules for Version

	if len(errors) > 0 {
		return BalanceReplyMultiError(errors)
	}

	return nil
}

// BalanceReplyMultiError is an error wrapping multiple validation errors
// returned by BalanceReply.ValidateAll() if the designated constraints aren't met.
type BalanceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BalanceReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BalanceReplyMultiError) AllErrors() []error { return m }

// BalanceReplyValidationError is the validation error returned by
// BalanceReply.Validate if the designated constraints aren't met.
type BalanceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BalanceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BalanceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BalanceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BalanceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BalanceReplyValidationError) ErrorName() string { return "BalanceReplyValidationError" }

// Error satisfies the builtin error interface
func (e BalanceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBalanceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BalanceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BalanceReplyValidationError{}

// Validate checks the field values on FreezeBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FreezeBalanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FreezeBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FreezeBalanceRequestMultiError, or nil if none found.
func (m *FreezeBalanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FreezeBalanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for OrderId

	// no validation rules for Amount

	// no validation rules for Currency

	// no validation rules for IdempotencyKey

	// no validation rules for ExpectedVersion

	if len(errors) > 0 {
		return FreezeBalanceRequestMultiError(errors)
	}

	return nil
}

// FreezeBalanceRequestMultiError is an error wrapping multiple validation
// errors returned by FreezeBalanceRequest.ValidateAll() if the designated
// constraints aren't met.
type FreezeBalanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FreezeBalanceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FreezeBalanceRequestMultiError) AllErrors() []error { return m }

// FreezeBalanceRequestValidationError is the validation error returned by
// FreezeBalanceRequest.Validate if the designated constraints aren't met.
type FreezeBalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FreezeBalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FreezeBalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FreezeBalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FreezeBalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FreezeBalanceRequestValidationError) ErrorName() string {
	return "FreezeBalanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FreezeBalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFreezeBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FreezeBalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FreezeBalanceRequestValidationError{}

// Validate checks the field values on FreezeBalanceReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FreezeBalanceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FreezeBalanceReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FreezeBalanceReplyMultiError, or nil if none found.
func (m *FreezeBalanceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *FreezeBalanceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FreezeId

	// no validation rules for NewVersion

	if len(errors) > 0 {
		return FreezeBalanceReplyMultiError(errors)
	}

	return nil
}

// FreezeBalanceReplyMultiError is an error wrapping multiple validation errors
// returned by FreezeBalanceReply.ValidateAll() if the designated constraints
// aren't met.
type FreezeBalanceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FreezeBalanceReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FreezeBalanceReplyMultiError) AllErrors() []error { return m }

// FreezeBalanceReplyValidationError is the validation error returned by
// FreezeBalanceReply.Validate if the designated constraints aren't met.
type FreezeBalanceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FreezeBalanceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FreezeBalanceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FreezeBalanceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FreezeBalanceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FreezeBalanceReplyValidationError) ErrorName() string {
	return "FreezeBalanceReplyValidationError"
}

// Error satisfies the builtin error interface
func (e FreezeBalanceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFreezeBalanceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FreezeBalanceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FreezeBalanceReplyValidationError{}

// Validate checks the field values on ConfirmTransferRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfirmTransferRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfirmTransferRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfirmTransferRequestMultiError, or nil if none found.
func (m *ConfirmTransferRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfirmTransferRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FreezeId

	// no validation rules for MerchantId

	// no validation rules for IdempotencyKey

	// no validation rules for ExpectedUserVersion

	// no validation rules for ExpectedMerchantVersion

	// no validation rules for PaymentAccount

	if len(errors) > 0 {
		return ConfirmTransferRequestMultiError(errors)
	}

	return nil
}

// ConfirmTransferRequestMultiError is an error wrapping multiple validation
// errors returned by ConfirmTransferRequest.ValidateAll() if the designated
// constraints aren't met.
type ConfirmTransferRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfirmTransferRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfirmTransferRequestMultiError) AllErrors() []error { return m }

// ConfirmTransferRequestValidationError is the validation error returned by
// ConfirmTransferRequest.Validate if the designated constraints aren't met.
type ConfirmTransferRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmTransferRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmTransferRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmTransferRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmTransferRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmTransferRequestValidationError) ErrorName() string {
	return "ConfirmTransferRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConfirmTransferRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmTransferRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmTransferRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmTransferRequestValidationError{}

// Validate checks the field values on ConfirmTransferReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfirmTransferReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfirmTransferReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfirmTransferReplyMultiError, or nil if none found.
func (m *ConfirmTransferReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfirmTransferReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for TransactionId

	// no validation rules for NewUserVersion

	// no validation rules for NewMerchantVersion

	if len(errors) > 0 {
		return ConfirmTransferReplyMultiError(errors)
	}

	return nil
}

// ConfirmTransferReplyMultiError is an error wrapping multiple validation
// errors returned by ConfirmTransferReply.ValidateAll() if the designated
// constraints aren't met.
type ConfirmTransferReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfirmTransferReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfirmTransferReplyMultiError) AllErrors() []error { return m }

// ConfirmTransferReplyValidationError is the validation error returned by
// ConfirmTransferReply.Validate if the designated constraints aren't met.
type ConfirmTransferReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmTransferReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmTransferReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmTransferReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmTransferReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmTransferReplyValidationError) ErrorName() string {
	return "ConfirmTransferReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ConfirmTransferReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmTransferReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmTransferReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmTransferReplyValidationError{}

// Validate checks the field values on CancelFreezeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelFreezeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelFreezeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelFreezeRequestMultiError, or nil if none found.
func (m *CancelFreezeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelFreezeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FreezeId

	// no validation rules for Reason

	// no validation rules for IdempotencyKey

	// no validation rules for ExpectedVersion

	if len(errors) > 0 {
		return CancelFreezeRequestMultiError(errors)
	}

	return nil
}

// CancelFreezeRequestMultiError is an error wrapping multiple validation
// errors returned by CancelFreezeRequest.ValidateAll() if the designated
// constraints aren't met.
type CancelFreezeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelFreezeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelFreezeRequestMultiError) AllErrors() []error { return m }

// CancelFreezeRequestValidationError is the validation error returned by
// CancelFreezeRequest.Validate if the designated constraints aren't met.
type CancelFreezeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelFreezeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelFreezeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelFreezeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelFreezeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelFreezeRequestValidationError) ErrorName() string {
	return "CancelFreezeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelFreezeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelFreezeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelFreezeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelFreezeRequestValidationError{}

// Validate checks the field values on CancelFreezeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CancelFreezeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelFreezeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelFreezeReplyMultiError, or nil if none found.
func (m *CancelFreezeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelFreezeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for NewVersion

	if len(errors) > 0 {
		return CancelFreezeReplyMultiError(errors)
	}

	return nil
}

// CancelFreezeReplyMultiError is an error wrapping multiple validation errors
// returned by CancelFreezeReply.ValidateAll() if the designated constraints
// aren't met.
type CancelFreezeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelFreezeReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelFreezeReplyMultiError) AllErrors() []error { return m }

// CancelFreezeReplyValidationError is the validation error returned by
// CancelFreezeReply.Validate if the designated constraints aren't met.
type CancelFreezeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelFreezeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelFreezeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelFreezeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelFreezeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelFreezeReplyValidationError) ErrorName() string {
	return "CancelFreezeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CancelFreezeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelFreezeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelFreezeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelFreezeReplyValidationError{}

// Validate checks the field values on RechargeBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RechargeBalanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RechargeBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RechargeBalanceRequestMultiError, or nil if none found.
func (m *RechargeBalanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RechargeBalanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Amount

	// no validation rules for Currency

	// no validation rules for ExternalTransactionId

	// no validation rules for PaymentMethodType

	// no validation rules for PaymentAccount

	// no validation rules for IdempotencyKey

	// no validation rules for ExpectedVersion

	if len(errors) > 0 {
		return RechargeBalanceRequestMultiError(errors)
	}

	return nil
}

// RechargeBalanceRequestMultiError is an error wrapping multiple validation
// errors returned by RechargeBalanceRequest.ValidateAll() if the designated
// constraints aren't met.
type RechargeBalanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RechargeBalanceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RechargeBalanceRequestMultiError) AllErrors() []error { return m }

// RechargeBalanceRequestValidationError is the validation error returned by
// RechargeBalanceRequest.Validate if the designated constraints aren't met.
type RechargeBalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RechargeBalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RechargeBalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RechargeBalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RechargeBalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RechargeBalanceRequestValidationError) ErrorName() string {
	return "RechargeBalanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RechargeBalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRechargeBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RechargeBalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RechargeBalanceRequestValidationError{}

// Validate checks the field values on RechargeBalanceReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RechargeBalanceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RechargeBalanceReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RechargeBalanceReplyMultiError, or nil if none found.
func (m *RechargeBalanceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RechargeBalanceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for TransactionId

	// no validation rules for NewVersion

	if len(errors) > 0 {
		return RechargeBalanceReplyMultiError(errors)
	}

	return nil
}

// RechargeBalanceReplyMultiError is an error wrapping multiple validation
// errors returned by RechargeBalanceReply.ValidateAll() if the designated
// constraints aren't met.
type RechargeBalanceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RechargeBalanceReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RechargeBalanceReplyMultiError) AllErrors() []error { return m }

// RechargeBalanceReplyValidationError is the validation error returned by
// RechargeBalanceReply.Validate if the designated constraints aren't met.
type RechargeBalanceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RechargeBalanceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RechargeBalanceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RechargeBalanceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RechargeBalanceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RechargeBalanceReplyValidationError) ErrorName() string {
	return "RechargeBalanceReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RechargeBalanceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRechargeBalanceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RechargeBalanceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RechargeBalanceReplyValidationError{}

// Validate checks the field values on WithdrawBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WithdrawBalanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WithdrawBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WithdrawBalanceRequestMultiError, or nil if none found.
func (m *WithdrawBalanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WithdrawBalanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Amount

	// no validation rules for Currency

	// no validation rules for PaymentMethodId

	// no validation rules for IdempotencyKey

	// no validation rules for ExpectedVersion

	if len(errors) > 0 {
		return WithdrawBalanceRequestMultiError(errors)
	}

	return nil
}

// WithdrawBalanceRequestMultiError is an error wrapping multiple validation
// errors returned by WithdrawBalanceRequest.ValidateAll() if the designated
// constraints aren't met.
type WithdrawBalanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WithdrawBalanceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WithdrawBalanceRequestMultiError) AllErrors() []error { return m }

// WithdrawBalanceRequestValidationError is the validation error returned by
// WithdrawBalanceRequest.Validate if the designated constraints aren't met.
type WithdrawBalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WithdrawBalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WithdrawBalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WithdrawBalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WithdrawBalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WithdrawBalanceRequestValidationError) ErrorName() string {
	return "WithdrawBalanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WithdrawBalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWithdrawBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WithdrawBalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WithdrawBalanceRequestValidationError{}

// Validate checks the field values on WithdrawBalanceReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WithdrawBalanceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WithdrawBalanceReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WithdrawBalanceReplyMultiError, or nil if none found.
func (m *WithdrawBalanceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *WithdrawBalanceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for TransactionId

	// no validation rules for NewVersion

	if len(errors) > 0 {
		return WithdrawBalanceReplyMultiError(errors)
	}

	return nil
}

// WithdrawBalanceReplyMultiError is an error wrapping multiple validation
// errors returned by WithdrawBalanceReply.ValidateAll() if the designated
// constraints aren't met.
type WithdrawBalanceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WithdrawBalanceReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WithdrawBalanceReplyMultiError) AllErrors() []error { return m }

// WithdrawBalanceReplyValidationError is the validation error returned by
// WithdrawBalanceReply.Validate if the designated constraints aren't met.
type WithdrawBalanceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WithdrawBalanceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WithdrawBalanceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WithdrawBalanceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WithdrawBalanceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WithdrawBalanceReplyValidationError) ErrorName() string {
	return "WithdrawBalanceReplyValidationError"
}

// Error satisfies the builtin error interface
func (e WithdrawBalanceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWithdrawBalanceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WithdrawBalanceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WithdrawBalanceReplyValidationError{}

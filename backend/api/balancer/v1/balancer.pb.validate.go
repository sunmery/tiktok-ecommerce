// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/balancer.proto

package balancerv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetUserBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserBalanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserBalanceRequestMultiError, or nil if none found.
func (m *GetUserBalanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserBalanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Currency

	if len(errors) > 0 {
		return GetUserBalanceRequestMultiError(errors)
	}

	return nil
}

// GetUserBalanceRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserBalanceRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserBalanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserBalanceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserBalanceRequestMultiError) AllErrors() []error { return m }

// GetUserBalanceRequestValidationError is the validation error returned by
// GetUserBalanceRequest.Validate if the designated constraints aren't met.
type GetUserBalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserBalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserBalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserBalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserBalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserBalanceRequestValidationError) ErrorName() string {
	return "GetUserBalanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserBalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserBalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserBalanceRequestValidationError{}

// Validate checks the field values on GetMerchantBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMerchantBalanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMerchantBalanceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMerchantBalanceRequestMultiError, or nil if none found.
func (m *GetMerchantBalanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMerchantBalanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MerchantId

	// no validation rules for Currency

	if len(errors) > 0 {
		return GetMerchantBalanceRequestMultiError(errors)
	}

	return nil
}

// GetMerchantBalanceRequestMultiError is an error wrapping multiple validation
// errors returned by GetMerchantBalanceRequest.ValidateAll() if the
// designated constraints aren't met.
type GetMerchantBalanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMerchantBalanceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMerchantBalanceRequestMultiError) AllErrors() []error { return m }

// GetMerchantBalanceRequestValidationError is the validation error returned by
// GetMerchantBalanceRequest.Validate if the designated constraints aren't met.
type GetMerchantBalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMerchantBalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMerchantBalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMerchantBalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMerchantBalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMerchantBalanceRequestValidationError) ErrorName() string {
	return "GetMerchantBalanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMerchantBalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMerchantBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMerchantBalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMerchantBalanceRequestValidationError{}

// Validate checks the field values on BalanceResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BalanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BalanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BalanceResponseMultiError, or nil if none found.
func (m *BalanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BalanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Available

	// no validation rules for Frozen

	// no validation rules for Currency

	// no validation rules for Version

	if len(errors) > 0 {
		return BalanceResponseMultiError(errors)
	}

	return nil
}

// BalanceResponseMultiError is an error wrapping multiple validation errors
// returned by BalanceResponse.ValidateAll() if the designated constraints
// aren't met.
type BalanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BalanceResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BalanceResponseMultiError) AllErrors() []error { return m }

// BalanceResponseValidationError is the validation error returned by
// BalanceResponse.Validate if the designated constraints aren't met.
type BalanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BalanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BalanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BalanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BalanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BalanceResponseValidationError) ErrorName() string { return "BalanceResponseValidationError" }

// Error satisfies the builtin error interface
func (e BalanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBalanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BalanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BalanceResponseValidationError{}

// Validate checks the field values on FreezeBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FreezeBalanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FreezeBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FreezeBalanceRequestMultiError, or nil if none found.
func (m *FreezeBalanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FreezeBalanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for OrderId

	// no validation rules for Amount

	// no validation rules for Currency

	if all {
		switch v := interface{}(m.GetExpiresAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FreezeBalanceRequestValidationError{
					field:  "ExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FreezeBalanceRequestValidationError{
					field:  "ExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiresAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FreezeBalanceRequestValidationError{
				field:  "ExpiresAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IdempotencyKey

	// no validation rules for ExpectedVersion

	if len(errors) > 0 {
		return FreezeBalanceRequestMultiError(errors)
	}

	return nil
}

// FreezeBalanceRequestMultiError is an error wrapping multiple validation
// errors returned by FreezeBalanceRequest.ValidateAll() if the designated
// constraints aren't met.
type FreezeBalanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FreezeBalanceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FreezeBalanceRequestMultiError) AllErrors() []error { return m }

// FreezeBalanceRequestValidationError is the validation error returned by
// FreezeBalanceRequest.Validate if the designated constraints aren't met.
type FreezeBalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FreezeBalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FreezeBalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FreezeBalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FreezeBalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FreezeBalanceRequestValidationError) ErrorName() string {
	return "FreezeBalanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FreezeBalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFreezeBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FreezeBalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FreezeBalanceRequestValidationError{}

// Validate checks the field values on FreezeBalanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FreezeBalanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FreezeBalanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FreezeBalanceResponseMultiError, or nil if none found.
func (m *FreezeBalanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FreezeBalanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FreezeId

	// no validation rules for NewVersion

	if len(errors) > 0 {
		return FreezeBalanceResponseMultiError(errors)
	}

	return nil
}

// FreezeBalanceResponseMultiError is an error wrapping multiple validation
// errors returned by FreezeBalanceResponse.ValidateAll() if the designated
// constraints aren't met.
type FreezeBalanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FreezeBalanceResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FreezeBalanceResponseMultiError) AllErrors() []error { return m }

// FreezeBalanceResponseValidationError is the validation error returned by
// FreezeBalanceResponse.Validate if the designated constraints aren't met.
type FreezeBalanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FreezeBalanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FreezeBalanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FreezeBalanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FreezeBalanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FreezeBalanceResponseValidationError) ErrorName() string {
	return "FreezeBalanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FreezeBalanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFreezeBalanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FreezeBalanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FreezeBalanceResponseValidationError{}

// Validate checks the field values on ConfirmTransferRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfirmTransferRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfirmTransferRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfirmTransferRequestMultiError, or nil if none found.
func (m *ConfirmTransferRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfirmTransferRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FreezeId

	// no validation rules for IdempotencyKey

	// no validation rules for ExpectedUserVersion

	// no validation rules for ExpectedMerchantVersion

	if len(errors) > 0 {
		return ConfirmTransferRequestMultiError(errors)
	}

	return nil
}

// ConfirmTransferRequestMultiError is an error wrapping multiple validation
// errors returned by ConfirmTransferRequest.ValidateAll() if the designated
// constraints aren't met.
type ConfirmTransferRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfirmTransferRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfirmTransferRequestMultiError) AllErrors() []error { return m }

// ConfirmTransferRequestValidationError is the validation error returned by
// ConfirmTransferRequest.Validate if the designated constraints aren't met.
type ConfirmTransferRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmTransferRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmTransferRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmTransferRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmTransferRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmTransferRequestValidationError) ErrorName() string {
	return "ConfirmTransferRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConfirmTransferRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmTransferRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmTransferRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmTransferRequestValidationError{}

// Validate checks the field values on ConfirmTransferResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfirmTransferResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfirmTransferResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfirmTransferResponseMultiError, or nil if none found.
func (m *ConfirmTransferResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfirmTransferResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for TransactionId

	// no validation rules for NewUserVersion

	// no validation rules for NewMerchantVersion

	if len(errors) > 0 {
		return ConfirmTransferResponseMultiError(errors)
	}

	return nil
}

// ConfirmTransferResponseMultiError is an error wrapping multiple validation
// errors returned by ConfirmTransferResponse.ValidateAll() if the designated
// constraints aren't met.
type ConfirmTransferResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfirmTransferResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfirmTransferResponseMultiError) AllErrors() []error { return m }

// ConfirmTransferResponseValidationError is the validation error returned by
// ConfirmTransferResponse.Validate if the designated constraints aren't met.
type ConfirmTransferResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmTransferResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmTransferResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmTransferResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmTransferResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmTransferResponseValidationError) ErrorName() string {
	return "ConfirmTransferResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ConfirmTransferResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmTransferResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmTransferResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmTransferResponseValidationError{}

// Validate checks the field values on CancelFreezeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelFreezeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelFreezeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelFreezeRequestMultiError, or nil if none found.
func (m *CancelFreezeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelFreezeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FreezeId

	// no validation rules for Reason

	// no validation rules for IdempotencyKey

	// no validation rules for ExpectedVersion

	if len(errors) > 0 {
		return CancelFreezeRequestMultiError(errors)
	}

	return nil
}

// CancelFreezeRequestMultiError is an error wrapping multiple validation
// errors returned by CancelFreezeRequest.ValidateAll() if the designated
// constraints aren't met.
type CancelFreezeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelFreezeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelFreezeRequestMultiError) AllErrors() []error { return m }

// CancelFreezeRequestValidationError is the validation error returned by
// CancelFreezeRequest.Validate if the designated constraints aren't met.
type CancelFreezeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelFreezeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelFreezeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelFreezeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelFreezeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelFreezeRequestValidationError) ErrorName() string {
	return "CancelFreezeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelFreezeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelFreezeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelFreezeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelFreezeRequestValidationError{}

// Validate checks the field values on CancelFreezeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelFreezeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelFreezeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelFreezeResponseMultiError, or nil if none found.
func (m *CancelFreezeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelFreezeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for NewVersion

	if len(errors) > 0 {
		return CancelFreezeResponseMultiError(errors)
	}

	return nil
}

// CancelFreezeResponseMultiError is an error wrapping multiple validation
// errors returned by CancelFreezeResponse.ValidateAll() if the designated
// constraints aren't met.
type CancelFreezeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelFreezeResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelFreezeResponseMultiError) AllErrors() []error { return m }

// CancelFreezeResponseValidationError is the validation error returned by
// CancelFreezeResponse.Validate if the designated constraints aren't met.
type CancelFreezeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelFreezeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelFreezeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelFreezeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelFreezeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelFreezeResponseValidationError) ErrorName() string {
	return "CancelFreezeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CancelFreezeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelFreezeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelFreezeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelFreezeResponseValidationError{}

// Validate checks the field values on RechargeBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RechargeBalanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RechargeBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RechargeBalanceRequestMultiError, or nil if none found.
func (m *RechargeBalanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RechargeBalanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Amount

	// no validation rules for Currency

	// no validation rules for ExternalTransactionId

	// no validation rules for PaymentMethodType

	// no validation rules for PaymentAccount

	// no validation rules for IdempotencyKey

	// no validation rules for ExpectedVersion

	if len(errors) > 0 {
		return RechargeBalanceRequestMultiError(errors)
	}

	return nil
}

// RechargeBalanceRequestMultiError is an error wrapping multiple validation
// errors returned by RechargeBalanceRequest.ValidateAll() if the designated
// constraints aren't met.
type RechargeBalanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RechargeBalanceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RechargeBalanceRequestMultiError) AllErrors() []error { return m }

// RechargeBalanceRequestValidationError is the validation error returned by
// RechargeBalanceRequest.Validate if the designated constraints aren't met.
type RechargeBalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RechargeBalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RechargeBalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RechargeBalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RechargeBalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RechargeBalanceRequestValidationError) ErrorName() string {
	return "RechargeBalanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RechargeBalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRechargeBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RechargeBalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RechargeBalanceRequestValidationError{}

// Validate checks the field values on RechargeBalanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RechargeBalanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RechargeBalanceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RechargeBalanceResponseMultiError, or nil if none found.
func (m *RechargeBalanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RechargeBalanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for TransactionId

	// no validation rules for NewVersion

	if len(errors) > 0 {
		return RechargeBalanceResponseMultiError(errors)
	}

	return nil
}

// RechargeBalanceResponseMultiError is an error wrapping multiple validation
// errors returned by RechargeBalanceResponse.ValidateAll() if the designated
// constraints aren't met.
type RechargeBalanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RechargeBalanceResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RechargeBalanceResponseMultiError) AllErrors() []error { return m }

// RechargeBalanceResponseValidationError is the validation error returned by
// RechargeBalanceResponse.Validate if the designated constraints aren't met.
type RechargeBalanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RechargeBalanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RechargeBalanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RechargeBalanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RechargeBalanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RechargeBalanceResponseValidationError) ErrorName() string {
	return "RechargeBalanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RechargeBalanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRechargeBalanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RechargeBalanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RechargeBalanceResponseValidationError{}

// Validate checks the field values on WithdrawBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WithdrawBalanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WithdrawBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WithdrawBalanceRequestMultiError, or nil if none found.
func (m *WithdrawBalanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WithdrawBalanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Amount

	// no validation rules for Currency

	// no validation rules for PaymentMethodId

	// no validation rules for IdempotencyKey

	// no validation rules for ExpectedVersion

	if len(errors) > 0 {
		return WithdrawBalanceRequestMultiError(errors)
	}

	return nil
}

// WithdrawBalanceRequestMultiError is an error wrapping multiple validation
// errors returned by WithdrawBalanceRequest.ValidateAll() if the designated
// constraints aren't met.
type WithdrawBalanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WithdrawBalanceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WithdrawBalanceRequestMultiError) AllErrors() []error { return m }

// WithdrawBalanceRequestValidationError is the validation error returned by
// WithdrawBalanceRequest.Validate if the designated constraints aren't met.
type WithdrawBalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WithdrawBalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WithdrawBalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WithdrawBalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WithdrawBalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WithdrawBalanceRequestValidationError) ErrorName() string {
	return "WithdrawBalanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WithdrawBalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWithdrawBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WithdrawBalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WithdrawBalanceRequestValidationError{}

// Validate checks the field values on WithdrawBalanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WithdrawBalanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WithdrawBalanceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WithdrawBalanceResponseMultiError, or nil if none found.
func (m *WithdrawBalanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WithdrawBalanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for TransactionId

	// no validation rules for NewVersion

	if len(errors) > 0 {
		return WithdrawBalanceResponseMultiError(errors)
	}

	return nil
}

// WithdrawBalanceResponseMultiError is an error wrapping multiple validation
// errors returned by WithdrawBalanceResponse.ValidateAll() if the designated
// constraints aren't met.
type WithdrawBalanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WithdrawBalanceResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WithdrawBalanceResponseMultiError) AllErrors() []error { return m }

// WithdrawBalanceResponseValidationError is the validation error returned by
// WithdrawBalanceResponse.Validate if the designated constraints aren't met.
type WithdrawBalanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WithdrawBalanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WithdrawBalanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WithdrawBalanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WithdrawBalanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WithdrawBalanceResponseValidationError) ErrorName() string {
	return "WithdrawBalanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WithdrawBalanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWithdrawBalanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WithdrawBalanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WithdrawBalanceResponseValidationError{}

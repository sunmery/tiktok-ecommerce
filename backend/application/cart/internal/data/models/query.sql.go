// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package models

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const EmptyCart = `-- name: EmptyCart :exec
DELETE
FROM carts.cart_items AS ci
WHERE ci.cart_id =
      (SELECT c.cart_id
       FROM carts.carts AS c
       WHERE c.user_id = $1
         AND c.cart_name = $2)
`

type EmptyCartParams struct {
	UserID   uuid.UUID `json:"userID"`
	CartName string    `json:"cartName"`
}

// EmptyCart
//
//	DELETE
//	FROM carts.cart_items AS ci
//	WHERE ci.cart_id =
//	      (SELECT c.cart_id
//	       FROM carts.carts AS c
//	       WHERE c.user_id = $1
//	         AND c.cart_name = $2)
func (q *Queries) EmptyCart(ctx context.Context, arg EmptyCartParams) error {
	_, err := q.db.Exec(ctx, EmptyCart, arg.UserID, arg.CartName)
	return err
}

const GetCart = `-- name: GetCart :many
SELECT ci.product_id, ci.quantity
FROM carts.cart_items AS ci
WHERE ci.cart_id =
      (SELECT c.cart_id
       FROM carts.carts AS c
       WHERE c.user_id = $1
         AND c.cart_name = $2
       LIMIT 1)
`

type GetCartParams struct {
	UserID   uuid.UUID `json:"userID"`
	CartName string    `json:"cartName"`
}

type GetCartRow struct {
	ProductID int32 `json:"productID"`
	Quantity  int32 `json:"quantity"`
}

// GetCart
//
//	SELECT ci.product_id, ci.quantity
//	FROM carts.cart_items AS ci
//	WHERE ci.cart_id =
//	      (SELECT c.cart_id
//	       FROM carts.carts AS c
//	       WHERE c.user_id = $1
//	         AND c.cart_name = $2
//	       LIMIT 1)
func (q *Queries) GetCart(ctx context.Context, arg GetCartParams) ([]GetCartRow, error) {
	rows, err := q.db.Query(ctx, GetCart, arg.UserID, arg.CartName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCartRow
	for rows.Next() {
		var i GetCartRow
		if err := rows.Scan(&i.ProductID, &i.Quantity); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const RemoveCartItem = `-- name: RemoveCartItem :one


DELETE
FROM carts.cart_items AS ci
WHERE ci.cart_id =
      (SELECT c.cart_id
       FROM carts.carts AS c
       WHERE c.user_id = $1
         AND c.cart_name = $2
       LIMIT 1)          -- 获取用户的购物车ID
  AND ci.product_id = $3 -- 删除指定商品ID
RETURNING cart_item_id, cart_id, product_id, quantity, created_at, updated_at
`

type RemoveCartItemParams struct {
	UserID    uuid.UUID `json:"userID"`
	CartName  string    `json:"cartName"`
	ProductID int32     `json:"productID"`
}

// 获取用户的购物车ID
//
//	DELETE
//	FROM carts.cart_items AS ci
//	WHERE ci.cart_id =
//	      (SELECT c.cart_id
//	       FROM carts.carts AS c
//	       WHERE c.user_id = $1
//	         AND c.cart_name = $2
//	       LIMIT 1)          -- 获取用户的购物车ID
//	  AND ci.product_id = $3 -- 删除指定商品ID
//	RETURNING cart_item_id, cart_id, product_id, quantity, created_at, updated_at
func (q *Queries) RemoveCartItem(ctx context.Context, arg RemoveCartItemParams) (CartsCartItems, error) {
	row := q.db.QueryRow(ctx, RemoveCartItem, arg.UserID, arg.CartName, arg.ProductID)
	var i CartsCartItems
	err := row.Scan(
		&i.CartItemID,
		&i.CartID,
		&i.ProductID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpsertCartItem = `-- name: UpsertCartItem :one
WITH
existing_cart AS (
    SELECT cart_id
    FROM carts.carts
    WHERE user_id = $3
      AND cart_name = 'cart'
),
inserted_cart AS (
    INSERT INTO carts.carts (user_id, cart_name)
        SELECT $3, 'cart'
        WHERE NOT EXISTS (SELECT 1 FROM existing_cart) -- 仅在无现有购物车时插入
        ON CONFLICT (user_id, cart_name) DO NOTHING    -- 处理并发插入冲突
        RETURNING cart_id
),
target_cart AS (
    SELECT cart_id FROM existing_cart
    UNION ALL
    SELECT cart_id FROM inserted_cart
)
INSERT INTO carts.cart_items (cart_id, product_id, quantity)
SELECT cart_id, $1, $2
FROM target_cart
ON CONFLICT (cart_id, product_id)
    DO UPDATE SET
                  quantity = cart_items.quantity + EXCLUDED.quantity,
                  updated_at = now()
RETURNING cart_item_id, cart_id, product_id, quantity, created_at, updated_at
`

type UpsertCartItemParams struct {
	ProductID *int32      `json:"productID"`
	Quantity  *int32      `json:"quantity"`
	UserID    pgtype.UUID `json:"userID"`
}

// 1. 尝试获取现有购物车
// 2. 若不存在则插入新购物车
// 3. 合并现有或新插入的购物车ID
// 4. 插入或更新商品项
//
//	WITH
//	existing_cart AS (
//	    SELECT cart_id
//	    FROM carts.carts
//	    WHERE user_id = $3
//	      AND cart_name = 'cart'
//	),
//	inserted_cart AS (
//	    INSERT INTO carts.carts (user_id, cart_name)
//	        SELECT $3, 'cart'
//	        WHERE NOT EXISTS (SELECT 1 FROM existing_cart) -- 仅在无现有购物车时插入
//	        ON CONFLICT (user_id, cart_name) DO NOTHING    -- 处理并发插入冲突
//	        RETURNING cart_id
//	),
//	target_cart AS (
//	    SELECT cart_id FROM existing_cart
//	    UNION ALL
//	    SELECT cart_id FROM inserted_cart
//	)
//	INSERT INTO carts.cart_items (cart_id, product_id, quantity)
//	SELECT cart_id, $1, $2
//	FROM target_cart
//	ON CONFLICT (cart_id, product_id)
//	    DO UPDATE SET
//	                  quantity = cart_items.quantity + EXCLUDED.quantity,
//	                  updated_at = now()
//	RETURNING cart_item_id, cart_id, product_id, quantity, created_at, updated_at
func (q *Queries) UpsertCartItem(ctx context.Context, arg UpsertCartItemParams) (CartsCartItems, error) {
	row := q.db.QueryRow(ctx, UpsertCartItem, arg.ProductID, arg.Quantity, arg.UserID)
	var i CartsCartItems
	err := row.Scan(
		&i.CartItemID,
		&i.CartID,
		&i.ProductID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

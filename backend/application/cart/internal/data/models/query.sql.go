// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package models

import (
	"context"
)

const EmptyCart = `-- name: EmptyCart :exec
DELETE FROM cart_schema.cart_items AS ci
WHERE ci.cart_id = 
    (SELECT c.cart_id
     FROM cart_schema.cart AS c
     WHERE c.owner = $1 AND c.name = $2 AND c.cart_name = $3)
`

type EmptyCartParams struct {
	Owner    string `json:"owner"`
	Name     string `json:"name"`
	CartName string `json:"cartName"`
}

// EmptyCart
//
//	DELETE FROM cart_schema.cart_items AS ci
//	WHERE ci.cart_id =
//	    (SELECT c.cart_id
//	     FROM cart_schema.cart AS c
//	     WHERE c.owner = $1 AND c.name = $2 AND c.cart_name = $3)
func (q *Queries) EmptyCart(ctx context.Context, arg EmptyCartParams) error {
	_, err := q.db.Exec(ctx, EmptyCart, arg.Owner, arg.Name, arg.CartName)
	return err
}

const GetCart = `-- name: GetCart :many
SELECT ci.product_id, ci.quantity 
FROM cart_schema.cart_items AS ci
WHERE ci.cart_id = 
    (SELECT c.cart_id
     FROM cart_schema.cart AS c
     WHERE c.owner = $1 AND c.name = $2 AND c.cart_name = $3 LIMIT 1)
`

type GetCartParams struct {
	Owner    string `json:"owner"`
	Name     string `json:"name"`
	CartName string `json:"cartName"`
}

type GetCartRow struct {
	ProductID int32 `json:"productID"`
	Quantity  int32 `json:"quantity"`
}

// GetCart
//
//	SELECT ci.product_id, ci.quantity
//	FROM cart_schema.cart_items AS ci
//	WHERE ci.cart_id =
//	    (SELECT c.cart_id
//	     FROM cart_schema.cart AS c
//	     WHERE c.owner = $1 AND c.name = $2 AND c.cart_name = $3 LIMIT 1)
func (q *Queries) GetCart(ctx context.Context, arg GetCartParams) ([]GetCartRow, error) {
	rows, err := q.db.Query(ctx, GetCart, arg.Owner, arg.Name, arg.CartName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCartRow
	for rows.Next() {
		var i GetCartRow
		if err := rows.Scan(&i.ProductID, &i.Quantity); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const RemoveCartItem = `-- name: RemoveCartItem :one


DELETE FROM cart_schema.cart_items AS ci
WHERE ci.cart_id = 
    (SELECT c.cart_id
     FROM cart_schema.cart AS c
     WHERE c.owner = $1 AND c.name = $2 AND c.cart_name = $3 LIMIT 1)  -- 获取用户的购物车ID
    AND ci.product_id = $4  -- 删除指定商品ID
RETURNING cart_item_id, cart_id, product_id, quantity, created_at, updated_at
`

type RemoveCartItemParams struct {
	Owner     string `json:"owner"`
	Name      string `json:"name"`
	CartName  string `json:"cartName"`
	ProductID int32  `json:"productID"`
}

// 获取用户的购物车ID
//
//	DELETE FROM cart_schema.cart_items AS ci
//	WHERE ci.cart_id =
//	    (SELECT c.cart_id
//	     FROM cart_schema.cart AS c
//	     WHERE c.owner = $1 AND c.name = $2 AND c.cart_name = $3 LIMIT 1)  -- 获取用户的购物车ID
//	    AND ci.product_id = $4  -- 删除指定商品ID
//	RETURNING cart_item_id, cart_id, product_id, quantity, created_at, updated_at
func (q *Queries) RemoveCartItem(ctx context.Context, arg RemoveCartItemParams) (CartSchemaCartItems, error) {
	row := q.db.QueryRow(ctx, RemoveCartItem,
		arg.Owner,
		arg.Name,
		arg.CartName,
		arg.ProductID,
	)
	var i CartSchemaCartItems
	err := row.Scan(
		&i.CartItemID,
		&i.CartID,
		&i.ProductID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpsertItem = `-- name: UpsertItem :one
INSERT INTO cart_schema.cart_items (cart_id, product_id, quantity, created_at, updated_at)
VALUES (
    (SELECT c.cart_id
     FROM cart_schema.cart AS c
     WHERE c.owner = $1 AND c.name = $2 AND c.cart_name = $3 LIMIT 1),  -- 获取用户的购物车ID
    $4,   -- 商品ID
    $5,   -- 商品数量
    CURRENT_TIMESTAMP,  -- 创建时间
    CURRENT_TIMESTAMP   -- 更新时间
)
ON CONFLICT (cart_id, product_id)  -- 如果购物车ID和商品ID组合重复
DO UPDATE SET 
    quantity = cart_schema.cart_items.quantity + EXCLUDED.quantity,  -- 更新商品数量
    updated_at = CURRENT_TIMESTAMP  -- 更新时间
RETURNING cart_item_id, cart_id, product_id, quantity, created_at, updated_at
`

type UpsertItemParams struct {
	Owner     string `json:"owner"`
	Name      string `json:"name"`
	CartName  string `json:"cartName"`
	ProductID int32  `json:"productID"`
	Quantity  int32  `json:"quantity"`
}

// UpsertItem
//
//	INSERT INTO cart_schema.cart_items (cart_id, product_id, quantity, created_at, updated_at)
//	VALUES (
//	    (SELECT c.cart_id
//	     FROM cart_schema.cart AS c
//	     WHERE c.owner = $1 AND c.name = $2 AND c.cart_name = $3 LIMIT 1),  -- 获取用户的购物车ID
//	    $4,   -- 商品ID
//	    $5,   -- 商品数量
//	    CURRENT_TIMESTAMP,  -- 创建时间
//	    CURRENT_TIMESTAMP   -- 更新时间
//	)
//	ON CONFLICT (cart_id, product_id)  -- 如果购物车ID和商品ID组合重复
//	DO UPDATE SET
//	    quantity = cart_schema.cart_items.quantity + EXCLUDED.quantity,  -- 更新商品数量
//	    updated_at = CURRENT_TIMESTAMP  -- 更新时间
//	RETURNING cart_item_id, cart_id, product_id, quantity, created_at, updated_at
func (q *Queries) UpsertItem(ctx context.Context, arg UpsertItemParams) (CartSchemaCartItems, error) {
	row := q.db.QueryRow(ctx, UpsertItem,
		arg.Owner,
		arg.Name,
		arg.CartName,
		arg.ProductID,
		arg.Quantity,
	)
	var i CartSchemaCartItems
	err := row.Scan(
		&i.CartItemID,
		&i.CartID,
		&i.ProductID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

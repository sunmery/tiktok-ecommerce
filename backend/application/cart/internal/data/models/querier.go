// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package models

import (
	"context"
)

type Querier interface {
	//EmptyCart
	//
	//  DELETE
	//  FROM carts.cart_items AS ci
	//  WHERE ci.cart_id =
	//        (SELECT c.cart_id
	//         FROM carts.carts AS c
	//         WHERE c.user_id = $1
	//           AND c.cart_name = $2)
	EmptyCart(ctx context.Context, arg EmptyCartParams) error
	//GetCart
	//
	//  SELECT ci.product_id, ci.quantity
	//  FROM carts.cart_items AS ci
	//  WHERE ci.cart_id =
	//        (SELECT c.cart_id
	//         FROM carts.carts AS c
	//         WHERE c.user_id = $1
	//           AND c.cart_name = $2
	//         LIMIT 1)
	GetCart(ctx context.Context, arg GetCartParams) ([]GetCartRow, error)
	// 获取用户的购物车ID
	//
	//
	//
	//  DELETE
	//  FROM carts.cart_items AS ci
	//  WHERE ci.cart_id =
	//        (SELECT c.cart_id
	//         FROM carts.carts AS c
	//         WHERE c.user_id = $1
	//           AND c.cart_name = $2
	//         LIMIT 1)          -- 获取用户的购物车ID
	//    AND ci.product_id = $3 -- 删除指定商品ID
	//  RETURNING cart_item_id, cart_id, product_id, quantity, created_at, updated_at
	RemoveCartItem(ctx context.Context, arg RemoveCartItemParams) (CartsCartItems, error)
	// 1. 尝试获取现有购物车
	// 2. 若不存在则插入新购物车
	// 3. 合并现有或新插入的购物车ID
	// 4. 插入或更新商品项
	//
	//  WITH
	//  existing_cart AS (
	//      SELECT cart_id
	//      FROM carts.carts
	//      WHERE user_id = $3
	//        AND cart_name = 'cart'
	//  ),
	//  inserted_cart AS (
	//      INSERT INTO carts.carts (user_id, cart_name)
	//          SELECT $3, 'cart'
	//          WHERE NOT EXISTS (SELECT 1 FROM existing_cart) -- 仅在无现有购物车时插入
	//          ON CONFLICT (user_id, cart_name) DO NOTHING    -- 处理并发插入冲突
	//          RETURNING cart_id
	//  ),
	//  target_cart AS (
	//      SELECT cart_id FROM existing_cart
	//      UNION ALL
	//      SELECT cart_id FROM inserted_cart
	//  )
	//  INSERT INTO carts.cart_items (cart_id, product_id, quantity)
	//  SELECT cart_id, $1, $2
	//  FROM target_cart
	//  ON CONFLICT (cart_id, product_id)
	//      DO UPDATE SET
	//                    quantity = cart_items.quantity + EXCLUDED.quantity,
	//                    updated_at = now()
	//  RETURNING cart_item_id, cart_id, product_id, quantity, created_at, updated_at
	UpsertCartItem(ctx context.Context, arg UpsertCartItemParams) (CartsCartItems, error)
}

var _ Querier = (*Queries)(nil)

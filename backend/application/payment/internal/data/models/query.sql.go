// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package models

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const CreatePaymentQuery = `-- name: CreatePaymentQuery :one
INSERT INTO payments.payments (payment_id, order_id, amount, currency, method, status,
                      gateway_tx_id, metadata, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING payment_id, order_id, amount, currency, method, status, gateway_tx_id, metadata, created_at, updated_at
`

type CreatePaymentQueryParams struct {
	PaymentID   uuid.UUID          `json:"paymentID"`
	OrderID     uuid.UUID          `json:"orderID"`
	Amount      pgtype.Numeric     `json:"amount"`
	Currency    string             `json:"currency"`
	Method      string             `json:"method"`
	Status      string             `json:"status"`
	GatewayTxID *string            `json:"gatewayTxID"`
	Metadata    []byte             `json:"metadata"`
	CreatedAt   pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt   pgtype.Timestamptz `json:"updatedAt"`
}

// CreatePaymentQuery
//
//	INSERT INTO payments.payments (payment_id, order_id, amount, currency, method, status,
//	                      gateway_tx_id, metadata, created_at, updated_at)
//	VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
//	RETURNING payment_id, order_id, amount, currency, method, status, gateway_tx_id, metadata, created_at, updated_at
func (q *Queries) CreatePaymentQuery(ctx context.Context, arg CreatePaymentQueryParams) (PaymentsPayments, error) {
	row := q.db.QueryRow(ctx, CreatePaymentQuery,
		arg.PaymentID,
		arg.OrderID,
		arg.Amount,
		arg.Currency,
		arg.Method,
		arg.Status,
		arg.GatewayTxID,
		arg.Metadata,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i PaymentsPayments
	err := row.Scan(
		&i.PaymentID,
		&i.OrderID,
		&i.Amount,
		&i.Currency,
		&i.Method,
		&i.Status,
		&i.GatewayTxID,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetByIDQuery = `-- name: GetByIDQuery :one
SELECT payment_id, order_id, amount, currency, method, status, gateway_tx_id, metadata, created_at, updated_at
FROM payments.payments
WHERE payment_id = $1
`

// GetByIDQuery
//
//	SELECT payment_id, order_id, amount, currency, method, status, gateway_tx_id, metadata, created_at, updated_at
//	FROM payments.payments
//	WHERE payment_id = $1
func (q *Queries) GetByIDQuery(ctx context.Context, paymentID uuid.UUID) (PaymentsPayments, error) {
	row := q.db.QueryRow(ctx, GetByIDQuery, paymentID)
	var i PaymentsPayments
	err := row.Scan(
		&i.PaymentID,
		&i.OrderID,
		&i.Amount,
		&i.Currency,
		&i.Method,
		&i.Status,
		&i.GatewayTxID,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetByOrderIDQuery = `-- name: GetByOrderIDQuery :one
SELECT payment_id, order_id, amount, currency, method, status, gateway_tx_id, metadata, created_at, updated_at
FROM payments.payments
WHERE order_id = $1
`

// GetByOrderIDQuery
//
//	SELECT payment_id, order_id, amount, currency, method, status, gateway_tx_id, metadata, created_at, updated_at
//	FROM payments.payments
//	WHERE order_id = $1
func (q *Queries) GetByOrderIDQuery(ctx context.Context, orderID uuid.UUID) (PaymentsPayments, error) {
	row := q.db.QueryRow(ctx, GetByOrderIDQuery, orderID)
	var i PaymentsPayments
	err := row.Scan(
		&i.PaymentID,
		&i.OrderID,
		&i.Amount,
		&i.Currency,
		&i.Method,
		&i.Status,
		&i.GatewayTxID,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpdateStatusQuery = `-- name: UpdateStatusQuery :one
UPDATE payments.payments
SET status        = $2,
    gateway_tx_id = $3,
    updated_at    = $4
WHERE payment_id = $1
RETURNING payment_id, order_id, amount, currency, method, status, gateway_tx_id, metadata, created_at, updated_at
`

type UpdateStatusQueryParams struct {
	PaymentID   uuid.UUID          `json:"paymentID"`
	Status      string             `json:"status"`
	GatewayTxID *string            `json:"gatewayTxID"`
	UpdatedAt   pgtype.Timestamptz `json:"updatedAt"`
}

// UpdateStatusQuery
//
//	UPDATE payments.payments
//	SET status        = $2,
//	    gateway_tx_id = $3,
//	    updated_at    = $4
//	WHERE payment_id = $1
//	RETURNING payment_id, order_id, amount, currency, method, status, gateway_tx_id, metadata, created_at, updated_at
func (q *Queries) UpdateStatusQuery(ctx context.Context, arg UpdateStatusQueryParams) (PaymentsPayments, error) {
	row := q.db.QueryRow(ctx, UpdateStatusQuery,
		arg.PaymentID,
		arg.Status,
		arg.GatewayTxID,
		arg.UpdatedAt,
	)
	var i PaymentsPayments
	err := row.Scan(
		&i.PaymentID,
		&i.OrderID,
		&i.Amount,
		&i.Currency,
		&i.Method,
		&i.Status,
		&i.GatewayTxID,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

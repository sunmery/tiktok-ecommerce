syntax = "proto3";
package kratos.api;

option go_package = "backend/user/internal/conf;conf"; // 生成的包路径

import "google/protobuf/duration.proto";

message Bootstrap {
  Server server = 1;
  Data data = 2;
}

message Server {
  message HTTP {
    string network = 1;
    string addr = 2;
    google.protobuf.Duration timeout = 3;
  }
  message GRPC {
    string network = 1;
    string addr = 2;
    google.protobuf.Duration timeout = 3;
  }
  HTTP http = 1;
  GRPC grpc = 2;
}

message Data {
  message Pool {
    int32 max_conns = 1;
    int32 min_conns = 2;
    google.protobuf.Duration max_conn_lifetime = 3;
    google.protobuf.Duration health_check_period = 4;
    google.protobuf.Duration max_conn_idle_time = 5;
  }
  message Database {
    string driver = 1;
    string source = 2;
    Pool pool = 3;
  }
  message Cache {
    string network = 1;
    string addr = 2;
    google.protobuf.Duration read_timeout = 3;
    google.protobuf.Duration write_timeout = 4;
    google.protobuf.Duration dial_timeout = 5;
    string username = 6;
    string password = 7;
  }
  Database database = 1;
  Cache cache = 2;
}

// 授权/认证
message Auth {
  message JWT {
    string certificate = 1;  // jwt 证书
  }
  message Casdoor {
    message Server {
      string endpoint = 1; // casdoor 地址,包含端口
      string client_id = 2 [json_name = "client_id"]; // casdoor 客户端 ID
      string client_secret = 3 [json_name = "client_secret"]; // casdoor 密钥
      string organization = 4; // 组织名称
      string application = 5; // 应用名称
    }
    Server server = 2;
  }
  JWT jwt = 1;
  Casdoor casdoor = 2;
}

// 可观测性
message Observability {
  // 链路追踪
  message Trace {
    message GRPC {
      string endpoint = 1; // 接收grpc链路的地址,包含端口
    }
    message HTTP {
      string endpoint = 1; // 接收http 链路的地址,包含端口
    }
    GRPC grpc = 2;
    HTTP http = 3;
  }
  // 日志
  message Logging {

  }
  // 指标
  message Metric {

  }
  Trace trace = 1;
  Metric metric = 2;
  Logging logging = 3;
}

// 注册/配置中心
message Consul {
  message RegistryCenter {
    string address = 1; // Consul 地址
    string scheme = 2; // 模式, http/https
    bool health_check = 3; // 健康检查
    string acl_token = 4; // ACL Token
  }
  message ConfigCenter {
    string address = 1; // Consul 地址
    string acl_token = 2; // ACL Token
  }
  RegistryCenter registry_center = 1;
  ConfigCenter config_center = 2;
}

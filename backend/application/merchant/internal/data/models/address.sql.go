// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: address.sql

package models

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const BatchCreateAddresses = `-- name: BatchCreateAddresses :many
INSERT INTO merchant.addresses (id,
                                 merchant_id,
                                 address_type,
                                 contact_person,
                                 contact_phone,
                                 street_address,
                                 city,
                                 state,
                                 country,
                                 zip_code,
                                 is_default,
                                 remarks)
VALUES (UNNEST($1::bigint[]),
        UNNEST($2::uuid[]),
        UNNEST($3::varchar[]),
        UNNEST($4::varchar[]),
        UNNEST($5::varchar[]),
        UNNEST($6::text[]),
        UNNEST($7::varchar[]),
        UNNEST($8::varchar[]),
        UNNEST($9::varchar[]),
        UNNEST($10::varchar[]),
        UNNEST($11::boolean[]),
        UNNEST($12::text[]))
RETURNING id, merchant_id, address_type, contact_person, contact_phone, street_address, city, state, country, zip_code, is_default, remarks, created_at, updated_at
`

type BatchCreateAddressesParams struct {
	ID            []int64
	MerchantID    []uuid.UUID
	AddressType   []string
	ContactPerson []string
	ContactPhone  []string
	StreetAddress []string
	City          []string
	State         []string
	Country       []string
	ZipCode       []string
	IsDefault     []bool
	Remarks       []string
}

// 批量创建地址（需要服务层处理）
//
//	INSERT INTO merchant.addresses (id,
//	                                 merchant_id,
//	                                 address_type,
//	                                 contact_person,
//	                                 contact_phone,
//	                                 street_address,
//	                                 city,
//	                                 state,
//	                                 country,
//	                                 zip_code,
//	                                 is_default,
//	                                 remarks)
//	VALUES (UNNEST($1::bigint[]),
//	        UNNEST($2::uuid[]),
//	        UNNEST($3::varchar[]),
//	        UNNEST($4::varchar[]),
//	        UNNEST($5::varchar[]),
//	        UNNEST($6::text[]),
//	        UNNEST($7::varchar[]),
//	        UNNEST($8::varchar[]),
//	        UNNEST($9::varchar[]),
//	        UNNEST($10::varchar[]),
//	        UNNEST($11::boolean[]),
//	        UNNEST($12::text[]))
//	RETURNING id, merchant_id, address_type, contact_person, contact_phone, street_address, city, state, country, zip_code, is_default, remarks, created_at, updated_at
func (q *Queries) BatchCreateAddresses(ctx context.Context, arg BatchCreateAddressesParams) ([]MerchantAddresses, error) {
	rows, err := q.db.Query(ctx, BatchCreateAddresses,
		arg.ID,
		arg.MerchantID,
		arg.AddressType,
		arg.ContactPerson,
		arg.ContactPhone,
		arg.StreetAddress,
		arg.City,
		arg.State,
		arg.Country,
		arg.ZipCode,
		arg.IsDefault,
		arg.Remarks,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MerchantAddresses
	for rows.Next() {
		var i MerchantAddresses
		if err := rows.Scan(
			&i.ID,
			&i.MerchantID,
			&i.AddressType,
			&i.ContactPerson,
			&i.ContactPhone,
			&i.StreetAddress,
			&i.City,
			&i.State,
			&i.Country,
			&i.ZipCode,
			&i.IsDefault,
			&i.Remarks,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const CreateAddress = `-- name: CreateAddress :one
INSERT INTO merchant.addresses (id,
                                 merchant_id,
                                 address_type,
                                 contact_person,
                                 contact_phone,
                                 street_address,
                                 city,
                                 state,
                                 country,
                                 zip_code,
                                 is_default,
                                 remarks)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
RETURNING id, merchant_id, address_type, contact_person, contact_phone, street_address, city, state, country, zip_code, is_default, remarks, created_at, updated_at
`

type CreateAddressParams struct {
	ID            int64
	MerchantID    uuid.UUID
	AddressType   string
	ContactPerson string
	ContactPhone  string
	StreetAddress string
	City          string
	State         string
	Country       string
	ZipCode       string
	IsDefault     bool
	Remarks       string
}

// addresses.sql
// 创建商家地址
//
//	INSERT INTO merchant.addresses (id,
//	                                 merchant_id,
//	                                 address_type,
//	                                 contact_person,
//	                                 contact_phone,
//	                                 street_address,
//	                                 city,
//	                                 state,
//	                                 country,
//	                                 zip_code,
//	                                 is_default,
//	                                 remarks)
//	VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
//	RETURNING id, merchant_id, address_type, contact_person, contact_phone, street_address, city, state, country, zip_code, is_default, remarks, created_at, updated_at
func (q *Queries) CreateAddress(ctx context.Context, arg CreateAddressParams) (MerchantAddresses, error) {
	row := q.db.QueryRow(ctx, CreateAddress,
		arg.ID,
		arg.MerchantID,
		arg.AddressType,
		arg.ContactPerson,
		arg.ContactPhone,
		arg.StreetAddress,
		arg.City,
		arg.State,
		arg.Country,
		arg.ZipCode,
		arg.IsDefault,
		arg.Remarks,
	)
	var i MerchantAddresses
	err := row.Scan(
		&i.ID,
		&i.MerchantID,
		&i.AddressType,
		&i.ContactPerson,
		&i.ContactPhone,
		&i.StreetAddress,
		&i.City,
		&i.State,
		&i.Country,
		&i.ZipCode,
		&i.IsDefault,
		&i.Remarks,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteAddress = `-- name: DeleteAddress :exec
DELETE
FROM merchant.addresses
WHERE id = $1
  AND merchant_id = $2
`

type DeleteAddressParams struct {
	ID         int64
	MerchantID uuid.UUID
}

// 删除地址
//
//	DELETE
//	FROM merchant.addresses
//	WHERE id = $1
//	  AND merchant_id = $2
func (q *Queries) DeleteAddress(ctx context.Context, arg DeleteAddressParams) error {
	_, err := q.db.Exec(ctx, DeleteAddress, arg.ID, arg.MerchantID)
	return err
}

const GetAddress = `-- name: GetAddress :one
SELECT id, merchant_id, address_type, contact_person, contact_phone, street_address, city, state, country, zip_code, is_default, remarks, created_at, updated_at
FROM merchant.addresses
WHERE id = $1
  AND merchant_id = $2
`

type GetAddressParams struct {
	ID         int64
	MerchantID uuid.UUID
}

// 获取地址详情
//
//	SELECT id, merchant_id, address_type, contact_person, contact_phone, street_address, city, state, country, zip_code, is_default, remarks, created_at, updated_at
//	FROM merchant.addresses
//	WHERE id = $1
//	  AND merchant_id = $2
func (q *Queries) GetAddress(ctx context.Context, arg GetAddressParams) (MerchantAddresses, error) {
	row := q.db.QueryRow(ctx, GetAddress, arg.ID, arg.MerchantID)
	var i MerchantAddresses
	err := row.Scan(
		&i.ID,
		&i.MerchantID,
		&i.AddressType,
		&i.ContactPerson,
		&i.ContactPhone,
		&i.StreetAddress,
		&i.City,
		&i.State,
		&i.Country,
		&i.ZipCode,
		&i.IsDefault,
		&i.Remarks,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetShippingAddress = `-- name: GetShippingAddress :one
SELECT id, merchant_id, address_type, contact_person, contact_phone, street_address, city, state, country, zip_code, is_default, remarks, created_at, updated_at
FROM merchant.addresses
WHERE merchant_id = $1
  AND address_type = 'WAREHOUSE'
ORDER BY is_default DESC, created_at DESC
LIMIT 1
`

// 智能获取发货地址
//
//	SELECT id, merchant_id, address_type, contact_person, contact_phone, street_address, city, state, country, zip_code, is_default, remarks, created_at, updated_at
//	FROM merchant.addresses
//	WHERE merchant_id = $1
//	  AND address_type = 'WAREHOUSE'
//	ORDER BY is_default DESC, created_at DESC
//	LIMIT 1
func (q *Queries) GetShippingAddress(ctx context.Context, merchantID uuid.UUID) (MerchantAddresses, error) {
	row := q.db.QueryRow(ctx, GetShippingAddress, merchantID)
	var i MerchantAddresses
	err := row.Scan(
		&i.ID,
		&i.MerchantID,
		&i.AddressType,
		&i.ContactPerson,
		&i.ContactPhone,
		&i.StreetAddress,
		&i.City,
		&i.State,
		&i.Country,
		&i.ZipCode,
		&i.IsDefault,
		&i.Remarks,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ListAddresses = `-- name: ListAddresses :many
SELECT id, merchant_id, address_type, contact_person, contact_phone, street_address, city, state, country, zip_code, is_default, remarks, created_at, updated_at
FROM merchant.addresses
WHERE merchant_id = $1
  AND (address_type = $2 OR $2 IS NULL)
  AND (is_default = $3 OR $3 IS NULL)
ORDER BY id
LIMIT $4 OFFSET $5
`

type ListAddressesParams struct {
	MerchantID  uuid.UUID
	AddressType string
	IsDefault   bool
	Limit       int64
	Offset      int64
}

// 地址列表（带分页和过滤）
//
//	SELECT id, merchant_id, address_type, contact_person, contact_phone, street_address, city, state, country, zip_code, is_default, remarks, created_at, updated_at
//	FROM merchant.addresses
//	WHERE merchant_id = $1
//	  AND (address_type = $2 OR $2 IS NULL)
//	  AND (is_default = $3 OR $3 IS NULL)
//	ORDER BY id
//	LIMIT $4 OFFSET $5
func (q *Queries) ListAddresses(ctx context.Context, arg ListAddressesParams) ([]MerchantAddresses, error) {
	rows, err := q.db.Query(ctx, ListAddresses,
		arg.MerchantID,
		arg.AddressType,
		arg.IsDefault,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MerchantAddresses
	for rows.Next() {
		var i MerchantAddresses
		if err := rows.Scan(
			&i.ID,
			&i.MerchantID,
			&i.AddressType,
			&i.ContactPerson,
			&i.ContactPhone,
			&i.StreetAddress,
			&i.City,
			&i.State,
			&i.Country,
			&i.ZipCode,
			&i.IsDefault,
			&i.Remarks,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SetDefaultAddress = `-- name: SetDefaultAddress :one
WITH update_all AS (
    UPDATE merchant.addresses
        SET is_default = false
        WHERE merchant_id = $3
            AND address_type = (SELECT address_type FROM merchant.addresses WHERE id = $2)
            AND id != $1)
UPDATE merchant.addresses
SET is_default = true
WHERE id = $1
RETURNING id, merchant_id, address_type, contact_person, contact_phone, street_address, city, state, country, zip_code, is_default, remarks, created_at, updated_at
`

type SetDefaultAddressParams struct {
	ID         *int64
	Column2    *int64
	MerchantID pgtype.UUID
}

// 设置默认地址（带事务处理）
//
//	WITH update_all AS (
//	    UPDATE merchant.addresses
//	        SET is_default = false
//	        WHERE merchant_id = $3
//	            AND address_type = (SELECT address_type FROM merchant.addresses WHERE id = $2)
//	            AND id != $1)
//	UPDATE merchant.addresses
//	SET is_default = true
//	WHERE id = $1
//	RETURNING id, merchant_id, address_type, contact_person, contact_phone, street_address, city, state, country, zip_code, is_default, remarks, created_at, updated_at
func (q *Queries) SetDefaultAddress(ctx context.Context, arg SetDefaultAddressParams) (MerchantAddresses, error) {
	row := q.db.QueryRow(ctx, SetDefaultAddress, arg.ID, arg.Column2, arg.MerchantID)
	var i MerchantAddresses
	err := row.Scan(
		&i.ID,
		&i.MerchantID,
		&i.AddressType,
		&i.ContactPerson,
		&i.ContactPhone,
		&i.StreetAddress,
		&i.City,
		&i.State,
		&i.Country,
		&i.ZipCode,
		&i.IsDefault,
		&i.Remarks,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpdateAddress = `-- name: UpdateAddress :one
UPDATE merchant.addresses
SET address_type   = COALESCE($1, address_type),
    contact_person = COALESCE($2, contact_person),
    contact_phone  = COALESCE($3, contact_phone),
    street_address = COALESCE($4, street_address),
    city           = COALESCE($5, city),
    state          = COALESCE($6, state),
    country        = COALESCE($7, country),
    zip_code       = COALESCE($8, zip_code),
    is_default     = COALESCE($9, is_default),
    remarks        = COALESCE($10, remarks),
    updated_at     = NOW()
WHERE id = $11
  AND merchant_id = $12
RETURNING id, merchant_id, address_type, contact_person, contact_phone, street_address, city, state, country, zip_code, is_default, remarks, created_at, updated_at
`

type UpdateAddressParams struct {
	AddressType   string
	ContactPerson string
	ContactPhone  string
	StreetAddress string
	City          string
	State         string
	Country       string
	ZipCode       string
	IsDefault     bool
	Remarks       string
	ID            int64
	MerchantID    uuid.UUID
}

// 更新地址（带动态字段更新）
//
//	UPDATE merchant.addresses
//	SET address_type   = COALESCE($1, address_type),
//	    contact_person = COALESCE($2, contact_person),
//	    contact_phone  = COALESCE($3, contact_phone),
//	    street_address = COALESCE($4, street_address),
//	    city           = COALESCE($5, city),
//	    state          = COALESCE($6, state),
//	    country        = COALESCE($7, country),
//	    zip_code       = COALESCE($8, zip_code),
//	    is_default     = COALESCE($9, is_default),
//	    remarks        = COALESCE($10, remarks),
//	    updated_at     = NOW()
//	WHERE id = $11
//	  AND merchant_id = $12
//	RETURNING id, merchant_id, address_type, contact_person, contact_phone, street_address, city, state, country, zip_code, is_default, remarks, created_at, updated_at
func (q *Queries) UpdateAddress(ctx context.Context, arg UpdateAddressParams) (MerchantAddresses, error) {
	row := q.db.QueryRow(ctx, UpdateAddress,
		arg.AddressType,
		arg.ContactPerson,
		arg.ContactPhone,
		arg.StreetAddress,
		arg.City,
		arg.State,
		arg.Country,
		arg.ZipCode,
		arg.IsDefault,
		arg.Remarks,
		arg.ID,
		arg.MerchantID,
	)
	var i MerchantAddresses
	err := row.Scan(
		&i.ID,
		&i.MerchantID,
		&i.AddressType,
		&i.ContactPerson,
		&i.ContactPhone,
		&i.StreetAddress,
		&i.City,
		&i.State,
		&i.Country,
		&i.ZipCode,
		&i.IsDefault,
		&i.Remarks,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

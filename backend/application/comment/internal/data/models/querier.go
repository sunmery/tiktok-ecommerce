// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package models

import (
	"context"
)

type Querier interface {
	// 返回最终结果：是否命中敏感词
	//
	//  WITH check_sensitive_word AS (
	//      -- 检查 content 是否包含敏感词
	//      SELECT EXISTS (SELECT 1
	//                     FROM admin.sensitive_words sw
	//                     WHERE $1::text ILIKE '%' || sw.word || '%'
	//                       AND sw.is_active = TRUE) AS has_sensitive_word),
	//       insert_comment AS (
	//           -- 如果没有检测到敏感词，则执行插入操作
	//           INSERT INTO comments.comments (id, product_id, merchant_id, user_id, score, content)
	//               SELECT $2::bigint, $3::uuid, $4::uuid, $5::uuid, $6, $1
	//               WHERE NOT (SELECT has_sensitive_word FROM check_sensitive_word)
	//               RETURNING id, product_id, merchant_id, user_id, score, content, created_at, updated_at)
	//  SELECT has_sensitive_word AS is_sensitive
	//  FROM check_sensitive_word
	CreateComment(ctx context.Context, arg CreateCommentParams) (bool, error)
	//DeleteComment
	//
	//  DELETE
	//  FROM comments.comments
	//  WHERE id = $1
	//    AND user_id = $2
	DeleteComment(ctx context.Context, arg DeleteCommentParams) error
	//DeleteSensitiveWord
	//
	//  DELETE
	//  FROM admin.sensitive_words
	//  WHERE id = $1
	//    AND created_by = $2::uuid
	DeleteSensitiveWord(ctx context.Context, arg DeleteSensitiveWordParams) error
	//GetCommentCount
	//
	//  SELECT COUNT(*)
	//  FROM comments.comments
	//  WHERE product_id = $1
	//    AND merchant_id = $2
	GetCommentCount(ctx context.Context, arg GetCommentCountParams) (int64, error)
	//GetCommentsByProduct
	//
	//  SELECT id, product_id, merchant_id, user_id, score, content, created_at, updated_at
	//  FROM comments.comments
	//  WHERE product_id = $1
	//    AND merchant_id = $2
	//  ORDER BY created_at DESC
	//  LIMIT $4 OFFSET $3
	GetCommentsByProduct(ctx context.Context, arg GetCommentsByProductParams) ([]CommentsComments, error)
	//GetSensitiveWordByID
	//
	//  SELECT id, created_by, category, word, level, is_active, created_at, updated_at
	//  FROM admin.sensitive_words
	//  WHERE id = $1
	GetSensitiveWordByID(ctx context.Context, id int32) (AdminSensitiveWords, error)
	//GetSensitiveWords
	//
	//  SELECT id, created_by, category, word, level, is_active, created_at, updated_at
	//  FROM admin.sensitive_words
	//  WHERE ($1::uuid IS NULL OR created_by = $1::uuid)
	//  ORDER BY created_at DESC
	//  LIMIT $3 OFFSET $2
	GetSensitiveWords(ctx context.Context, arg GetSensitiveWordsParams) ([]AdminSensitiveWords, error)
	//SetSensitiveWords
	//
	//  INSERT INTO admin.sensitive_words (created_by, category, word, level, is_active)
	//  VALUES ($1::uuid, $2, $3, $4, $5)
	//  ON CONFLICT (word) DO UPDATE
	//      SET category   = EXCLUDED.category,
	//          level     = EXCLUDED.level,
	//          is_active = EXCLUDED.is_active,
	//          updated_at = NOW()
	SetSensitiveWords(ctx context.Context, arg SetSensitiveWordsParams) (int64, error)
	//UpdateComment
	//
	//  UPDATE comments.comments
	//  SET score      = COALESCE($1, score),
	//      content    = COALESCE($2, content),
	//      updated_at = NOW()
	//  WHERE id = $3
	//    AND user_id = $4
	//  RETURNING id, product_id, merchant_id, user_id, score, content, created_at, updated_at
	UpdateComment(ctx context.Context, arg UpdateCommentParams) (CommentsComments, error)
}

var _ Querier = (*Queries)(nil)

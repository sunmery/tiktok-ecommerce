// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: inventory.sql

package models

import (
	"context"

	"github.com/google/uuid"
)

const CreateInventory = `-- name: CreateInventory :one
INSERT INTO products.inventory (product_id, merchant_id, stock)
VALUES ($1, $2, $3)
RETURNING product_id, merchant_id, stock, created_at, updated_at
`

type CreateInventoryParams struct {
	ProductID  uuid.UUID `json:"productID"`
	MerchantID uuid.UUID `json:"merchantID"`
	Stock      int32     `json:"stock"`
}

// CreateInventory
//
//	INSERT INTO products.inventory (product_id, merchant_id, stock)
//	VALUES ($1, $2, $3)
//	RETURNING product_id, merchant_id, stock, created_at, updated_at
func (q *Queries) CreateInventory(ctx context.Context, arg CreateInventoryParams) (ProductsInventory, error) {
	row := q.db.QueryRow(ctx, CreateInventory, arg.ProductID, arg.MerchantID, arg.Stock)
	var i ProductsInventory
	err := row.Scan(
		&i.ProductID,
		&i.MerchantID,
		&i.Stock,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetInventory = `-- name: GetInventory :one
SELECT stock
FROM products.inventory
WHERE product_id = $1
  AND merchant_id = $2
`

type GetInventoryParams struct {
	ProductID  uuid.UUID `json:"productID"`
	MerchantID uuid.UUID `json:"merchantID"`
}

// GetInventory
//
//	SELECT stock
//	FROM products.inventory
//	WHERE product_id = $1
//	  AND merchant_id = $2
func (q *Queries) GetInventory(ctx context.Context, arg GetInventoryParams) (int32, error) {
	row := q.db.QueryRow(ctx, GetInventory, arg.ProductID, arg.MerchantID)
	var stock int32
	err := row.Scan(&stock)
	return stock, err
}

const UpdateInventory = `-- name: UpdateInventory :one
UPDATE products.inventory
SET stock = stock + $1
WHERE product_id = $2
  AND merchant_id = $3
  AND stock + $1 >= 0 -- 防止负数库存
RETURNING product_id, merchant_id, stock, created_at, updated_at
`

type UpdateInventoryParams struct {
	Delta      int32     `json:"delta"`
	ProductID  uuid.UUID `json:"productID"`
	MerchantID uuid.UUID `json:"merchantID"`
}

// UpdateInventory
//
//	UPDATE products.inventory
//	SET stock = stock + $1
//	WHERE product_id = $2
//	  AND merchant_id = $3
//	  AND stock + $1 >= 0 -- 防止负数库存
//	RETURNING product_id, merchant_id, stock, created_at, updated_at
func (q *Queries) UpdateInventory(ctx context.Context, arg UpdateInventoryParams) (ProductsInventory, error) {
	row := q.db.QueryRow(ctx, UpdateInventory, arg.Delta, arg.ProductID, arg.MerchantID)
	var i ProductsInventory
	err := row.Scan(
		&i.ProductID,
		&i.MerchantID,
		&i.Stock,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package models

import (
	"context"
)

type Querier interface {
	// 创建审计日志
	//
	//  INSERT INTO products.inventory_history(change_reason, product_id, new_stock, old_stock, user_id)
	//  VALUES ($1, $2, $3, $4, $5)
	//  RETURNING id, product_id, old_stock, new_stock, change_reason, user_id, created_at
	CreateAuditLog(ctx context.Context, arg CreateAuditLogParams) (ProductsInventoryHistory, error)
	// 创建分类数据
	//
	//  INSERT INTO products.categories (name, parent_id)
	//  VALUES ($1, $2)
	//  RETURNING id, name, parent_id, is_active, created_at
	CreateCategories(ctx context.Context, arg CreateCategoriesParams) (ProductsCategories, error)
	// 创建商品
	//
	//  INSERT INTO products.products(name,
	//                                description,
	//                                picture,
	//                                price,
	//                                category_id,
	//                                total_stock)
	//  VALUES ($1, $2, $3, $4, $5, $6)
	//  RETURNING id, name, description, picture, price, category_id, total_stock, available_stock, reserved_stock, low_stock_threshold, allow_negative, created_at, updated_at, version
	CreateProduct(ctx context.Context, arg CreateProductParams) (ProductsProducts, error)
	// 关联商品与分类
	// 将商品1关联到分类2（Smartphones）
	//
	//  INSERT INTO products.product_categories (product_id, category_id)
	//  VALUES ($1, $2)
	//  RETURNING product_id, category_id
	CreateProductCategories(ctx context.Context, arg CreateProductCategoriesParams) (ProductsProductCategories, error)
	// 记录库存变更
	//
	//  INSERT INTO products.inventory_history (product_id,
	//                                          old_stock,
	//                                          new_stock,
	//                                          change_reason)
	//  VALUES ($1,
	//          (SELECT total_stock FROM products.products WHERE id = $1),
	//          (SELECT total_stock FROM products.products WHERE id = $1) - $2,
	//          'ORDER_RESERVED')
	//  RETURNING id, product_id, old_stock, new_stock, change_reason, user_id, created_at
	CreateProductInventoryHistory(ctx context.Context, arg CreateProductInventoryHistoryParams) (ProductsInventoryHistory, error)
	//DeleteProduct
	//
	//  DELETE FROM products.products
	//  WHERE id = $1
	//  RETURNING id, name, description, picture, price, category_id, total_stock, available_stock, reserved_stock, low_stock_threshold, allow_negative, created_at, updated_at, version
	DeleteProduct(ctx context.Context, id int32) (ProductsProducts, error)
	// 查询所有分类
	//
	//  SELECT id, name, parent_id, is_active, created_at
	//  FROM products.categories
	GetCategories(ctx context.Context) ([]ProductsCategories, error)
	//GetProduct
	//
	//  SELECT id, name, description, picture, price, category_id, total_stock, available_stock, reserved_stock, low_stock_threshold, allow_negative, created_at, updated_at, version
	//  FROM products.products
	//  WHERE id = $1
	//  LIMIT 1
	GetProduct(ctx context.Context, id int32) (ProductsProducts, error)
	// 查询某分类下的所有商品
	//
	//  SELECT p.id, p.name, p.description, p.picture, p.price, p.category_id, p.total_stock, p.available_stock, p.reserved_stock, p.low_stock_threshold, p.allow_negative, p.created_at, p.updated_at, p.version
	//  FROM products.products p
	//           JOIN products.product_categories pc ON p.id = pc.product_id
	//  WHERE pc.category_id = $1
	GetProductCategories(ctx context.Context, categoryID int32) ([]ProductsProducts, error)
	//ListProducts
	//
	//
	//  SELECT id, name, description, picture, price, category_id, total_stock, available_stock, reserved_stock, low_stock_threshold, allow_negative, created_at, updated_at, version
	//  FROM products.products
	//  WHERE ($1 = ANY(category_id))
	//  ORDER BY id
	//  OFFSET $2 LIMIT $3
	ListProducts(ctx context.Context, arg ListProductsParams) ([]ProductsProducts, error)
	//SearchProducts
	//
	//  SELECT id, name, description, picture, price, category_id, total_stock, available_stock, reserved_stock, low_stock_threshold, allow_negative, created_at, updated_at, version
	//  FROM products.products
	//  WHERE name ILIKE '%' || $1 || '%'
	SearchProducts(ctx context.Context, dollar_1 *string) ([]ProductsProducts, error)
	// 更新审计日志
	//
	//  INSERT INTO products.inventory_history (
	//      product_id,
	//      change_reason,
	//      new_stock,
	//      user_id,
	//      old_stock
	//  )
	//  VALUES (
	//      $1,  -- product_id
	//      $2,  -- change_reason
	//      $3,  -- new_stock
	//      $4, -- user_id
	//      (SELECT total_stock FROM products.products WHERE id = $1)  -- old_stock
	//  )
	//  RETURNING id, product_id, old_stock, new_stock, change_reason, user_id, created_at
	UpdateAuditLog(ctx context.Context, arg UpdateAuditLogParams) (ProductsInventoryHistory, error)
	//UpdateProduct
	//
	//  UPDATE products.products
	//  SET name = $1, description = $2, picture = $3, price = $4, category_Id = $5, total_stock = $6
	//  WHERE id = $7
	//  RETURNING id, name, description, picture, price, category_id, total_stock, available_stock, reserved_stock, low_stock_threshold, allow_negative, created_at, updated_at, version
	UpdateProduct(ctx context.Context, arg UpdateProductParams) (ProductsProducts, error)
	// 预留库存（下单时）
	//
	//  UPDATE products.products
	//  SET reserved_stock = reserved_stock + 2
	//  WHERE id = 1
	//  RETURNING id, name, description, picture, price, category_id, total_stock, available_stock, reserved_stock, low_stock_threshold, allow_negative, created_at, updated_at, version
	UpdateProductsReservedStock(ctx context.Context) (ProductsProducts, error)
}

var _ Querier = (*Queries)(nil)

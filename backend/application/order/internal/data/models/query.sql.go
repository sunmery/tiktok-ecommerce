// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package models

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const CreateOrder = `-- name: CreateOrder :one
INSERT INTO orders.orders (id,user_id, currency, street_address,
                           city, state, country, zip_code, email)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8,$9)
RETURNING id, user_id, currency, street_address, city, state, country, zip_code, email, created_at, updated_at, payment_status
`

type CreateOrderParams struct {
	ID            int64     `json:"id"`
	UserID        uuid.UUID `json:"userID"`
	Currency      string    `json:"currency"`
	StreetAddress string    `json:"streetAddress"`
	City          string    `json:"city"`
	State         string    `json:"state"`
	Country       string    `json:"country"`
	ZipCode       string    `json:"zipCode"`
	Email         string    `json:"email"`
}

// CreateOrder
//
//	INSERT INTO orders.orders (id,user_id, currency, street_address,
//	                           city, state, country, zip_code, email)
//	VALUES ($1, $2, $3, $4, $5, $6, $7, $8,$9)
//	RETURNING id, user_id, currency, street_address, city, state, country, zip_code, email, created_at, updated_at, payment_status
func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (OrdersOrders, error) {
	row := q.db.QueryRow(ctx, CreateOrder,
		arg.ID,
		arg.UserID,
		arg.Currency,
		arg.StreetAddress,
		arg.City,
		arg.State,
		arg.Country,
		arg.ZipCode,
		arg.Email,
	)
	var i OrdersOrders
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Currency,
		&i.StreetAddress,
		&i.City,
		&i.State,
		&i.Country,
		&i.ZipCode,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PaymentStatus,
	)
	return i, err
}

const CreateSubOrder = `-- name: CreateSubOrder :one
INSERT INTO orders.sub_orders (id, order_id, merchant_id, total_amount,
                               currency, status, items)
VALUES ($1, $2, $3, $4, $5, $6,$7)
RETURNING id, order_id, merchant_id, total_amount, currency, status, items, created_at, updated_at, payment_status
`

type CreateSubOrderParams struct {
	ID          int64          `json:"id"`
	OrderID     int64          `json:"orderID"`
	MerchantID  uuid.UUID      `json:"merchantID"`
	TotalAmount pgtype.Numeric `json:"totalAmount"`
	Currency    string         `json:"currency"`
	Status      string         `json:"status"`
	Items       []byte         `json:"items"`
}

// CreateSubOrder
//
//	INSERT INTO orders.sub_orders (id, order_id, merchant_id, total_amount,
//	                               currency, status, items)
//	VALUES ($1, $2, $3, $4, $5, $6,$7)
//	RETURNING id, order_id, merchant_id, total_amount, currency, status, items, created_at, updated_at, payment_status
func (q *Queries) CreateSubOrder(ctx context.Context, arg CreateSubOrderParams) (OrdersSubOrders, error) {
	row := q.db.QueryRow(ctx, CreateSubOrder,
		arg.ID,
		arg.OrderID,
		arg.MerchantID,
		arg.TotalAmount,
		arg.Currency,
		arg.Status,
		arg.Items,
	)
	var i OrdersSubOrders
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.MerchantID,
		&i.TotalAmount,
		&i.Currency,
		&i.Status,
		&i.Items,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PaymentStatus,
	)
	return i, err
}

const GetOrderByID = `-- name: GetOrderByID :one
SELECT id, user_id, currency, street_address, city, state, country, zip_code, email, created_at, updated_at, payment_status
FROM orders.orders
WHERE id = $1
`

// GetOrderByID
//
//	SELECT id, user_id, currency, street_address, city, state, country, zip_code, email, created_at, updated_at, payment_status
//	FROM orders.orders
//	WHERE id = $1
func (q *Queries) GetOrderByID(ctx context.Context, id int64) (OrdersOrders, error) {
	row := q.db.QueryRow(ctx, GetOrderByID, id)
	var i OrdersOrders
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Currency,
		&i.StreetAddress,
		&i.City,
		&i.State,
		&i.Country,
		&i.ZipCode,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PaymentStatus,
	)
	return i, err
}

const GetUserOrdersWithSuborders = `-- name: GetUserOrdersWithSuborders :many
SELECT o.id         AS order_id,
       o.currency   AS order_currency,
       o.street_address,
       o.city,
       o.state,
       o.country,
       o.zip_code,
       o.email,
       o.created_at AS order_created,
       jsonb_agg(
               jsonb_build_object(
                       'suborder_id', so.id,
                       'merchant_id', so.merchant_id,
                       'total_amount', so.total_amount,
                       'currency', so.currency,
                       'status', so.status,
                       'items', so.items,
                       'created_at', so.created_at,
                       'updated_at', so.updated_at
               ) ORDER BY so.created_at
       )            AS suborders
FROM orders.orders o
         LEFT JOIN orders.sub_orders so ON o.id = so.order_id
WHERE o.user_id = $1::uuid
GROUP BY o.id, o.currency, o.street_address, o.city, o.state, o.country, o.zip_code, o.email, o.created_at
ORDER BY o.created_at DESC
`

type GetUserOrdersWithSubordersRow struct {
	OrderID       int64     `json:"orderID"`
	OrderCurrency string    `json:"orderCurrency"`
	StreetAddress string    `json:"streetAddress"`
	City          string    `json:"city"`
	State         string    `json:"state"`
	Country       string    `json:"country"`
	ZipCode       string    `json:"zipCode"`
	Email         string    `json:"email"`
	OrderCreated  time.Time `json:"orderCreated"`
	Suborders     []byte    `json:"suborders"`
}

// GetUserOrdersWithSuborders
//
//	SELECT o.id         AS order_id,
//	       o.currency   AS order_currency,
//	       o.street_address,
//	       o.city,
//	       o.state,
//	       o.country,
//	       o.zip_code,
//	       o.email,
//	       o.created_at AS order_created,
//	       jsonb_agg(
//	               jsonb_build_object(
//	                       'suborder_id', so.id,
//	                       'merchant_id', so.merchant_id,
//	                       'total_amount', so.total_amount,
//	                       'currency', so.currency,
//	                       'status', so.status,
//	                       'items', so.items,
//	                       'created_at', so.created_at,
//	                       'updated_at', so.updated_at
//	               ) ORDER BY so.created_at
//	       )            AS suborders
//	FROM orders.orders o
//	         LEFT JOIN orders.sub_orders so ON o.id = so.order_id
//	WHERE o.user_id = $1::uuid
//	GROUP BY o.id, o.currency, o.street_address, o.city, o.state, o.country, o.zip_code, o.email, o.created_at
//	ORDER BY o.created_at DESC
func (q *Queries) GetUserOrdersWithSuborders(ctx context.Context, dollar_1 uuid.UUID) ([]GetUserOrdersWithSubordersRow, error) {
	rows, err := q.db.Query(ctx, GetUserOrdersWithSuborders, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserOrdersWithSubordersRow
	for rows.Next() {
		var i GetUserOrdersWithSubordersRow
		if err := rows.Scan(
			&i.OrderID,
			&i.OrderCurrency,
			&i.StreetAddress,
			&i.City,
			&i.State,
			&i.Country,
			&i.ZipCode,
			&i.Email,
			&i.OrderCreated,
			&i.Suborders,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListOrdersByUser = `-- name: ListOrdersByUser :many
SELECT id, user_id, currency, street_address, city, state, country, zip_code, email, created_at, updated_at, payment_status
FROM orders.orders
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListOrdersByUserParams struct {
	UserID uuid.UUID `json:"userID"`
	Limit  int64     `json:"limit"`
	Offset int64     `json:"offset"`
}

// ListOrdersByUser
//
//	SELECT id, user_id, currency, street_address, city, state, country, zip_code, email, created_at, updated_at, payment_status
//	FROM orders.orders
//	WHERE user_id = $1
//	ORDER BY created_at DESC
//	LIMIT $2 OFFSET $3
func (q *Queries) ListOrdersByUser(ctx context.Context, arg ListOrdersByUserParams) ([]OrdersOrders, error) {
	rows, err := q.db.Query(ctx, ListOrdersByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrdersOrders
	for rows.Next() {
		var i OrdersOrders
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Currency,
			&i.StreetAddress,
			&i.City,
			&i.State,
			&i.Country,
			&i.ZipCode,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PaymentStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const MarkOrderAsPaid = `-- name: MarkOrderAsPaid :one
UPDATE orders.orders
SET payment_status = $1,
    updated_at     = now()
WHERE id = $2
RETURNING id, user_id, currency, street_address, city, state, country, zip_code, email, created_at, updated_at, payment_status
`

type MarkOrderAsPaidParams struct {
	PaymentStatus string `json:"paymentStatus"`
	ID            int64  `json:"id"`
}

// MarkOrderAsPaid
//
//	UPDATE orders.orders
//	SET payment_status = $1,
//	    updated_at     = now()
//	WHERE id = $2
//	RETURNING id, user_id, currency, street_address, city, state, country, zip_code, email, created_at, updated_at, payment_status
func (q *Queries) MarkOrderAsPaid(ctx context.Context, arg MarkOrderAsPaidParams) (OrdersOrders, error) {
	row := q.db.QueryRow(ctx, MarkOrderAsPaid, arg.PaymentStatus, arg.ID)
	var i OrdersOrders
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Currency,
		&i.StreetAddress,
		&i.City,
		&i.State,
		&i.Country,
		&i.ZipCode,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PaymentStatus,
	)
	return i, err
}

const MarkSubOrderAsPaid = `-- name: MarkSubOrderAsPaid :one
UPDATE orders.sub_orders
SET payment_status = $1,
    updated_at     = now()
WHERE order_id = $2
RETURNING id, order_id, merchant_id, total_amount, currency, status, items, created_at, updated_at, payment_status
`

type MarkSubOrderAsPaidParams struct {
	PaymentStatus string `json:"paymentStatus"`
	OrderID       int64  `json:"orderID"`
}

// MarkSubOrderAsPaid
//
//	UPDATE orders.sub_orders
//	SET payment_status = $1,
//	    updated_at     = now()
//	WHERE order_id = $2
//	RETURNING id, order_id, merchant_id, total_amount, currency, status, items, created_at, updated_at, payment_status
func (q *Queries) MarkSubOrderAsPaid(ctx context.Context, arg MarkSubOrderAsPaidParams) (OrdersSubOrders, error) {
	row := q.db.QueryRow(ctx, MarkSubOrderAsPaid, arg.PaymentStatus, arg.OrderID)
	var i OrdersSubOrders
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.MerchantID,
		&i.TotalAmount,
		&i.Currency,
		&i.Status,
		&i.Items,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PaymentStatus,
	)
	return i, err
}

const QuerySubOrders = `-- name: QuerySubOrders :many
SELECT id,
       merchant_id,
       total_amount,
       currency,
       status,
       items,
       created_at,
       updated_at
FROM orders.sub_orders
WHERE order_id = $1
ORDER BY created_at
`

type QuerySubOrdersRow struct {
	ID          int64          `json:"id"`
	MerchantID  uuid.UUID      `json:"merchantID"`
	TotalAmount pgtype.Numeric `json:"totalAmount"`
	Currency    string         `json:"currency"`
	Status      string         `json:"status"`
	Items       []byte         `json:"items"`
	CreatedAt   time.Time      `json:"createdAt"`
	UpdatedAt   time.Time      `json:"updatedAt"`
}

// QuerySubOrders
//
//	SELECT id,
//	       merchant_id,
//	       total_amount,
//	       currency,
//	       status,
//	       items,
//	       created_at,
//	       updated_at
//	FROM orders.sub_orders
//	WHERE order_id = $1
//	ORDER BY created_at
func (q *Queries) QuerySubOrders(ctx context.Context, orderID int64) ([]QuerySubOrdersRow, error) {
	rows, err := q.db.Query(ctx, QuerySubOrders, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []QuerySubOrdersRow
	for rows.Next() {
		var i QuerySubOrdersRow
		if err := rows.Scan(
			&i.ID,
			&i.MerchantID,
			&i.TotalAmount,
			&i.Currency,
			&i.Status,
			&i.Items,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateOrderPaymentStatus = `-- name: UpdateOrderPaymentStatus :exec
UPDATE orders.orders
SET payment_status = $2,
    updated_at = now()
WHERE id = $1
`

type UpdateOrderPaymentStatusParams struct {
	ID            int64  `json:"id"`
	PaymentStatus string `json:"paymentStatus"`
}

// UpdateOrderPaymentStatus
//
//	UPDATE orders.orders
//	SET payment_status = $2,
//	    updated_at = now()
//	WHERE id = $1
func (q *Queries) UpdateOrderPaymentStatus(ctx context.Context, arg UpdateOrderPaymentStatusParams) error {
	_, err := q.db.Exec(ctx, UpdateOrderPaymentStatus, arg.ID, arg.PaymentStatus)
	return err
}

const UpdatePaymentStatus = `-- name: UpdatePaymentStatus :one
SELECT id, user_id, payment_status
FROM orders.orders
WHERE id = $1
    FOR UPDATE
`

type UpdatePaymentStatusRow struct {
	ID            int64     `json:"id"`
	UserID        uuid.UUID `json:"userID"`
	PaymentStatus string    `json:"paymentStatus"`
}

// UpdatePaymentStatus
//
//	SELECT id, user_id, payment_status
//	FROM orders.orders
//	WHERE id = $1
//	    FOR UPDATE
func (q *Queries) UpdatePaymentStatus(ctx context.Context, id int64) (UpdatePaymentStatusRow, error) {
	row := q.db.QueryRow(ctx, UpdatePaymentStatus, id)
	var i UpdatePaymentStatusRow
	err := row.Scan(&i.ID, &i.UserID, &i.PaymentStatus)
	return i, err
}

const UpdateSubOrderStatus = `-- name: UpdateSubOrderStatus :exec
UPDATE orders.sub_orders
SET status     = $2,
    updated_at = $3
WHERE id = $1
`

type UpdateSubOrderStatusParams struct {
	ID        int64              `json:"id"`
	Status    string             `json:"status"`
	UpdatedAt pgtype.Timestamptz `json:"updatedAt"`
}

// UpdateSubOrderStatus
//
//	UPDATE orders.sub_orders
//	SET status     = $2,
//	    updated_at = $3
//	WHERE id = $1
func (q *Queries) UpdateSubOrderStatus(ctx context.Context, arg UpdateSubOrderStatusParams) error {
	_, err := q.db.Exec(ctx, UpdateSubOrderStatus, arg.ID, arg.Status, arg.UpdatedAt)
	return err
}

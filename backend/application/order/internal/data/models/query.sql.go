// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package models

import (
	"context"

	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const CreateOrder = `-- name: CreateOrder :one
INSERT INTO orders.orders (id, user_id, currency, street_address,
                           city, state, country, zip_code, email,
                           created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING id, user_id, currency, street_address, city, state, country, zip_code, email, created_at, updated_at
`

type CreateOrderParams struct {
	ID            string    `json:"id"`
	UserID        uuid.UUID `json:"userID"`
	Currency      string    `json:"currency"`
	StreetAddress string    `json:"streetAddress"`
	City          string    `json:"city"`
	State         string    `json:"state"`
	Country       string    `json:"country"`
	ZipCode       int32     `json:"zipCode"`
	Email         string    `json:"email"`
	CreatedAt     int64     `json:"createdAt"`
	UpdatedAt     int64     `json:"updatedAt"`
}

// CreateOrder
//
//	INSERT INTO orders.orders (id, user_id, currency, street_address,
//	                           city, state, country, zip_code, email,
//	                           created_at, updated_at)
//	VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
//	RETURNING id, user_id, currency, street_address, city, state, country, zip_code, email, created_at, updated_at
func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (OrdersOrders, error) {
	row := q.db.QueryRow(ctx, CreateOrder,
		arg.ID,
		arg.UserID,
		arg.Currency,
		arg.StreetAddress,
		arg.City,
		arg.State,
		arg.Country,
		arg.ZipCode,
		arg.Email,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i OrdersOrders
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Currency,
		&i.StreetAddress,
		&i.City,
		&i.State,
		&i.Country,
		&i.ZipCode,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const CreateSubOrder = `-- name: CreateSubOrder :one
INSERT INTO orders.sub_orders (id, order_id, merchant_id, total_amount,
                               currency, status, items, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, order_id, merchant_id, total_amount, currency, status, items, created_at, updated_at
`

type CreateSubOrderParams struct {
	ID          string          `json:"id"`
	OrderID     string          `json:"orderID"`
	MerchantID  int32           `json:"merchantID"`
	TotalAmount decimal.Decimal `json:"totalAmount"`
	Currency    string          `json:"currency"`
	Status      string          `json:"status"`
	Items       []byte          `json:"items"`
	CreatedAt   int64           `json:"createdAt"`
	UpdatedAt   int64           `json:"updatedAt"`
}

// CreateSubOrder
//
//	INSERT INTO orders.sub_orders (id, order_id, merchant_id, total_amount,
//	                               currency, status, items, created_at, updated_at)
//	VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
//	RETURNING id, order_id, merchant_id, total_amount, currency, status, items, created_at, updated_at
func (q *Queries) CreateSubOrder(ctx context.Context, arg CreateSubOrderParams) (OrdersSubOrders, error) {
	row := q.db.QueryRow(ctx, CreateSubOrder,
		arg.ID,
		arg.OrderID,
		arg.MerchantID,
		arg.TotalAmount,
		arg.Currency,
		arg.Status,
		arg.Items,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i OrdersSubOrders
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.MerchantID,
		&i.TotalAmount,
		&i.Currency,
		&i.Status,
		&i.Items,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetOrderByID = `-- name: GetOrderByID :one
SELECT id, user_id, currency, street_address, city, state, country, zip_code, email, created_at, updated_at
FROM orders.orders
WHERE id = $1
`

// GetOrderByID
//
//	SELECT id, user_id, currency, street_address, city, state, country, zip_code, email, created_at, updated_at
//	FROM orders.orders
//	WHERE id = $1
func (q *Queries) GetOrderByID(ctx context.Context, id string) (OrdersOrders, error) {
	row := q.db.QueryRow(ctx, GetOrderByID, id)
	var i OrdersOrders
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Currency,
		&i.StreetAddress,
		&i.City,
		&i.State,
		&i.Country,
		&i.ZipCode,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ListOrdersByUser = `-- name: ListOrdersByUser :many
SELECT id, user_id, currency, street_address, city, state, country, zip_code, email, created_at, updated_at
FROM orders.orders
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListOrdersByUserParams struct {
	UserID uuid.UUID `json:"userID"`
	Limit  int64     `json:"limit"`
	Offset int64     `json:"offset"`
}

// ListOrdersByUser
//
//	SELECT id, user_id, currency, street_address, city, state, country, zip_code, email, created_at, updated_at
//	FROM orders.orders
//	WHERE user_id = $1
//	ORDER BY created_at DESC
//	LIMIT $2 OFFSET $3
func (q *Queries) ListOrdersByUser(ctx context.Context, arg ListOrdersByUserParams) ([]OrdersOrders, error) {
	rows, err := q.db.Query(ctx, ListOrdersByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrdersOrders
	for rows.Next() {
		var i OrdersOrders
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Currency,
			&i.StreetAddress,
			&i.City,
			&i.State,
			&i.Country,
			&i.ZipCode,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateSubOrderStatus = `-- name: UpdateSubOrderStatus :exec
UPDATE orders.sub_orders
SET status     = $2,
    updated_at = $3
WHERE id = $1
`

type UpdateSubOrderStatusParams struct {
	ID        string `json:"id"`
	Status    string `json:"status"`
	UpdatedAt int64  `json:"updatedAt"`
}

// UpdateSubOrderStatus
//
//	UPDATE orders.sub_orders
//	SET status     = $2,
//	    updated_at = $3
//	WHERE id = $1
func (q *Queries) UpdateSubOrderStatus(ctx context.Context, arg UpdateSubOrderStatusParams) error {
	_, err := q.db.Exec(ctx, UpdateSubOrderStatus, arg.ID, arg.Status, arg.UpdatedAt)
	return err
}

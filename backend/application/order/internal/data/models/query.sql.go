// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package models

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const CreateOrder = `-- name: CreateOrder :one
INSERT INTO orders.orders ( user_id, currency, street_address,
                           city, state, country, zip_code, email)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, user_id, currency, street_address, city, state, country, zip_code, email, created_at, updated_at
`

type CreateOrderParams struct {
	UserID        uuid.UUID `json:"userID"`
	Currency      string    `json:"currency"`
	StreetAddress string    `json:"streetAddress"`
	City          string    `json:"city"`
	State         string    `json:"state"`
	Country       string    `json:"country"`
	ZipCode       string    `json:"zipCode"`
	Email         string    `json:"email"`
}

// CreateOrder
//
//	INSERT INTO orders.orders ( user_id, currency, street_address,
//	                           city, state, country, zip_code, email)
//	VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
//	RETURNING id, user_id, currency, street_address, city, state, country, zip_code, email, created_at, updated_at
func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (OrdersOrders, error) {
	row := q.db.QueryRow(ctx, CreateOrder,
		arg.UserID,
		arg.Currency,
		arg.StreetAddress,
		arg.City,
		arg.State,
		arg.Country,
		arg.ZipCode,
		arg.Email,
	)
	var i OrdersOrders
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Currency,
		&i.StreetAddress,
		&i.City,
		&i.State,
		&i.Country,
		&i.ZipCode,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const CreateSubOrder = `-- name: CreateSubOrder :one
INSERT INTO orders.sub_orders (order_id, merchant_id, total_amount,
                               currency, status, items)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, order_id, merchant_id, total_amount, currency, status, items, created_at, updated_at
`

type CreateSubOrderParams struct {
	OrderID     uuid.UUID      `json:"orderID"`
	MerchantID  uuid.UUID      `json:"merchantID"`
	TotalAmount pgtype.Numeric `json:"totalAmount"`
	Currency    string         `json:"currency"`
	Status      string         `json:"status"`
	Items       []byte         `json:"items"`
}

// CreateSubOrder
//
//	INSERT INTO orders.sub_orders (order_id, merchant_id, total_amount,
//	                               currency, status, items)
//	VALUES ($1, $2, $3, $4, $5, $6)
//	RETURNING id, order_id, merchant_id, total_amount, currency, status, items, created_at, updated_at
func (q *Queries) CreateSubOrder(ctx context.Context, arg CreateSubOrderParams) (OrdersSubOrders, error) {
	row := q.db.QueryRow(ctx, CreateSubOrder,
		arg.OrderID,
		arg.MerchantID,
		arg.TotalAmount,
		arg.Currency,
		arg.Status,
		arg.Items,
	)
	var i OrdersSubOrders
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.MerchantID,
		&i.TotalAmount,
		&i.Currency,
		&i.Status,
		&i.Items,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetDateRangeStats = `-- name: GetDateRangeStats :one

SELECT get_date_range_stats
FROM orders.get_date_range_stats(
        p_user_id => $1,
        p_start => $2,
        p_end => $3
     )
`

type GetDateRangeStatsParams struct {
	PUserID uuid.UUID          `json:"pUserID"`
	PStart  pgtype.Timestamptz `json:"pStart"`
	PEnd    pgtype.Timestamptz `json:"pEnd"`
}

// -- name: ListOrdersByUser :many
// SELECT *
// FROM orders.orders
// WHERE user_id = $1
// ORDER BY created_at DESC
// LIMIT $2 OFFSET $3;
//
//	SELECT get_date_range_stats
//	FROM orders.get_date_range_stats(
//	        p_user_id => $1,
//	        p_start => $2,
//	        p_end => $3
//	     )
func (q *Queries) GetDateRangeStats(ctx context.Context, arg GetDateRangeStatsParams) (interface{}, error) {
	row := q.db.QueryRow(ctx, GetDateRangeStats, arg.PUserID, arg.PStart, arg.PEnd)
	var get_date_range_stats interface{}
	err := row.Scan(&get_date_range_stats)
	return get_date_range_stats, err
}

const GetOrderByID = `-- name: GetOrderByID :one
SELECT id, user_id, currency, street_address, city, state, country, zip_code, email, created_at, updated_at
FROM orders.orders
WHERE id = $1
`

// GetOrderByID
//
//	SELECT id, user_id, currency, street_address, city, state, country, zip_code, email, created_at, updated_at
//	FROM orders.orders
//	WHERE id = $1
func (q *Queries) GetOrderByID(ctx context.Context, id uuid.UUID) (OrdersOrders, error) {
	row := q.db.QueryRow(ctx, GetOrderByID, id)
	var i OrdersOrders
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Currency,
		&i.StreetAddress,
		&i.City,
		&i.State,
		&i.Country,
		&i.ZipCode,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ListOrdersByUserWithDate = `-- name: ListOrdersByUserWithDate :many
SELECT o.id, o.user_id, o.currency, o.street_address, o.city, o.state, o.country, o.zip_code, o.email, o.created_at, o.updated_at,
       json_agg(so.*) AS sub_orders
FROM orders.orders o
         LEFT JOIN orders.sub_orders so ON o.id = so.order_id
WHERE o.user_id = $1::uuid
  AND o.created_at BETWEEN $2::timestamptz AND $3::timestamptz
GROUP BY o.id
ORDER BY o.created_at DESC
LIMIT $5 OFFSET $4
`

type ListOrdersByUserWithDateParams struct {
	UserID    uuid.UUID `json:"userID"`
	StartTime time.Time `json:"startTime"`
	EndTime   time.Time `json:"endTime"`
	Offsets   int64     `json:"offsets"`
	Limits    int64     `json:"limits"`
}

type ListOrdersByUserWithDateRow struct {
	ID            uuid.UUID `json:"id"`
	UserID        uuid.UUID `json:"userID"`
	Currency      string    `json:"currency"`
	StreetAddress string    `json:"streetAddress"`
	City          string    `json:"city"`
	State         string    `json:"state"`
	Country       string    `json:"country"`
	ZipCode       string    `json:"zipCode"`
	Email         string    `json:"email"`
	CreatedAt     time.Time `json:"createdAt"`
	UpdatedAt     time.Time `json:"updatedAt"`
	SubOrders     []byte    `json:"subOrders"`
}

// 带日期过滤的查询
//
//	SELECT o.id, o.user_id, o.currency, o.street_address, o.city, o.state, o.country, o.zip_code, o.email, o.created_at, o.updated_at,
//	       json_agg(so.*) AS sub_orders
//	FROM orders.orders o
//	         LEFT JOIN orders.sub_orders so ON o.id = so.order_id
//	WHERE o.user_id = $1::uuid
//	  AND o.created_at BETWEEN $2::timestamptz AND $3::timestamptz
//	GROUP BY o.id
//	ORDER BY o.created_at DESC
//	LIMIT $5 OFFSET $4
func (q *Queries) ListOrdersByUserWithDate(ctx context.Context, arg ListOrdersByUserWithDateParams) ([]ListOrdersByUserWithDateRow, error) {
	rows, err := q.db.Query(ctx, ListOrdersByUserWithDate,
		arg.UserID,
		arg.StartTime,
		arg.EndTime,
		arg.Offsets,
		arg.Limits,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListOrdersByUserWithDateRow
	for rows.Next() {
		var i ListOrdersByUserWithDateRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Currency,
			&i.StreetAddress,
			&i.City,
			&i.State,
			&i.Country,
			&i.ZipCode,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SubOrders,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateSubOrderStatus = `-- name: UpdateSubOrderStatus :exec
UPDATE orders.sub_orders
SET status     = $2,
    updated_at = $3
WHERE id = $1
`

type UpdateSubOrderStatusParams struct {
	ID        uuid.UUID          `json:"id"`
	Status    string             `json:"status"`
	UpdatedAt pgtype.Timestamptz `json:"updatedAt"`
}

// UpdateSubOrderStatus
//
//	UPDATE orders.sub_orders
//	SET status     = $2,
//	    updated_at = $3
//	WHERE id = $1
func (q *Queries) UpdateSubOrderStatus(ctx context.Context, arg UpdateSubOrderStatusParams) error {
	_, err := q.db.Exec(ctx, UpdateSubOrderStatus, arg.ID, arg.Status, arg.UpdatedAt)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package models

import (
	"context"

	"github.com/google/uuid"
)

const MarkOrderAsPaid = `-- name: MarkOrderAsPaid :one
UPDATE orders.orders
SET payment_status = $1,
    updated_at     = now()
WHERE id = $2
RETURNING id, user_id, currency, street_address, city, state, country, zip_code, email, payment_status, created_at, updated_at
`

type MarkOrderAsPaidParams struct {
	PaymentStatus string `json:"paymentStatus"`
	ID            int64  `json:"id"`
}

// MarkOrderAsPaid
//
//	UPDATE orders.orders
//	SET payment_status = $1,
//	    updated_at     = now()
//	WHERE id = $2
//	RETURNING id, user_id, currency, street_address, city, state, country, zip_code, email, payment_status, created_at, updated_at
func (q *Queries) MarkOrderAsPaid(ctx context.Context, arg MarkOrderAsPaidParams) (OrdersOrders, error) {
	row := q.db.QueryRow(ctx, MarkOrderAsPaid, arg.PaymentStatus, arg.ID)
	var i OrdersOrders
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Currency,
		&i.StreetAddress,
		&i.City,
		&i.State,
		&i.Country,
		&i.ZipCode,
		&i.Email,
		&i.PaymentStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const MarkSubOrderAsPaid = `-- name: MarkSubOrderAsPaid :one
UPDATE orders.sub_orders
SET status     = $1,
    updated_at = now()
WHERE order_id = $2
RETURNING id, order_id, merchant_id, total_amount, currency, status, items, shipping_status, created_at, updated_at
`

type MarkSubOrderAsPaidParams struct {
	Status  string `json:"status"`
	OrderID int64  `json:"orderID"`
}

// MarkSubOrderAsPaid
//
//	UPDATE orders.sub_orders
//	SET status     = $1,
//	    updated_at = now()
//	WHERE order_id = $2
//	RETURNING id, order_id, merchant_id, total_amount, currency, status, items, shipping_status, created_at, updated_at
func (q *Queries) MarkSubOrderAsPaid(ctx context.Context, arg MarkSubOrderAsPaidParams) (OrdersSubOrders, error) {
	row := q.db.QueryRow(ctx, MarkSubOrderAsPaid, arg.Status, arg.OrderID)
	var i OrdersSubOrders
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.MerchantID,
		&i.TotalAmount,
		&i.Currency,
		&i.Status,
		&i.Items,
		&i.ShippingStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpdatePaymentStatus = `-- name: UpdatePaymentStatus :one
SELECT id, user_id, payment_status
FROM orders.orders
WHERE id = $1
    FOR UPDATE
`

type UpdatePaymentStatusRow struct {
	ID            int64     `json:"id"`
	UserID        uuid.UUID `json:"userID"`
	PaymentStatus string    `json:"paymentStatus"`
}

// UpdatePaymentStatus
//
//	SELECT id, user_id, payment_status
//	FROM orders.orders
//	WHERE id = $1
//	    FOR UPDATE
func (q *Queries) UpdatePaymentStatus(ctx context.Context, id int64) (UpdatePaymentStatusRow, error) {
	row := q.db.QueryRow(ctx, UpdatePaymentStatus, id)
	var i UpdatePaymentStatusRow
	err := row.Scan(&i.ID, &i.UserID, &i.PaymentStatus)
	return i, err
}

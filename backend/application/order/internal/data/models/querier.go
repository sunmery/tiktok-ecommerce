// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package models

import (
	"context"

	"github.com/google/uuid"
)

type Querier interface {
	//CreateOrder
	//
	//  INSERT INTO orders.orders (id, user_id, currency, street_address,
	//                             city, state, country, zip_code, email)
	//  VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
	//  RETURNING id, user_id, currency, street_address, city, state, country, zip_code, email, payment_status, created_at, updated_at
	CreateOrder(ctx context.Context, arg CreateOrderParams) (OrdersOrders, error)
	//CreateOrderShipping
	//
	//  INSERT INTO orders.shipping_info(id, merchant_id, sub_order_id, shipping_status, tracking_number, carrier, delivery,
	//                                   shipping_address, receiver_address, shipping_fee)
	//  VALUES ($1, $2, $3, $4, $5, $6, $7,
	//          $8, $9, $10)
	CreateOrderShipping(ctx context.Context, arg CreateOrderShippingParams) error
	//CreateSubOrder
	//
	//  INSERT INTO orders.sub_orders (id, order_id, merchant_id, total_amount,
	//                                 currency, status, items)
	//  VALUES ($1, $2, $3, $4, $5, $6, $7)
	//  RETURNING id, order_id, merchant_id, total_amount, currency, status, items, shipping_status, created_at, updated_at
	CreateSubOrder(ctx context.Context, arg CreateSubOrderParams) (OrdersSubOrders, error)
	//GetConsumerOrders
	//
	//  SELECT oo.id AS order_id,
	//         os.id AS sub_order_id,
	//         os.total_amount,
	//         os.currency,
	//         os.status AS payment_status,
	//         os.shipping_status,
	//         os.items,
	//         oo.email,
	//         oo.street_address,
	//         oo.city,
	//         oo.state,
	//         oo.country,
	//         oo.zip_code,
	//         os.created_at,
	//         os.updated_at
	//  FROM orders.orders oo
	//           LEFT JOIN orders.sub_orders os
	//                     ON oo.id = os.order_id
	//  WHERE oo.user_id = $1
	//  GROUP BY oo.id, os.id, os.total_amount, os.currency, os.status, os.shipping_status, os.items, oo.email
	//  LIMIT $3 OFFSET $2
	GetConsumerOrders(ctx context.Context, arg GetConsumerOrdersParams) ([]GetConsumerOrdersRow, error)
	//GetOrderByID
	//
	//  SELECT o.id, o.user_id, o.currency, o.street_address, o.city, o.state, o.country, o.zip_code, o.email, o.payment_status, o.created_at, o.updated_at,
	//         json_agg(
	//                 json_build_object(
	//                         'id', os.id,
	//                         'merchant_id', os.merchant_id,
	//                         'total_amount', os.total_amount,
	//                         'currency', os.currency,
	//                         'status', os.status,
	//                         'shipping_status', os.shipping_status,
	//                         'items', os.items,
	//                         'created_at', os.created_at,
	//                         'updated_at', os.updated_at
	//                 )
	//         ) AS sub_orders
	//  FROM orders.orders o
	//           LEFT JOIN orders.sub_orders os ON o.id = os.order_id
	//  WHERE o.user_id = $1
	//    AND o.id = $2
	//  GROUP BY o.id
	GetOrderByID(ctx context.Context, arg GetOrderByIDParams) (GetOrderByIDRow, error)
	//GetOrderByUserID
	//
	//  SELECT os.id,
	//         os.order_id,
	//         os.merchant_id,
	//         os.total_amount,
	//         os.currency,
	//         os.status,
	//         os.items,
	//         os.created_at,
	//         os.updated_at,
	//         oo.payment_status,
	//         os.shipping_status
	//  FROM orders.sub_orders os
	//           JOIN orders.orders oo
	//                ON os.order_id = oo.id
	//  WHERE user_id = $1
	GetOrderByUserID(ctx context.Context, userID uuid.UUID) (GetOrderByUserIDRow, error)
	//GetShipOrderStatus
	//
	//  SELECT id,
	//         sub_order_id,
	//         tracking_number,
	//         carrier,
	//         shipping_status,
	//         delivery,
	//         shipping_address,
	//         receiver_address,
	//         shipping_fee,
	//         created_at,
	//         updated_at
	//  FROM orders.shipping_info
	//  WHERE sub_order_id = $1
	GetShipOrderStatus(ctx context.Context, id int64) (GetShipOrderStatusRow, error)
	//GetSubOrderByID
	//
	//  SELECT o.id, o.user_id, o.currency, o.street_address, o.city, o.state, o.country, o.zip_code, o.email, o.payment_status, o.created_at, o.updated_at,
	//         json_agg(
	//                 json_build_object(
	//                         'id', os.id,
	//                         'merchant_id', os.merchant_id,
	//                         'total_amount', os.total_amount,
	//                         'currency', os.currency,
	//                         'status', os.status,
	//                         'shipping_status', os.shipping_status,
	//                         'items', os.items,
	//                         'created_at', os.created_at,
	//                         'updated_at', os.updated_at
	//                 )
	//         ) AS sub_orders
	//  FROM orders.orders o
	//           LEFT JOIN orders.sub_orders os ON o.id = os.order_id
	//  WHERE o.user_id = $1
	//    AND os.id = $2
	//  GROUP BY o.id
	GetSubOrderByID(ctx context.Context, arg GetSubOrderByIDParams) (GetSubOrderByIDRow, error)
	//GetUserOrdersWithSuborders
	//
	//  SELECT o.id,
	//         o.street_address,
	//         o.city,
	//         o.state,
	//         o.country,
	//         o.zip_code,
	//         o.email,
	//         o.payment_status,
	//         os.shipping_status,
	//         os.merchant_id,
	//         os.id AS sub_order_id,
	//         os.total_amount,
	//         os.currency,
	//         os.items,
	//         o.created_at,
	//         o.updated_at
	//  FROM orders.orders o
	//           LEFT JOIN orders.sub_orders os ON o.id = os.order_id
	//  WHERE o.user_id = $1
	//    AND o.id = $2
	//  GROUP BY o.id, os.id, o.currency, os.merchant_id, o.street_address, o.city, o.state, o.country, o.zip_code, o.email,
	//           o.created_at,
	//           os.shipping_status
	//  ORDER BY o.created_at DESC
	GetUserOrdersWithSuborders(ctx context.Context, arg GetUserOrdersWithSubordersParams) ([]GetUserOrdersWithSubordersRow, error)
	//MarkOrderAsPaid
	//
	//  UPDATE orders.orders
	//  SET payment_status = $1,
	//      updated_at     = now()
	//  WHERE id = $2
	//  RETURNING id, user_id, currency, street_address, city, state, country, zip_code, email, payment_status, created_at, updated_at
	MarkOrderAsPaid(ctx context.Context, arg MarkOrderAsPaidParams) (OrdersOrders, error)
	//MarkSubOrderAsPaid
	//
	//  UPDATE orders.sub_orders
	//  SET status     = $1,
	//      updated_at = now()
	//  WHERE order_id = $2
	//  RETURNING id, order_id, merchant_id, total_amount, currency, status, items, shipping_status, created_at, updated_at
	MarkSubOrderAsPaid(ctx context.Context, arg MarkSubOrderAsPaidParams) (OrdersSubOrders, error)
	//QuerySubOrders
	//
	//  SELECT os.id,
	//         os.order_id,
	//         os.merchant_id,
	//         os.total_amount,
	//         os.currency,
	//         os.status,
	//         os.items,
	//         os.created_at,
	//         os.updated_at,
	//         oo.payment_status,
	//         os.shipping_status
	//  FROM orders.sub_orders os
	//           Join orders.orders oo on os.order_id = oo.id
	//  WHERE order_id = $1
	//  ORDER BY created_at
	QuerySubOrders(ctx context.Context, orderID int64) ([]QuerySubOrdersRow, error)
	//UpdateOrderShippingStatus
	//
	//  WITH update_shipinfo_status AS (
	//      UPDATE orders.shipping_info
	//          SET shipping_status = $1
	//          WHERE sub_order_id = $2)
	//  UPDATE orders.sub_orders
	//  SET shipping_status = $1
	//  WHERE id = $2
	UpdateOrderShippingStatus(ctx context.Context, arg UpdateOrderShippingStatusParams) error
	// -- name: UpdateSubOrderStatus :exec
	// UPDATE orders.sub_orders
	// SET status     = @status,
	//     updated_at = NOW()
	// WHERE id = @id;
	//
	//
	//  SELECT id, user_id, payment_status
	//  FROM orders.orders
	//  WHERE id = $1
	//      FOR UPDATE
	UpdatePaymentStatus(ctx context.Context, id int64) (UpdatePaymentStatusRow, error)
}

var _ Querier = (*Queries)(nil)

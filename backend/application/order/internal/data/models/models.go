// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package models

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type OrdersPaymentStatus string

const (
	OrdersPaymentStatusPENDING   OrdersPaymentStatus = "PENDING"
	OrdersPaymentStatusPAID      OrdersPaymentStatus = "PAID"
	OrdersPaymentStatusCANCELLED OrdersPaymentStatus = "CANCELLED"
	OrdersPaymentStatusFAILED    OrdersPaymentStatus = "FAILED"
)

func (e *OrdersPaymentStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrdersPaymentStatus(s)
	case string:
		*e = OrdersPaymentStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OrdersPaymentStatus: %T", src)
	}
	return nil
}

type NullOrdersPaymentStatus struct {
	OrdersPaymentStatus OrdersPaymentStatus `json:"ordersPaymentStatus"`
	Valid               bool                `json:"valid"` // Valid is true if OrdersPaymentStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrdersPaymentStatus) Scan(value interface{}) error {
	if value == nil {
		ns.OrdersPaymentStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrdersPaymentStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrdersPaymentStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrdersPaymentStatus), nil
}

func (e OrdersPaymentStatus) Valid() bool {
	switch e {
	case OrdersPaymentStatusPENDING,
		OrdersPaymentStatusPAID,
		OrdersPaymentStatusCANCELLED,
		OrdersPaymentStatusFAILED:
		return true
	}
	return false
}

func AllOrdersPaymentStatusValues() []OrdersPaymentStatus {
	return []OrdersPaymentStatus{
		OrdersPaymentStatusPENDING,
		OrdersPaymentStatusPAID,
		OrdersPaymentStatusCANCELLED,
		OrdersPaymentStatusFAILED,
	}
}

type OrdersShippingStatus string

const (
	OrdersShippingStatusWAITCOMMAND     OrdersShippingStatus = "WAIT_COMMAND"
	OrdersShippingStatusPENDINGSHIPMENT OrdersShippingStatus = "PENDING_SHIPMENT"
	OrdersShippingStatusSHIPPED         OrdersShippingStatus = "SHIPPED"
	OrdersShippingStatusINTRANSIT       OrdersShippingStatus = "IN_TRANSIT"
	OrdersShippingStatusDELIVERED       OrdersShippingStatus = "DELIVERED"
	OrdersShippingStatusCONFIRMED       OrdersShippingStatus = "CONFIRMED"
	OrdersShippingStatusCANCELLED       OrdersShippingStatus = "CANCELLED"
)

func (e *OrdersShippingStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrdersShippingStatus(s)
	case string:
		*e = OrdersShippingStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OrdersShippingStatus: %T", src)
	}
	return nil
}

type NullOrdersShippingStatus struct {
	OrdersShippingStatus OrdersShippingStatus `json:"ordersShippingStatus"`
	Valid                bool                 `json:"valid"` // Valid is true if OrdersShippingStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrdersShippingStatus) Scan(value interface{}) error {
	if value == nil {
		ns.OrdersShippingStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrdersShippingStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrdersShippingStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrdersShippingStatus), nil
}

func (e OrdersShippingStatus) Valid() bool {
	switch e {
	case OrdersShippingStatusWAITCOMMAND,
		OrdersShippingStatusPENDINGSHIPMENT,
		OrdersShippingStatusSHIPPED,
		OrdersShippingStatusINTRANSIT,
		OrdersShippingStatusDELIVERED,
		OrdersShippingStatusCONFIRMED,
		OrdersShippingStatusCANCELLED:
		return true
	}
	return false
}

func AllOrdersShippingStatusValues() []OrdersShippingStatus {
	return []OrdersShippingStatus{
		OrdersShippingStatusWAITCOMMAND,
		OrdersShippingStatusPENDINGSHIPMENT,
		OrdersShippingStatusSHIPPED,
		OrdersShippingStatusINTRANSIT,
		OrdersShippingStatusDELIVERED,
		OrdersShippingStatusCONFIRMED,
		OrdersShippingStatusCANCELLED,
	}
}

// 主订单表，记录订单汇总信息
type OrdersOrders struct {
	ID            int64       `json:"id"`
	UserID        uuid.UUID   `json:"userID"`
	Currency      string      `json:"currency"`
	StreetAddress string      `json:"streetAddress"`
	City          string      `json:"city"`
	State         string      `json:"state"`
	Country       string      `json:"country"`
	ZipCode       string      `json:"zipCode"`
	Email         string      `json:"email"`
	PaymentStatus interface{} `json:"paymentStatus"`
	CreatedAt     time.Time   `json:"createdAt"`
	UpdatedAt     time.Time   `json:"updatedAt"`
}

type OrdersShippingInfo struct {
	ID              int64                `json:"id"`
	SubOrderID      int64                `json:"subOrderID"`
	MerchantID      uuid.UUID            `json:"merchantID"`
	TrackingNumber  string               `json:"trackingNumber"`
	Carrier         string               `json:"carrier"`
	ShippingStatus  OrdersShippingStatus `json:"shippingStatus"`
	Delivery        time.Time            `json:"delivery"`
	ShippingAddress []byte               `json:"shippingAddress"`
	ReceiverAddress []byte               `json:"receiverAddress"`
	ShippingFee     pgtype.Numeric       `json:"shippingFee"`
	CreatedAt       time.Time            `json:"createdAt"`
	UpdatedAt       time.Time            `json:"updatedAt"`
}

// 子订单表，按商家分单存储
type OrdersSubOrders struct {
	ID             int64                `json:"id"`
	OrderID        int64                `json:"orderID"`
	MerchantID     uuid.UUID            `json:"merchantID"`
	TotalAmount    pgtype.Numeric       `json:"totalAmount"`
	Currency       string               `json:"currency"`
	Status         string               `json:"status"`
	Items          []byte               `json:"items"`
	ShippingStatus OrdersShippingStatus `json:"shippingStatus"`
	CreatedAt      time.Time            `json:"createdAt"`
	UpdatedAt      time.Time            `json:"updatedAt"`
}

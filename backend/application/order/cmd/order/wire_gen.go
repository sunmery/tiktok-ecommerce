// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"backend/application/order/internal/biz"
	"backend/application/order/internal/conf"
	"backend/application/order/internal/data"
	"backend/application/order/internal/server"
	"backend/application/order/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, consul *conf.Consul, observability *conf.Observability, logger log.Logger) (*kratos.App, func(), error) {
	pool := data.NewDB(confData)
	client := data.NewCache(confData)
	discovery, err := data.NewDiscovery(consul)
	if err != nil {
		return nil, nil, err
	}
	paymentServiceClient, err := data.NewPaymentServiceClient(discovery, logger)
	if err != nil {
		return nil, nil, err
	}
	productServiceClient, err := data.NewProductServiceClient(discovery, logger)
	if err != nil {
		return nil, nil, err
	}
	dataData, cleanup, err := data.NewData(pool, client, logger, paymentServiceClient, productServiceClient)
	if err != nil {
		return nil, nil, err
	}
	orderRepo := data.NewOrderRepo(dataData, logger)
	orderUsecase := biz.NewUserUsecase(orderRepo, logger)
	orderServiceService := service.NewOrderServiceService(orderUsecase)
	grpcServer := server.NewGRPCServer(orderServiceService, confServer, observability, logger)
	httpServer := server.NewHTTPServer(confServer, orderServiceService, observability, logger)
	registrar := server.NewRegistrar(consul)
	app := newApp(logger, grpcServer, httpServer, registrar)
	return app, func() {
		cleanup()
	}, nil
}

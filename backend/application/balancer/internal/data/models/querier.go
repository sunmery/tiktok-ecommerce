// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package models

import (
	"context"

	"github.com/google/uuid"
)

type Querier interface {
	// 乐观锁检查
	// 确认冻结 (仅减少冻结金额，资金将流向商家) - 使用乐观锁
	//
	//
	//  UPDATE balances.user_balances
	//  SET frozen     = frozen - $3, -- 金额参数 (分)
	//      version    = version + 1,
	//      updated_at = NOW()
	//  WHERE user_id = $1
	//    AND currency = $2
	//    AND frozen >= $3 -- 确保冻结余额充足
	//    AND version = $4
	ConfirmUserFreeze(ctx context.Context, arg ConfirmUserFreezeParams) error
	// 为用户创建指定币种的初始余额记录 (通常在用户注册或首次涉及该币种时调用)
	//
	//  INSERT INTO balances.user_balances (user_id, currency, available, frozen, version)
	//  VALUES ($1, $2, $3, 0, 0)
	//  RETURNING user_id, currency, available
	CreateConsumerBalance(ctx context.Context, arg CreateConsumerBalanceParams) (CreateConsumerBalanceRow, error)
	// 创建用户支付方式
	//
	//  INSERT INTO balances.user_payment_methods (id, user_id, type, is_default, account_details)
	//  VALUES ($1, $2, $3, $4, $5)
	CreateConsumerPaymentMethods(ctx context.Context, arg CreateConsumerPaymentMethodsParams) error
	// 创建冻结记录
	//
	//  INSERT INTO balances.balance_freezes (id, user_id, order_id, currency, amount, status, expires_at)
	//  VALUES ($1, $2, $3, $4, $5, 'FROZEN', $6)
	//  RETURNING id
	CreateFreeze(ctx context.Context, arg CreateFreezeParams) (int64, error)
	// 为用户创建指定币种的初始余额记录 (通常在用户注册或首次涉及该币种时调用)
	//
	//  INSERT INTO balances.merchant_balances (merchant_id, currency, available, version)
	//  VALUES ($1, $2, $3, 0)
	//  RETURNING merchant_id, currency, available
	CreateMerchantBalance(ctx context.Context, arg CreateMerchantBalanceParams) (CreateMerchantBalanceRow, error)
	// 创建用户支付方式
	//
	//  INSERT INTO balances.merchant_payment_methods (id, merchant_id, type, is_default, account_details)
	//  VALUES ($1, $2, $3, $4, $5)
	CreateMerchantPaymentMethods(ctx context.Context, arg CreateMerchantPaymentMethodsParams) error
	// 创建交易流水记录
	//
	//  INSERT INTO balances.transactions (id, type, amount, currency, from_user_id, to_merchant_id,
	//                                     payment_method_type, payment_account, payment_extra, status, freeze_id,
	//                                     idempotency_key,
	//                                     consumer_version,
	//                                     merchant_version)
	//  VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)
	//  RETURNING id
	CreateTransaction(ctx context.Context, arg CreateTransactionParams) (int64, error)
	// 乐观锁检查
	// 减少用户可用余额 (用于发起提现) - 使用乐观锁
	//
	//
	//  UPDATE balances.user_balances
	//  SET available  = available - $3, -- 金额参数 (分)
	//      version    = version + 1,
	//      updated_at = NOW()
	//  WHERE user_id = $1
	//    AND currency = $2
	//    AND available >= $3 -- 确保余额充足
	//    AND version = $4
	DecreaseUserAvailableBalance(ctx context.Context, arg DecreaseUserAvailableBalanceParams) (int64, error)
	// 乐观锁检查
	// 冻结用户余额 (减少可用，增加冻结) - 使用乐观锁
	//
	//
	//  UPDATE balances.user_balances
	//  SET available  = available - $3, -- 金额参数 (分)
	//      frozen     = frozen + $3,
	//      version    = version + 1,
	//      updated_at = NOW()
	//  WHERE user_id = $1
	//    AND currency = $2
	//    AND available >= $3 -- 确保可用余额充足
	//    AND version = $4
	FreezeUserBalance(ctx context.Context, arg FreezeUserBalanceParams) (int64, error)
	// 确保当前状态是预期的状态 (例如 'FROZEN')
	// 获取所有已过期但仍处于冻结状态的记录 (用于定时任务处理)
	//
	//
	//  SELECT id, user_id, order_id, currency, amount, status, created_at, updated_at, expires_at
	//  FROM balances.balance_freezes
	//  WHERE status = 'FROZEN'
	//    AND expires_at < NOW()
	GetExpiredFreezes(ctx context.Context) ([]BalancesBalanceFreezes, error)
	// 根据 ID 获取冻结记录
	//
	//  SELECT id, user_id, order_id, currency, amount, status, created_at, updated_at, expires_at
	//  FROM balances.balance_freezes
	//  WHERE id = $1
	GetFreeze(ctx context.Context, id int64) (BalancesBalanceFreezes, error)
	// 根据用户 ID 和订单 ID 获取冻结记录 (假设一个订单只有一个冻结记录)
	//
	//  SELECT id, user_id, order_id, currency, amount, status, created_at, updated_at, expires_at
	//  FROM balances.balance_freezes
	//  WHERE user_id = $1
	//    AND order_id = $2
	GetFreezeByOrderForUser(ctx context.Context, arg GetFreezeByOrderForUserParams) (BalancesBalanceFreezes, error)
	// 获取指定商家和币种的余额信息
	//
	//  SELECT available, version, currency
	//  FROM balances.merchant_balances
	//  WHERE merchant_id = $1
	//    AND currency = $2
	GetMerchantBalance(ctx context.Context, arg GetMerchantBalanceParams) (GetMerchantBalanceRow, error)
	// 获取商家支付方式详情 (未来可能用于商家提现)
	//
	//  SELECT id, merchant_id, type, is_default, account_details, created_at
	//  FROM balances.merchant_payment_methods
	//  WHERE id = $1
	//    AND merchant_id = $2
	GetMerchantPaymentMethod(ctx context.Context, arg GetMerchantPaymentMethodParams) (BalancesMerchantPaymentMethods, error)
	// 获取指定商家的版本号
	//
	//  SELECT merchant_id, version
	//  FROM balances.merchant_balances
	//  WHERE merchant_id = $1
	GetMerchantVersionByID(ctx context.Context, merchantID uuid.UUID) (GetMerchantVersionByIDRow, error)
	// 乐观锁检查
	// 获取指定商家的版本号
	//
	//
	//
	//  SELECT merchant_id, version
	//  FROM balances.merchant_balances
	//  WHERE merchant_id = ANY($1::uuid[])
	GetMerchantVersions(ctx context.Context, dollar_1 []uuid.UUID) ([]GetMerchantVersionsRow, error)
	// 根据 用户ID 获取交易流水记录
	//
	//  SELECT id, type, amount, currency, from_user_id, to_merchant_id, payment_method_type, payment_account, payment_extra, status, freeze_id, idempotency_key, consumer_version, merchant_version, created_at, updated_at
	//  FROM balances.transactions
	//  WHERE from_user_id = $1 OR to_merchant_id = $2
	//    AND currency = COALESCE($3, currency)
	//    AND status = COALESCE($4, status)
	//  LIMIT $6 OFFSET $5
	GetTransactions(ctx context.Context, arg GetTransactionsParams) ([]BalancesTransactions, error)
	// 获取指定用户和币种的余额信息
	//
	//  SELECT available, frozen, version, currency
	//  FROM balances.user_balances
	//  WHERE user_id = $1
	//    AND currency = $2
	GetUserBalance(ctx context.Context, arg GetUserBalanceParams) (GetUserBalanceRow, error)
	// 获取用户支付方式详情 (可能在提现时需要)
	//
	//  SELECT id, user_id, type, is_default, account_details, created_at
	//  FROM balances.user_payment_methods
	//  WHERE id = $1
	//    AND user_id = $2
	GetUserPaymentMethod(ctx context.Context, arg GetUserPaymentMethodParams) (BalancesUserPaymentMethods, error)
	// 增加用户可用余额 (用于充值成功, 取消提现, 取消冻结成功后资金退回) - 使用乐观锁
	//
	//  UPDATE balances.user_balances
	//  SET available  = available + $3, -- 金额参数 (分)
	//      version    = version + 1,
	//      updated_at = NOW()
	//  WHERE user_id = $1
	//    AND currency = $2
	//    AND version = $4
	IncreaseUserAvailableBalance(ctx context.Context, arg IncreaseUserAvailableBalanceParams) (int64, error)
	// 乐观锁检查
	// 取消冻结 (增加可用，减少冻结) - 使用乐观锁
	//
	//
	//  UPDATE balances.user_balances
	//  SET available  = available + $3, -- 金额参数 (分)
	//      frozen     = frozen - $3,
	//      version    = version + 1,
	//      updated_at = NOW()
	//  WHERE user_id = $1
	//    AND currency = $2
	//    AND frozen >= $3 -- 确保冻结余额充足
	//    AND version = $4
	UnfreezeUserBalance(ctx context.Context, arg UnfreezeUserBalanceParams) (int64, error)
	// 更新冻结记录状态 (例如: FROZEN -> CONFIRMED 或 FROZEN -> CANCELED)
	//
	//  UPDATE balances.balance_freezes
	//  SET status     = $1,
	//      updated_at = NOW()
	//  WHERE id = $2
	//    AND status = $3
	UpdateFreezeStatus(ctx context.Context, arg UpdateFreezeStatusParams) (int64, error)
	// 乐观锁检查
	// 增加商家可用余额 (订单交易收入) - 使用乐观锁
	//
	//
	//  UPDATE balances.merchant_balances
	//  SET available  = available + $3, -- 金额参数 (分)
	//      version    = version + 1,
	//      updated_at = NOW()
	//  WHERE merchant_id = $1
	//    AND currency = $2
	//    AND version = $4
	UpdateMerchantAvailableBalance(ctx context.Context, arg UpdateMerchantAvailableBalanceParams) (int64, error)
	// 返回交易记录的 ID
	// 更新交易流水状态
	//
	//
	//  UPDATE balances.transactions
	//  SET status     = $1,
	//      updated_at = NOW()
	//  WHERE id = $2
	UpdateTransactionStatus(ctx context.Context, arg UpdateTransactionStatusParams) (int64, error)
}

var _ Querier = (*Queries)(nil)

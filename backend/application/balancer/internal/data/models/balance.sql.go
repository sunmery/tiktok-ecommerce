// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: balance.sql

package models

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const ConfirmUserFreeze = `-- name: ConfirmUserFreeze :exec

UPDATE balances.user_balances
SET frozen     = frozen - $3, -- 金额参数 (分)
    version    = version + 1,
    updated_at = NOW()
WHERE user_id = $1
  AND currency = $2
  AND frozen >= $3 -- 确保冻结余额充足
  AND version = $4
`

type ConfirmUserFreezeParams struct {
	UserID          uuid.UUID      `json:"userID"`
	Currency        string         `json:"currency"`
	Amount          pgtype.Numeric `json:"amount"`
	ExpectedVersion int32          `json:"expectedVersion"`
}

// 乐观锁检查
// 确认冻结 (仅减少冻结金额，资金将流向商家) - 使用乐观锁
//
//	UPDATE balances.user_balances
//	SET frozen     = frozen - $3, -- 金额参数 (分)
//	    version    = version + 1,
//	    updated_at = NOW()
//	WHERE user_id = $1
//	  AND currency = $2
//	  AND frozen >= $3 -- 确保冻结余额充足
//	  AND version = $4
func (q *Queries) ConfirmUserFreeze(ctx context.Context, arg ConfirmUserFreezeParams) error {
	_, err := q.db.Exec(ctx, ConfirmUserFreeze,
		arg.UserID,
		arg.Currency,
		arg.Amount,
		arg.ExpectedVersion,
	)
	return err
}

const CreateConsumerBalance = `-- name: CreateConsumerBalance :one
INSERT INTO balances.user_balances (user_id, currency, available, frozen, version)
VALUES ($1, $2, $3, 0, 0)
RETURNING user_id, currency, available
`

type CreateConsumerBalanceParams struct {
	UserID    uuid.UUID      `json:"userID"`
	Currency  string         `json:"currency"`
	Available pgtype.Numeric `json:"available"`
}

type CreateConsumerBalanceRow struct {
	UserID    uuid.UUID      `json:"userID"`
	Currency  string         `json:"currency"`
	Available pgtype.Numeric `json:"available"`
}

// 为用户创建指定币种的初始余额记录 (通常在用户注册或首次涉及该币种时调用)
//
//	INSERT INTO balances.user_balances (user_id, currency, available, frozen, version)
//	VALUES ($1, $2, $3, 0, 0)
//	RETURNING user_id, currency, available
func (q *Queries) CreateConsumerBalance(ctx context.Context, arg CreateConsumerBalanceParams) (CreateConsumerBalanceRow, error) {
	row := q.db.QueryRow(ctx, CreateConsumerBalance, arg.UserID, arg.Currency, arg.Available)
	var i CreateConsumerBalanceRow
	err := row.Scan(&i.UserID, &i.Currency, &i.Available)
	return i, err
}

const CreateConsumerPaymentMethods = `-- name: CreateConsumerPaymentMethods :exec
INSERT INTO balances.user_payment_methods (id, user_id, type, is_default, account_details)
VALUES ($1, $2, $3, $4, $5)
`

type CreateConsumerPaymentMethodsParams struct {
	ID             int64     `json:"id"`
	UserID         uuid.UUID `json:"userID"`
	Type           string    `json:"type"`
	IsDefault      bool      `json:"isDefault"`
	AccountDetails []byte    `json:"accountDetails"`
}

// 创建用户支付方式
//
//	INSERT INTO balances.user_payment_methods (id, user_id, type, is_default, account_details)
//	VALUES ($1, $2, $3, $4, $5)
func (q *Queries) CreateConsumerPaymentMethods(ctx context.Context, arg CreateConsumerPaymentMethodsParams) error {
	_, err := q.db.Exec(ctx, CreateConsumerPaymentMethods,
		arg.ID,
		arg.UserID,
		arg.Type,
		arg.IsDefault,
		arg.AccountDetails,
	)
	return err
}

const CreateMerchantBalance = `-- name: CreateMerchantBalance :one
INSERT INTO balances.merchant_balances (merchant_id, currency, available, version)
VALUES ($1, $2, $3, 0)
RETURNING merchant_id, currency, available
`

type CreateMerchantBalanceParams struct {
	MerchantID uuid.UUID      `json:"merchantID"`
	Currency   string         `json:"currency"`
	Available  pgtype.Numeric `json:"available"`
}

type CreateMerchantBalanceRow struct {
	MerchantID uuid.UUID      `json:"merchantID"`
	Currency   string         `json:"currency"`
	Available  pgtype.Numeric `json:"available"`
}

// 为用户创建指定币种的初始余额记录 (通常在用户注册或首次涉及该币种时调用)
//
//	INSERT INTO balances.merchant_balances (merchant_id, currency, available, version)
//	VALUES ($1, $2, $3, 0)
//	RETURNING merchant_id, currency, available
func (q *Queries) CreateMerchantBalance(ctx context.Context, arg CreateMerchantBalanceParams) (CreateMerchantBalanceRow, error) {
	row := q.db.QueryRow(ctx, CreateMerchantBalance, arg.MerchantID, arg.Currency, arg.Available)
	var i CreateMerchantBalanceRow
	err := row.Scan(&i.MerchantID, &i.Currency, &i.Available)
	return i, err
}

const CreateMerchantPaymentMethods = `-- name: CreateMerchantPaymentMethods :exec
INSERT INTO balances.merchant_payment_methods (id, merchant_id, type, is_default, account_details)
VALUES ($1, $2, $3, $4, $5)
`

type CreateMerchantPaymentMethodsParams struct {
	ID             int64     `json:"id"`
	MerchantID     uuid.UUID `json:"merchantID"`
	Type           string    `json:"type"`
	IsDefault      bool      `json:"isDefault"`
	AccountDetails []byte    `json:"accountDetails"`
}

// 创建用户支付方式
//
//	INSERT INTO balances.merchant_payment_methods (id, merchant_id, type, is_default, account_details)
//	VALUES ($1, $2, $3, $4, $5)
func (q *Queries) CreateMerchantPaymentMethods(ctx context.Context, arg CreateMerchantPaymentMethodsParams) error {
	_, err := q.db.Exec(ctx, CreateMerchantPaymentMethods,
		arg.ID,
		arg.MerchantID,
		arg.Type,
		arg.IsDefault,
		arg.AccountDetails,
	)
	return err
}

const DecreaseUserAvailableBalance = `-- name: DecreaseUserAvailableBalance :execrows

UPDATE balances.user_balances
SET available  = available - $3, -- 金额参数 (分)
    version    = version + 1,
    updated_at = NOW()
WHERE user_id = $1
  AND currency = $2
  AND available >= $3 -- 确保余额充足
  AND version = $4
`

type DecreaseUserAvailableBalanceParams struct {
	UserID          uuid.UUID      `json:"userID"`
	Currency        string         `json:"currency"`
	Amount          pgtype.Numeric `json:"amount"`
	ExpectedVersion int32          `json:"expectedVersion"`
}

// 乐观锁检查
// 减少用户可用余额 (用于发起提现) - 使用乐观锁
//
//	UPDATE balances.user_balances
//	SET available  = available - $3, -- 金额参数 (分)
//	    version    = version + 1,
//	    updated_at = NOW()
//	WHERE user_id = $1
//	  AND currency = $2
//	  AND available >= $3 -- 确保余额充足
//	  AND version = $4
func (q *Queries) DecreaseUserAvailableBalance(ctx context.Context, arg DecreaseUserAvailableBalanceParams) (int64, error) {
	result, err := q.db.Exec(ctx, DecreaseUserAvailableBalance,
		arg.UserID,
		arg.Currency,
		arg.Amount,
		arg.ExpectedVersion,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const FreezeUserBalance = `-- name: FreezeUserBalance :execrows

UPDATE balances.user_balances
SET available  = available - $3, -- 金额参数 (分)
    frozen     = frozen + $3,
    version    = version + 1,
    updated_at = NOW()
WHERE user_id = $1
  AND currency = $2
  AND available >= $3 -- 确保可用余额充足
  AND version = $4
`

type FreezeUserBalanceParams struct {
	UserID          uuid.UUID      `json:"userID"`
	Currency        string         `json:"currency"`
	Amount          pgtype.Numeric `json:"amount"`
	ExpectedVersion int32          `json:"expectedVersion"`
}

// 乐观锁检查
// 冻结用户余额 (减少可用，增加冻结) - 使用乐观锁
//
//	UPDATE balances.user_balances
//	SET available  = available - $3, -- 金额参数 (分)
//	    frozen     = frozen + $3,
//	    version    = version + 1,
//	    updated_at = NOW()
//	WHERE user_id = $1
//	  AND currency = $2
//	  AND available >= $3 -- 确保可用余额充足
//	  AND version = $4
func (q *Queries) FreezeUserBalance(ctx context.Context, arg FreezeUserBalanceParams) (int64, error) {
	result, err := q.db.Exec(ctx, FreezeUserBalance,
		arg.UserID,
		arg.Currency,
		arg.Amount,
		arg.ExpectedVersion,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const GetMerchantBalance = `-- name: GetMerchantBalance :one
SELECT available, version, currency
FROM balances.merchant_balances
WHERE merchant_id = $1
  AND currency = $2
`

type GetMerchantBalanceParams struct {
	MerchantID uuid.UUID `json:"merchantID"`
	Currency   string    `json:"currency"`
}

type GetMerchantBalanceRow struct {
	Available pgtype.Numeric `json:"available"`
	Version   int32          `json:"version"`
	Currency  string         `json:"currency"`
}

// 获取指定商家和币种的余额信息
//
//	SELECT available, version, currency
//	FROM balances.merchant_balances
//	WHERE merchant_id = $1
//	  AND currency = $2
func (q *Queries) GetMerchantBalance(ctx context.Context, arg GetMerchantBalanceParams) (GetMerchantBalanceRow, error) {
	row := q.db.QueryRow(ctx, GetMerchantBalance, arg.MerchantID, arg.Currency)
	var i GetMerchantBalanceRow
	err := row.Scan(&i.Available, &i.Version, &i.Currency)
	return i, err
}

const GetMerchantVersionByID = `-- name: GetMerchantVersionByID :one
SELECT merchant_id, version
FROM balances.merchant_balances
WHERE merchant_id = $1
`

type GetMerchantVersionByIDRow struct {
	MerchantID uuid.UUID `json:"merchantID"`
	Version    int32     `json:"version"`
}

// 获取指定商家的版本号
//
//	SELECT merchant_id, version
//	FROM balances.merchant_balances
//	WHERE merchant_id = $1
func (q *Queries) GetMerchantVersionByID(ctx context.Context, merchantID uuid.UUID) (GetMerchantVersionByIDRow, error) {
	row := q.db.QueryRow(ctx, GetMerchantVersionByID, merchantID)
	var i GetMerchantVersionByIDRow
	err := row.Scan(&i.MerchantID, &i.Version)
	return i, err
}

const GetMerchantVersions = `-- name: GetMerchantVersions :many


SELECT merchant_id, version
FROM balances.merchant_balances
WHERE merchant_id = ANY($1::uuid[])
`

type GetMerchantVersionsRow struct {
	MerchantID uuid.UUID `json:"merchantID"`
	Version    int32     `json:"version"`
}

// 乐观锁检查
// 获取指定商家的版本号
//
//	SELECT merchant_id, version
//	FROM balances.merchant_balances
//	WHERE merchant_id = ANY($1::uuid[])
func (q *Queries) GetMerchantVersions(ctx context.Context, dollar_1 []uuid.UUID) ([]GetMerchantVersionsRow, error) {
	rows, err := q.db.Query(ctx, GetMerchantVersions, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMerchantVersionsRow
	for rows.Next() {
		var i GetMerchantVersionsRow
		if err := rows.Scan(&i.MerchantID, &i.Version); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetUserBalance = `-- name: GetUserBalance :one
SELECT available, frozen, version, currency
FROM balances.user_balances
WHERE user_id = $1
  AND currency = $2
`

type GetUserBalanceParams struct {
	UserID   uuid.UUID `json:"userID"`
	Currency string    `json:"currency"`
}

type GetUserBalanceRow struct {
	Available pgtype.Numeric `json:"available"`
	Frozen    pgtype.Numeric `json:"frozen"`
	Version   int32          `json:"version"`
	Currency  string         `json:"currency"`
}

// 获取指定用户和币种的余额信息
//
//	SELECT available, frozen, version, currency
//	FROM balances.user_balances
//	WHERE user_id = $1
//	  AND currency = $2
func (q *Queries) GetUserBalance(ctx context.Context, arg GetUserBalanceParams) (GetUserBalanceRow, error) {
	row := q.db.QueryRow(ctx, GetUserBalance, arg.UserID, arg.Currency)
	var i GetUserBalanceRow
	err := row.Scan(
		&i.Available,
		&i.Frozen,
		&i.Version,
		&i.Currency,
	)
	return i, err
}

const IncreaseMerchantAvailableBalance = `-- name: IncreaseMerchantAvailableBalance :execrows

UPDATE balances.merchant_balances
SET available  = available + $3, -- 金额参数 (分)
    version    = version + 1,
    updated_at = NOW()
WHERE merchant_id = $1
  AND currency = $2
  AND version = $4
`

type IncreaseMerchantAvailableBalanceParams struct {
	MerchantID      uuid.UUID      `json:"merchantID"`
	Currency        string         `json:"currency"`
	Amount          pgtype.Numeric `json:"amount"`
	ExpectedVersion int32          `json:"expectedVersion"`
}

// 乐观锁检查
// 增加商家可用余额 (用于充值成功) - 使用乐观锁
//
//	UPDATE balances.merchant_balances
//	SET available  = available + $3, -- 金额参数 (分)
//	    version    = version + 1,
//	    updated_at = NOW()
//	WHERE merchant_id = $1
//	  AND currency = $2
//	  AND version = $4
func (q *Queries) IncreaseMerchantAvailableBalance(ctx context.Context, arg IncreaseMerchantAvailableBalanceParams) (int64, error) {
	result, err := q.db.Exec(ctx, IncreaseMerchantAvailableBalance,
		arg.MerchantID,
		arg.Currency,
		arg.Amount,
		arg.ExpectedVersion,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const IncreaseUserAvailableBalance = `-- name: IncreaseUserAvailableBalance :execrows
UPDATE balances.user_balances
SET available  = available + $3, -- 金额参数 (分)
    version    = version + 1,
    updated_at = NOW()
WHERE user_id = $1
  AND currency = $2
  AND version = $4
`

type IncreaseUserAvailableBalanceParams struct {
	UserID          uuid.UUID      `json:"userID"`
	Currency        string         `json:"currency"`
	Amount          pgtype.Numeric `json:"amount"`
	ExpectedVersion int32          `json:"expectedVersion"`
}

// 增加用户可用余额 (用于充值成功, 取消提现, 取消冻结成功后资金退回) - 使用乐观锁
//
//	UPDATE balances.user_balances
//	SET available  = available + $3, -- 金额参数 (分)
//	    version    = version + 1,
//	    updated_at = NOW()
//	WHERE user_id = $1
//	  AND currency = $2
//	  AND version = $4
func (q *Queries) IncreaseUserAvailableBalance(ctx context.Context, arg IncreaseUserAvailableBalanceParams) (int64, error) {
	result, err := q.db.Exec(ctx, IncreaseUserAvailableBalance,
		arg.UserID,
		arg.Currency,
		arg.Amount,
		arg.ExpectedVersion,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const UnfreezeUserBalance = `-- name: UnfreezeUserBalance :execrows

UPDATE balances.user_balances
SET available  = available + $3, -- 金额参数 (分)
    frozen     = frozen - $3,
    version    = version + 1,
    updated_at = NOW()
WHERE user_id = $1
  AND currency = $2
  AND frozen >= $3 -- 确保冻结余额充足
  AND version = $4
`

type UnfreezeUserBalanceParams struct {
	UserID          uuid.UUID      `json:"userID"`
	Currency        string         `json:"currency"`
	Amount          pgtype.Numeric `json:"amount"`
	ExpectedVersion int32          `json:"expectedVersion"`
}

// 乐观锁检查
// 取消冻结 (增加可用，减少冻结) - 使用乐观锁
//
//	UPDATE balances.user_balances
//	SET available  = available + $3, -- 金额参数 (分)
//	    frozen     = frozen - $3,
//	    version    = version + 1,
//	    updated_at = NOW()
//	WHERE user_id = $1
//	  AND currency = $2
//	  AND frozen >= $3 -- 确保冻结余额充足
//	  AND version = $4
func (q *Queries) UnfreezeUserBalance(ctx context.Context, arg UnfreezeUserBalanceParams) (int64, error) {
	result, err := q.db.Exec(ctx, UnfreezeUserBalance,
		arg.UserID,
		arg.Currency,
		arg.Amount,
		arg.ExpectedVersion,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const UpdateMerchantAvailableBalance = `-- name: UpdateMerchantAvailableBalance :execrows

UPDATE balances.merchant_balances
SET available  = available + $3, -- 金额参数 (分)
    version    = version + 1,
    updated_at = NOW()
WHERE merchant_id = $1
  AND currency = $2
  AND version = $4
`

type UpdateMerchantAvailableBalanceParams struct {
	MerchantID      uuid.UUID      `json:"merchantID"`
	Currency        string         `json:"currency"`
	Amount          pgtype.Numeric `json:"amount"`
	ExpectedVersion int32          `json:"expectedVersion"`
}

// 乐观锁检查
// 增加商家可用余额 (订单交易收入) - 使用乐观锁
//
//	UPDATE balances.merchant_balances
//	SET available  = available + $3, -- 金额参数 (分)
//	    version    = version + 1,
//	    updated_at = NOW()
//	WHERE merchant_id = $1
//	  AND currency = $2
//	  AND version = $4
func (q *Queries) UpdateMerchantAvailableBalance(ctx context.Context, arg UpdateMerchantAvailableBalanceParams) (int64, error) {
	result, err := q.db.Exec(ctx, UpdateMerchantAvailableBalance,
		arg.MerchantID,
		arg.Currency,
		arg.Amount,
		arg.ExpectedVersion,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

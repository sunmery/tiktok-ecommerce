// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: transactions.sql

package models

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const CreateTransaction = `-- name: CreateTransaction :one
INSERT INTO balances.transactions (id,
                                   type, amount, currency, from_user_id, to_merchant_id,
                                   payment_method_type, payment_account, payment_extra, status, freeze_id,
                                   idempotency_key,
                                   consumer_version,
                                   merchant_version)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)
RETURNING id
`

type CreateTransactionParams struct {
	ID                int64          `json:"id"`
	Type              string         `json:"type"`
	Amount            pgtype.Numeric `json:"amount"`
	Currency          string         `json:"currency"`
	FromUserID        uuid.UUID      `json:"fromUserID"`
	ToMerchantID      uuid.UUID      `json:"toMerchantID"`
	PaymentMethodType string         `json:"paymentMethodType"`
	PaymentAccount    string         `json:"paymentAccount"`
	PaymentExtra      []byte         `json:"paymentExtra"`
	Status            string         `json:"status"`
	FreezeID          int64          `json:"freezeID"`
	IdempotencyKey    string         `json:"idempotencyKey"`
	ConsumerVersion   int64          `json:"consumerVersion"`
	MerchantVersion   int64          `json:"merchantVersion"`
}

// 创建交易流水记录
//
//	INSERT INTO balances.transactions (id,
//	                                   type, amount, currency, from_user_id, to_merchant_id,
//	                                   payment_method_type, payment_account, payment_extra, status, freeze_id,
//	                                   idempotency_key,
//	                                   consumer_version,
//	                                   merchant_version)
//	VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)
//	RETURNING id
func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (int64, error) {
	row := q.db.QueryRow(ctx, CreateTransaction,
		arg.ID,
		arg.Type,
		arg.Amount,
		arg.Currency,
		arg.FromUserID,
		arg.ToMerchantID,
		arg.PaymentMethodType,
		arg.PaymentAccount,
		arg.PaymentExtra,
		arg.Status,
		arg.FreezeID,
		arg.IdempotencyKey,
		arg.ConsumerVersion,
		arg.MerchantVersion,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const GetConsumerTransactions = `-- name: GetConsumerTransactions :many
SELECT id, type, amount, currency, from_user_id, to_merchant_id, payment_method_type, payment_account, payment_extra, status, freeze_id, idempotency_key, consumer_version, merchant_version, created_at, updated_at
FROM balances.transactions
WHERE from_user_id = $1
  AND currency = COALESCE($2, currency)
  AND status = COALESCE($3, status)
LIMIT $5 OFFSET $4
`

type GetConsumerTransactionsParams struct {
	UserID   uuid.UUID `json:"userID"`
	Currency string    `json:"currency"`
	Status   string    `json:"status"`
	Page     int64     `json:"page"`
	PageSize int64     `json:"pageSize"`
}

// 根据 用户ID 获取交易流水记录
//
//	SELECT id, type, amount, currency, from_user_id, to_merchant_id, payment_method_type, payment_account, payment_extra, status, freeze_id, idempotency_key, consumer_version, merchant_version, created_at, updated_at
//	FROM balances.transactions
//	WHERE from_user_id = $1
//	  AND currency = COALESCE($2, currency)
//	  AND status = COALESCE($3, status)
//	LIMIT $5 OFFSET $4
func (q *Queries) GetConsumerTransactions(ctx context.Context, arg GetConsumerTransactionsParams) ([]BalancesTransactions, error) {
	rows, err := q.db.Query(ctx, GetConsumerTransactions,
		arg.UserID,
		arg.Currency,
		arg.Status,
		arg.Page,
		arg.PageSize,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BalancesTransactions
	for rows.Next() {
		var i BalancesTransactions
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Amount,
			&i.Currency,
			&i.FromUserID,
			&i.ToMerchantID,
			&i.PaymentMethodType,
			&i.PaymentAccount,
			&i.PaymentExtra,
			&i.Status,
			&i.FreezeID,
			&i.IdempotencyKey,
			&i.ConsumerVersion,
			&i.MerchantVersion,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetMerchantPaymentMethod = `-- name: GetMerchantPaymentMethod :one
SELECT id, merchant_id, type, is_default, account_details, created_at
FROM balances.merchant_payment_methods
WHERE id = $1
  AND merchant_id = $2
`

type GetMerchantPaymentMethodParams struct {
	ID         int64     `json:"id"`
	MerchantID uuid.UUID `json:"merchantID"`
}

// 获取商家支付方式详情 (未来可能用于商家提现)
//
//	SELECT id, merchant_id, type, is_default, account_details, created_at
//	FROM balances.merchant_payment_methods
//	WHERE id = $1
//	  AND merchant_id = $2
func (q *Queries) GetMerchantPaymentMethod(ctx context.Context, arg GetMerchantPaymentMethodParams) (BalancesMerchantPaymentMethods, error) {
	row := q.db.QueryRow(ctx, GetMerchantPaymentMethod, arg.ID, arg.MerchantID)
	var i BalancesMerchantPaymentMethods
	err := row.Scan(
		&i.ID,
		&i.MerchantID,
		&i.Type,
		&i.IsDefault,
		&i.AccountDetails,
		&i.CreatedAt,
	)
	return i, err
}

const GetMerchantTransactions = `-- name: GetMerchantTransactions :many
SELECT id, type, amount, currency, from_user_id, to_merchant_id, payment_method_type, payment_account, payment_extra, status, freeze_id, idempotency_key, consumer_version, merchant_version, created_at, updated_at
FROM balances.transactions
WHERE to_merchant_id = $1
  AND currency = COALESCE($2, currency)
  AND status = COALESCE($3, status)
LIMIT $5 OFFSET $4
`

type GetMerchantTransactionsParams struct {
	MerchantID uuid.UUID `json:"merchantID"`
	Currency   string    `json:"currency"`
	Status     string    `json:"status"`
	Page       int64     `json:"page"`
	PageSize   int64     `json:"pageSize"`
}

// 根据 商家ID 获取交易流水记录
//
//	SELECT id, type, amount, currency, from_user_id, to_merchant_id, payment_method_type, payment_account, payment_extra, status, freeze_id, idempotency_key, consumer_version, merchant_version, created_at, updated_at
//	FROM balances.transactions
//	WHERE to_merchant_id = $1
//	  AND currency = COALESCE($2, currency)
//	  AND status = COALESCE($3, status)
//	LIMIT $5 OFFSET $4
func (q *Queries) GetMerchantTransactions(ctx context.Context, arg GetMerchantTransactionsParams) ([]BalancesTransactions, error) {
	rows, err := q.db.Query(ctx, GetMerchantTransactions,
		arg.MerchantID,
		arg.Currency,
		arg.Status,
		arg.Page,
		arg.PageSize,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BalancesTransactions
	for rows.Next() {
		var i BalancesTransactions
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Amount,
			&i.Currency,
			&i.FromUserID,
			&i.ToMerchantID,
			&i.PaymentMethodType,
			&i.PaymentAccount,
			&i.PaymentExtra,
			&i.Status,
			&i.FreezeID,
			&i.IdempotencyKey,
			&i.ConsumerVersion,
			&i.MerchantVersion,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetUserPaymentMethod = `-- name: GetUserPaymentMethod :one
SELECT id, user_id, type, is_default, account_details, created_at
FROM balances.user_payment_methods
WHERE id = $1
  AND user_id = $2
`

type GetUserPaymentMethodParams struct {
	ID     int64     `json:"id"`
	UserID uuid.UUID `json:"userID"`
}

// 获取用户支付方式详情 (可能在提现时需要)
//
//	SELECT id, user_id, type, is_default, account_details, created_at
//	FROM balances.user_payment_methods
//	WHERE id = $1
//	  AND user_id = $2
func (q *Queries) GetUserPaymentMethod(ctx context.Context, arg GetUserPaymentMethodParams) (BalancesUserPaymentMethods, error) {
	row := q.db.QueryRow(ctx, GetUserPaymentMethod, arg.ID, arg.UserID)
	var i BalancesUserPaymentMethods
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.IsDefault,
		&i.AccountDetails,
		&i.CreatedAt,
	)
	return i, err
}

const UpdateTransactionStatus = `-- name: UpdateTransactionStatus :execrows

UPDATE balances.transactions
SET status     = $1,
    updated_at = NOW()
WHERE id = $2
`

type UpdateTransactionStatusParams struct {
	Status string `json:"status"`
	ID     int64  `json:"id"`
}

// 返回交易记录的 ID
// 更新交易流水状态
//
//	UPDATE balances.transactions
//	SET status     = $1,
//	    updated_at = NOW()
//	WHERE id = $2
func (q *Queries) UpdateTransactionStatus(ctx context.Context, arg UpdateTransactionStatusParams) (int64, error) {
	result, err := q.db.Exec(ctx, UpdateTransactionStatus, arg.Status, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

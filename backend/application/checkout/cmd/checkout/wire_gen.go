// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"backend/application/checkout/internal/biz"
	"backend/application/checkout/internal/conf"
	"backend/application/checkout/internal/data"
	"backend/application/checkout/internal/server"
	"backend/application/checkout/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, consul *conf.Consul, observability *conf.Observability, logger log.Logger) (*kratos.App, func(), error) {
	client := data.NewCache(confData)
	discovery, err := data.NewDiscovery(consul)
	if err != nil {
		return nil, nil, err
	}
	cartServiceClient, err := data.NewCartServiceClient(discovery, logger)
	if err != nil {
		return nil, nil, err
	}
	userServiceClient, err := data.NewUserServiceClient(discovery, logger)
	if err != nil {
		return nil, nil, err
	}
	orderServiceClient, err := data.NewOrderServiceClient(discovery, logger)
	if err != nil {
		return nil, nil, err
	}
	paymentServiceClient, err := data.NewPaymentServiceClient(discovery, logger)
	if err != nil {
		return nil, nil, err
	}
	productServiceClient, err := data.NewProductServiceClient(discovery, logger)
	if err != nil {
		return nil, nil, err
	}
	consumerOrderClient, err := data.NewConsumerOrderServiceClient(discovery, logger)
	if err != nil {
		return nil, nil, err
	}
	balanceClient, err := data.NewBananceServiceClient(discovery, logger)
	if err != nil {
		return nil, nil, err
	}
	dataData, cleanup, err := data.NewData(client, logger, cartServiceClient, userServiceClient, orderServiceClient, paymentServiceClient, productServiceClient, consumerOrderClient, balanceClient)
	if err != nil {
		return nil, nil, err
	}
	checkoutRepo := data.NewCheckoutRepo(dataData, logger)
	checkoutUsecase := biz.NewCheckoutUsecase(checkoutRepo, logger)
	checkoutServiceService := service.NewCheckoutServiceService(checkoutUsecase)
	grpcServer := server.NewGRPCServer(checkoutServiceService, confServer, observability, logger)
	httpServer := server.NewHTTPServer(confServer, checkoutServiceService, observability, logger)
	registrar := server.NewRegistrar(consul)
	app := newApp(logger, grpcServer, httpServer, registrar)
	return app, func() {
		cleanup()
	}, nil
}

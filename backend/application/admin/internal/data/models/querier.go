// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package models

import (
	"context"
)

type Querier interface {
	// 检查评论是否包含任何激活的敏感词 (使用 ILIKE 进行不区分大小写匹配)
	//
	//  SELECT EXISTS (
	//    SELECT 1
	//    FROM admin.sensitive_words sw
	//    WHERE $1::text ILIKE '%' || sw.word || '%' AND sw.is_active = TRUE
	//  )
	CheckCommentContainsSensitiveWord(ctx context.Context, word string) (bool, error)
	// 跳过重复的敏感词
	//
	//  INSERT
	//  INTO admin.sensitive_words(created_by, category, word, level, is_active)
	//  SELECT unnest($1::UUID[]),
	//         unnest($2::VARCHAR[]),
	//         unnest($3::VARCHAR[]),
	//         unnest($4::INT[]),
	//         unnest($5::BOOL[])
	//  ON CONFLICT (word) DO NOTHING
	CreateBulkSensitiveWords(ctx context.Context, arg CreateBulkSensitiveWordsParams) (int64, error)
	//DeleteSensitiveWords
	//
	//  DELETE
	//  FROM admin.sensitive_words
	//  WHERE id = $1
	DeleteSensitiveWords(ctx context.Context, id int32) (int64, error)
	//GetAllOrders
	//
	//  SELECT os.id     AS sub_order_id,
	//         os.total_amount,
	//         os.currency,
	//         os.status AS payment_status,
	//         os.items,
	//         os.shipping_status,
	//         os.created_at,
	//         os.updated_at,
	//         oo.id     AS order_id,
	//         oo.user_id,
	//         json_build_object(
	//                 'streetAddress', oo.street_address,
	//                 'city', oo.city,
	//                 'state', oo.state,
	//                 'country', oo.country,
	//                 'zipCode', oo.zip_code
	//         )         AS consumer_address,
	//         oo.email
	//  FROM orders.sub_orders os
	//           JOIN orders.orders oo
	//                ON os.order_id = oo.id
	//  group by oo.user_id, os.updated_at, os.id, os.id, os.total_amount, os.currency, os.status, os.items, os.shipping_status,
	//           os.created_at, os.updated_at, oo.id, oo.user_id, oo.email
	//  ORDER BY os.created_at DESC
	//  LIMIT $2 OFFSET $1
	GetAllOrders(ctx context.Context, arg GetAllOrdersParams) ([]GetAllOrdersRow, error)
	//GetSensitiveWords
	//
	//  SELECT id, created_by, category, word, level, is_active, created_at, updated_at
	//  FROM admin.sensitive_words
	//  ORDER BY created_at DESC
	//  LIMIT $2::INT OFFSET $1::INT
	GetSensitiveWords(ctx context.Context, arg GetSensitiveWordsParams) ([]AdminSensitiveWords, error)
	//UpdateSensitiveWords
	//
	//  UPDATE admin.sensitive_words
	//  SET category   = COALESCE($1, category),
	//      created_by = COALESCE($2, created_by),
	//      word       = COALESCE($3, word),
	//      level      = COALESCE($4, level),
	//      is_active  = COALESCE($5, is_active)
	//  WHERE id = $6
	UpdateSensitiveWords(ctx context.Context, arg UpdateSensitiveWordsParams) (int64, error)
}

var _ Querier = (*Queries)(nil)

// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"backend/application/admin/internal/biz"
	"backend/application/admin/internal/conf"
	"backend/application/admin/internal/data"
	"backend/application/admin/internal/server"
	"backend/application/admin/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, consul *conf.Consul, observability *conf.Observability, logger log.Logger) (*kratos.App, func(), error) {
	pool := data.NewDB(confData)
	client := data.NewCache(confData)
	dataData, cleanup, err := data.NewData(pool, client, logger)
	if err != nil {
		return nil, nil, err
	}
	adminOrderRepo := data.NewAdminOrderRepo(dataData, logger)
	adminOrderUsecase := biz.NewAdminOrderUsecase(adminOrderRepo, logger)
	adminOrderService := service.NewAdminOrderService(adminOrderUsecase)
	adminCommentRepo := data.NewAdminCommentRepo(dataData, logger)
	adminCommentUsecase := biz.NewAdminCommentUsecase(adminCommentRepo, logger)
	adminCommentService := service.NewAdminCommentService(adminCommentUsecase)
	grpcServer := server.NewGRPCServer(confServer, observability, logger, adminOrderService, adminCommentService)
	httpServer := server.NewHTTPServer(confServer, observability, logger, adminOrderService, adminCommentService)
	registrar := server.NewRegistrar(consul)
	app := newApp(logger, grpcServer, httpServer, registrar)
	return app, func() {
		cleanup()
	}, nil
}
